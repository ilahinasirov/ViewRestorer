CREATE VIEW "SEPTEM"."VW_HR_OrganizationStructure" AS
 SELECT org."Id",
    br."Name" AS "BranchName",
    "HR_Structures"."Name" AS "StructureName",
    _str."Name" AS "ParentName",
    org."IsActive",
    org."StructureId",
    org."BranchId",
        CASE
            WHEN ((org."IsActive" = false) AND (( SELECT count(1) AS count
               FROM "SEPTEM"."HR_OrganizationStructure" os
              WHERE ((os."IsActive" = false) AND (os."Id" = org."OrganizationStructureId"))) = 0)) THEN NULL::uuid
            WHEN ((org."IsActive" = true) AND (( SELECT count(1) AS count
               FROM "SEPTEM"."HR_OrganizationStructure" os
              WHERE ((os."IsActive" = true) AND (os."Id" = org."OrganizationStructureId"))) = 0)) THEN NULL::uuid
            ELSE org."OrganizationStructureId"
        END AS "ParentId",
    org."BusinessId",
    org."Budget",
    org."CreatedDate",
    org."CreatedUserId",
    org."ModifiedUserId",
    org."ModifiedDate",
    org."CuratorId",
    ''::text AS "CuratorFullName",
    cur."Name" AS "CurationStructureName",
    cur."Name" AS "StructureCuration",
    org."ParentName" AS "FullParentName",
    ((COALESCE(((_str."Name")::text || '/'::text), ''::text) || ("HR_Structures"."Name")::text))::character varying(150) AS "FullOrgName"
   FROM (((((("SEPTEM"."HR_OrganizationStructure" org
     JOIN "SEPTEM"."HR_Branches" br ON ((br."Id" = org."BranchId")))
     JOIN "SEPTEM"."HR_Structures" ON (("HR_Structures"."Id" = org."StructureId")))
     LEFT JOIN "SEPTEM"."HR_OrganizationStructure" horg ON ((horg."Id" = org."OrganizationStructureId")))
     LEFT JOIN "SEPTEM"."HR_Branches" _br ON ((_br."Id" = horg."BranchId")))
     LEFT JOIN "SEPTEM"."HR_Structures" _str ON ((_str."Id" = horg."StructureId")))
     LEFT JOIN "SEPTEM"."HR_StructureCurations" cur ON ((cur."Id" = org."CuratorId")));

CREATE VIEW "SEPTEM"."VW_Employees" AS
 SELECT emp."Id",
    (((((person."Surname")::text || ' '::text) || (person."Name")::text) || ' '::text) || (COALESCE(person."Patronymic", ''::character varying))::text) AS "FullName",
    person."Name",
    (((person."Surname")::text || COALESCE(((' ('::text || (person."OldSurname")::text) || ')'::text), ''::text)))::character varying(50) AS "Surname",
    person."Patronymic",
    person."Gender",
    emp."PersonId",
    emp."StaffUnitId",
    staffunit."Name" AS "StaffUnitName",
    emp."StartDate",
    emp."EndDate",
    emp."Salary",
    emp."IsStaff",
    emp."IsStaffType",
    emp."WorkEmail",
    emp."WorkPhone",
    emp."EmployeeStatuses",
    staffunit."BranchId",
    structure."BranchName",
    staffunit."OrganizationStructureId",
    structure."StructureName",
    person."BirthDate",
    person."ExperienceMonths",
    person."ExperienceDays",
    person."ExperienceYears",
    person."ContractorId",
    person."Uid",
    person."MartialStatusId",
    NULL::bytea AS "Photo",
    person."SocialCard",
    person."BirthPlaceId",
    edu."Name" AS "EducationLevelName",
    emp."BusinessId",
    person."IdentityDocNum",
    ste."VacDayLimit",
    dr."DocNumber",
    emp."OrderNum",
    emp."ContractStartDate",
    emp."ContractEndDate",
    emp."ContractDuration",
    (COALESCE(emp."ContractType", hec."ContractType"))::character varying(50) AS "ContractType",
    emp."TestPeriodDate",
    person."AccountNumber",
    person."IdCardEndDate",
    person."BranchCode",
    person."SubCode",
    person."IsForeign",
    staffunit."OfficeType",
    COALESCE((stt."Name")::character varying(500), (hs."Name")::character varying(500), (hb."Name")::character varying(500), emp."WorkPlace") AS "WorkPlace",
    structure."CurationStructureName",
    structure."CurationStructureName" AS "CurationStructure",
    emp."IsRelatedPerson",
    ccr."Name" AS "ContractClosureReasons",
    ''::text AS "FullOrgName",
    emp."DurationYear",
    emp."DurationMonth",
    emp."DurationDay",
    structure."FullParentName",
    person."IssueDate",
    person."IssueOrgName",
    person."CurrentAddress",
    emp."StartTime",
    emp."EndTime",
    emp."LunchStartTime",
    emp."LunchEndTime",
    emp."MorningShiftStartTime",
    emp."MorningShiftEndTime",
    emp."EveningShiftStartTime",
    emp."EveningShiftEndTime",
    emp."ShiftRestDay",
    emp."ShiftLunch",
    emp."WorkScheduleType",
    COALESCE(emp."TestPeriod", hec."TestPeriod") AS "TestPeriod",
    COALESCE(emp."MainOrAdditional", hec."MainOrAdditional") AS "MainOrAdditional",
    emp."ContractDate",
    emp."ContractNumber",
    person."Iban",
    staffunit."IsManagerial",
    hs."IsRegion",
    hst."Name" AS "StructureType",
    COALESCE(stt."Code", (hs."Code")::character varying(500), (hb."Code")::character varying(500)) AS "WorkPlaceCode",
    structure."StructureId",
    ste."Id" AS "StaffTypeId"
   FROM ((((((((((((("SEPTEM"."HR_Employees" emp
     JOIN "SEPTEM"."CRM_PhysicalPerson" person ON ((person."Id" = emp."PersonId")))
     JOIN "SEPTEM"."HR_StaffUnits" staffunit ON ((staffunit."Id" = emp."StaffUnitId")))
     LEFT JOIN "SEPTEM"."VW_HR_OrganizationStructure" structure ON ((structure."Id" = staffunit."OrganizationStructureId")))
     LEFT JOIN "SEPTEM"."HR_StaffTypes" ste ON ((ste."Id" = staffunit."StaffTypeId")))
     JOIN "SEPTEM"."HR_EmployeeHire" hire ON ((hire."EmployeeId" = emp."Id")))
     JOIN "SEPTEM"."HR_DocsRepo" dr ON ((dr."Id" = hire."DocsRepoId")))
     LEFT JOIN "SEPTEM"."REF_ContractClosureReasons" ccr ON ((emp."ContractClosureReasonsId" = ccr."Id")))
     LEFT JOIN "SEPTEM"."REF_EducationLevel" edu ON ((edu."Id" = person."EducationLevelId")))
     LEFT JOIN "SEPTEM"."HR_EmployeeContracts" hec ON ((emp."Id" = hec."EmployeeId")))
     LEFT JOIN "SEPTEM"."HR_Structures" hs ON ((hs."Id" = structure."StructureId")))
     LEFT JOIN "SEPTEM"."HR_StructureTypes" hst ON ((hst."Id" = hs."StructureTypeId")))
     LEFT JOIN "SEPTEM"."HR_Branches" hb ON ((hb."Id" = emp."WorkingPlace")))
     LEFT JOIN "SEPTEM"."HR_Structures" stt ON ((stt."Id" = emp."WorkingPlace")))
  ORDER BY emp."OrderNum";

CREATE VIEW "SEPTEM"."VW_BonusItems" AS
 SELECT bi."Id",
    bi."EmployeeId",
    bi."RopAmount",
    bi."CapitalizationAmount",
    bi."WoAmount",
    bi."TotalAmount",
    bi."BonusId",
    bi."Description",
    emp."FullName",
    emp."StaffUnitName",
    emp."BranchName",
    pb."Year",
    pb."MonthNumber",
    emp."BusinessId",
    emp."Salary",
    pb."Status",
    pb."Type" AS "BonusType",
    bi."NetAmount",
    emp."Uid",
    emp."AccountNumber"
   FROM (("SEPTEM"."PR_BonusItems" bi
     JOIN "SEPTEM"."PR_Bonuses" pb ON ((pb."Id" = bi."BonusId")))
     JOIN "SEPTEM"."VW_Employees" emp ON ((emp."Id" = bi."EmployeeId")));

CREATE VIEW "SEPTEM"."VW_Branches" AS
 SELECT hb."Id",
    hb."Name",
    hb."BusinessId"
   FROM "SEPTEM"."HR_Branches" hb
  WHERE (((hb."Name")::text <> 'Filial'::text) AND (hb."IsActive" = true))
UNION
 SELECT "HR_Structures"."Id",
    "HR_Structures"."Name",
    "HR_Structures"."BusinessId"
   FROM "SEPTEM"."HR_Structures"
  WHERE (("HR_Structures"."StructureTypeId" IN ( SELECT "HR_StructureTypes"."Id"
           FROM "SEPTEM"."HR_StructureTypes"
          WHERE (("HR_StructureTypes"."IsActive" = true) AND (("HR_StructureTypes"."Name")::text = 'Filial'::text)))) OR (("HR_Structures"."Name")::text = 'Müştəri Xidmətləri departamenti'::text));

CREATE VIEW "SEPTEM"."VW_Business" AS
 SELECT b."Id",
    b."Name",
    b."Note",
    br."Name" AS "RoleName",
    br."Code" AS "RoleCode",
    bu."UserId"
   FROM (("SEPTEM"."Business" b
     JOIN "SEPTEM"."BusinessUsers" bu ON ((bu."BusinessId" = b."Id")))
     JOIN "SEPTEM"."BusinessRoles" br ON ((br."Id" = bu."BusinessRoleId")));

CREATE VIEW "SEPTEM"."VW_BusinessUserRoles" AS
 SELECT ur."Id",
    u."Id" AS "UserId",
    u."EmployeeId",
    ur."RoleId",
    r."Name" AS "Role",
    bu."BusinessId",
    he."WorkEmail"
   FROM (((("SEPTEM"."BusinessUsers" bu
     JOIN "SEPTEM"."User" u ON ((u."Id" = bu."UserId")))
     JOIN "SEPTEM"."UserRole" ur ON ((u."RolesCollectionId" = ur."CollectionId")))
     JOIN "SEPTEM"."HR_Employees" he ON ((he."Id" = u."EmployeeId")))
     LEFT JOIN "SEPTEM"."Role" r ON ((r."Id" = ur."RoleId")));

CREATE VIEW "SEPTEM"."VW_REF_Localities" AS
 SELECT localities."Id",
    localities."Name",
    localities."Description",
    localities."IsActive",
    localities."CountryId",
    country."Name" AS "CountryName",
    (((country."Name")::text || ', '::text) || (localities."Name")::text) AS "FullName"
   FROM ("SEPTEM"."REF_Localities" localities
     JOIN "SEPTEM"."REF_Country" country ON ((country."Id" = localities."CountryId")));

CREATE VIEW "SEPTEM"."VW_CRM_ContractorAddresses" AS
 SELECT address."Id",
    address."LocalitiesId",
    address."AddressType",
    address."Street",
    address."Building",
    address."House",
    address."Apartment",
    address."PostalCode",
    address."Description",
    address."PersonId",
    localities."FullName" AS "LocalitiesName",
    (((((localities."FullName" || ', '::text) || (address."Street")::text) || COALESCE(((', '::text || (address."Apartment")::text) || ', '::text), ''::text)) || COALESCE(((address."Building")::text || ', '::text), ''::text)) || (COALESCE(address."House", ''::character varying))::text) AS "FullAddress",
    person."BusinessId"
   FROM (("SEPTEM"."CRM_ContractorAddresses" address
     JOIN "SEPTEM"."CRM_PhysicalPerson" person ON ((person."Id" = address."PersonId")))
     JOIN "SEPTEM"."VW_REF_Localities" localities ON ((address."LocalitiesId" = localities."Id")));

CREATE VIEW "SEPTEM"."VW_CRM_ContractorContacts" AS
 SELECT contact."Id",
    contact."Contact",
    contact."ContactTypeId",
    contact."Description",
    contact."PersonId",
    contacttype."Name" AS "ContactType",
    person."BusinessId"
   FROM (("SEPTEM"."CRM_ContractorContacts" contact
     JOIN "SEPTEM"."CRM_PhysicalPerson" person ON ((person."Id" = contact."PersonId")))
     JOIN "SEPTEM"."REF_ContactTypes" contacttype ON ((contacttype."Id" = contact."ContactTypeId")));

CREATE VIEW "SEPTEM"."VW_CRM_PhysicalPerson" AS
 SELECT person."Id",
    person."IdentityDocNum",
    person."Name",
    person."Surname",
    person."Uid",
    person."Patronymic",
    person."Gender",
    person."BirthPlaceId",
    person."BirthDate",
    person."ExperienceMonths",
    person."ExperienceDays",
    person."ExperienceYears",
    person."SocialCard",
    person."MartialStatusId",
    person."ContractorId",
    person."RegisterAddress",
    person."CurrentAddress",
    person."EducationLevelId",
    person."BirthPlaceAddress",
    person."SerialNumber",
    person."BusinessId",
    (((((person."Name")::text || ' '::text) || (person."Surname")::text) || ' '::text) || (person."Patronymic")::text) AS "FullName",
    edu."Name" AS "EducationLevel",
    martial."Name" AS "MartialStatus",
    localitie."FullName" AS "BirthPlace",
    person."Phone",
    person."WorkPlace",
    person."AccountNumber",
    person."IdCardEndDate",
    person."BranchCode",
    person."SubCode",
    person."IsForeign"
   FROM ((("SEPTEM"."CRM_PhysicalPerson" person
     LEFT JOIN "SEPTEM"."REF_EducationLevel" edu ON ((edu."Id" = person."EducationLevelId")))
     LEFT JOIN "SEPTEM"."REF_MartialStatus" martial ON ((martial."Id" = person."MartialStatusId")))
     LEFT JOIN "SEPTEM"."VW_REF_Localities" localitie ON ((localitie."Id" = person."BirthPlaceId")));

CREATE VIEW "SEPTEM"."VW_CRM_PhysicalPersonDocs" AS
 SELECT docs."Id",
    docs."Name",
    docs."Serial",
    docs."Number",
    docs."DocumentTypeId",
    docs."IssuedOrganizationId",
    docs."StartDate",
    docs."EndDate",
    docs."Description",
    docs."PersonId",
    person."BusinessId",
    doctype."Name" AS "DocumentType",
    org."Name" AS "IssuedOrganization",
    ((COALESCE(docs."Serial", ''::character varying))::text || (COALESCE(docs."Number", ''::character varying))::text) AS "IdentityNumber"
   FROM ((("SEPTEM"."CRM_PhysicalPersonDocs" docs
     JOIN "SEPTEM"."CRM_PhysicalPerson" person ON ((person."Id" = docs."PersonId")))
     JOIN "SEPTEM"."REF_DocumentType" doctype ON ((doctype."Id" = docs."DocumentTypeId")))
     LEFT JOIN "SEPTEM"."Ref_IssuedOrganization" org ON ((org."Id" = docs."IssuedOrganizationId")));

CREATE VIEW "SEPTEM"."VW_CRM_PhysicalPersonCitizenship" AS
 SELECT citizen."Id",
    citizen."CountryId",
    citizen."PhysicalPersonDocId",
    citizen."Description",
    citizen."PersonId",
    person."BusinessId",
    docs."IdentityNumber",
    country."Name" AS "CountryName"
   FROM ((("SEPTEM"."CRM_PhysicalPersonCitizenship" citizen
     JOIN "SEPTEM"."CRM_PhysicalPerson" person ON ((person."Id" = citizen."PersonId")))
     JOIN "SEPTEM"."REF_Country" country ON ((country."Id" = citizen."CountryId")))
     LEFT JOIN "SEPTEM"."VW_CRM_PhysicalPersonDocs" docs ON ((docs."Id" = citizen."PhysicalPersonDocId")));

CREATE VIEW "SEPTEM"."VW_CRM_PhysicalPersonEducation" AS
 SELECT education."Id",
    education."EducationInstituteId",
    education."PhysicalPersonDocId",
    education."EducationLevelId",
    education."SpecialitieId",
    education."StartDate",
    education."EndDate",
    education."Description",
    education."PersonId",
    person."BusinessId",
    institute."Name" AS "EducationInstitute",
    docs."IdentityNumber",
    spec."Name" AS "Specialitie",
    edulevel."Name" AS "EducationLevel"
   FROM ((((("SEPTEM"."CRM_PhysicalPersonEducation" education
     JOIN "SEPTEM"."CRM_PhysicalPerson" person ON ((person."Id" = education."PersonId")))
     LEFT JOIN "SEPTEM"."VW_CRM_PhysicalPersonDocs" docs ON ((docs."Id" = education."PhysicalPersonDocId")))
     JOIN "SEPTEM"."REF_EducationInstitutes" institute ON ((institute."Id" = education."EducationInstituteId")))
     JOIN "SEPTEM"."REF_EducationLevel" edulevel ON ((edulevel."Id" = education."EducationLevelId")))
     JOIN "SEPTEM"."REF_Specialities" spec ON ((spec."Id" = education."SpecialitieId")));

CREATE VIEW "SEPTEM"."VW_CRM_PhysicalPersonLanguage" AS
 SELECT languages."Id",
    languages."LanguageId",
    languages."ListeningLevelId",
    languages."SpeakingLevelId",
    languages."Description",
    languages."PersonId",
    person."BusinessId",
    lang."Name" AS "LanguageName",
    listeninglevel."Name" AS "ListeningLevelName",
    speakinglevel."Name" AS "SpeakingLevelName"
   FROM (((("SEPTEM"."CRM_PhysicalPersonLanguage" languages
     JOIN "SEPTEM"."CRM_PhysicalPerson" person ON ((person."Id" = languages."PersonId")))
     JOIN "SEPTEM"."Ref_Languages" lang ON ((lang."Id" = languages."LanguageId")))
     JOIN "SEPTEM"."REF_KnowledgeLevels" speakinglevel ON ((speakinglevel."Id" = languages."SpeakingLevelId")))
     JOIN "SEPTEM"."REF_KnowledgeLevels" listeninglevel ON ((listeninglevel."Id" = languages."ListeningLevelId")));

CREATE VIEW "SEPTEM"."VW_CRM_PhysicalPersonMilitary" AS
 SELECT military."Id",
    military."MilitaryStatusId",
    military."IssuedOrganizationId",
    military."StartDate",
    military."EndDate",
    military."Description",
    military."PersonId",
    person."BusinessId",
    org."Name" AS "IssuedOrganization",
    miltary."Name" AS "MilitaryStatus"
   FROM ((("SEPTEM"."CRM_PhysicalPersonMilitary" military
     JOIN "SEPTEM"."CRM_PhysicalPerson" person ON ((person."Id" = military."PersonId")))
     LEFT JOIN "SEPTEM"."REF_MilitaryStatus" miltary ON ((miltary."Id" = military."MilitaryStatusId")))
     LEFT JOIN "SEPTEM"."Ref_IssuedOrganization" org ON ((org."Id" = military."IssuedOrganizationId")));

CREATE VIEW "SEPTEM"."VW_CRM_PhysicalPersonParticipations" AS
 SELECT pp."Id",
    pp."ParliamentId",
    pp."MunicipalityId",
    pp."PhysicalPersonId",
    pp."Note",
    pp."StartDate",
    pp."EndDate",
    p."Name" AS "ParliamentName",
    m."Name" AS "MunicipalityName"
   FROM (("SEPTEM"."CRM_PhysicalPersonParticipations" pp
     LEFT JOIN "SEPTEM"."REF_Parliaments" p ON ((pp."ParliamentId" = p."Id")))
     LEFT JOIN "SEPTEM"."REF_Municipality" m ON ((pp."MunicipalityId" = m."Id")));

CREATE VIEW "SEPTEM"."VW_CRM_PhysicalPersonPrivileges" AS
 SELECT privilege."Id",
    privilege."PrivilegeId",
    privilege."PhysicalPersonDocId",
    privilege."StartDate",
    privilege."EndDate",
    privilege."Description",
    privilege."PersonId",
    person."BusinessId",
    docs."IdentityNumber",
    priv."Name" AS "PrivilegeName",
    priv."IsTestPeriod",
    priv."IsNotWorkNight",
    priv."IsNotWorkOvertime",
    priv."IsNotWorkHour36",
    priv."IsNotBusinesssTrip",
    priv."Priority",
    priv."Amount"
   FROM ((("SEPTEM"."CRM_PhysicalPersonPrivileges" privilege
     JOIN "SEPTEM"."CRM_PhysicalPerson" person ON ((person."Id" = privilege."PersonId")))
     LEFT JOIN "SEPTEM"."VW_CRM_PhysicalPersonDocs" docs ON ((docs."Id" = privilege."PhysicalPersonDocId")))
     JOIN "SEPTEM"."REF_Privileges" priv ON ((priv."Id" = privilege."PrivilegeId")));

CREATE VIEW "SEPTEM"."VW_CRM_PhysicalPersonReference" AS
 SELECT pr."Id",
    pr."PersonId",
    pr."ReferencePersonId",
    pp."FullName",
    pr."Note"
   FROM ("SEPTEM"."CRM_PhysicalPersonReferences" pr
     JOIN "SEPTEM"."VW_CRM_PhysicalPerson" pp ON ((pp."Id" = pr."ReferencePersonId")));

CREATE VIEW "SEPTEM"."VW_CRM_PhysicalPersonRelatives" AS
 SELECT relatives."Id",
    relatives."RelationshipTypeId",
    relatives."Description",
    relatives."PersonId",
    relatives."RelatedPersonId",
    person."BusinessId",
    relationtype."Name" AS "RelationshipType",
    (((((personrelated."Surname")::text || ' '::text) || (personrelated."Name")::text) || ' '::text) || (personrelated."Patronymic")::text) AS "RelatedPerson",
    personrelated."BirthDate"
   FROM ((("SEPTEM"."CRM_PhysicalPersonRelatives" relatives
     JOIN "SEPTEM"."CRM_PhysicalPerson" person ON ((person."Id" = relatives."PersonId")))
     JOIN "SEPTEM"."CRM_PhysicalPerson" personrelated ON ((personrelated."Id" = relatives."RelatedPersonId")))
     JOIN "SEPTEM"."REF_RelationshipTypes" relationtype ON ((relationtype."Id" = relatives."RelationshipTypeId")));

CREATE VIEW "SEPTEM"."VW_CRM_PhysicalPersonSkills" AS
 SELECT skill."Id",
    skill."SkillId",
    skill."KnowledgeLevelId",
    skill."Description",
    skill."PersonId",
    person."BusinessId",
    refskill."Name" AS "SkillName",
    levels."Name" AS "KnowledgeLevel"
   FROM ((("SEPTEM"."CRM_PhysicalPersonSkills" skill
     JOIN "SEPTEM"."CRM_PhysicalPerson" person ON ((person."Id" = skill."PersonId")))
     JOIN "SEPTEM"."REF_Skills" refskill ON ((refskill."Id" = skill."SkillId")))
     JOIN "SEPTEM"."REF_KnowledgeLevels" levels ON ((levels."Id" = skill."KnowledgeLevelId")));

CREATE VIEW "SEPTEM"."VW_CRM_PhysicalPersonWorkBooks" AS
 SELECT workbook."Id",
    workbook."CompanyId",
    workbook."PositionId",
    workbook."WorkTypeId",
    workbook."StartDate",
    workbook."EndDate",
    workbook."Description",
    workbook."PersonId",
    person."BusinessId",
    company."Name" AS "Company",
    workbook."PositionName" AS "Position",
    worktype."Name" AS "WorkType",
    workbook."Structure",
    workbook."Departament",
    workbook."Division",
    workbook."Group",
    workbook."Year",
    workbook."Month",
    workbook."Day"
   FROM (((("SEPTEM"."CRM_PhysicalPersonWorkBooks" workbook
     JOIN "SEPTEM"."CRM_PhysicalPerson" person ON ((person."Id" = workbook."PersonId")))
     JOIN "SEPTEM"."REF_Company" company ON ((company."Id" = workbook."CompanyId")))
     LEFT JOIN "SEPTEM"."REF_Positions" positions ON ((positions."Id" = workbook."PositionId")))
     LEFT JOIN "SEPTEM"."REF_WorkTypes" worktype ON ((worktype."Id" = workbook."WorkTypeId")));

CREATE VIEW "SEPTEM"."VW_EmployeesSimple" AS
 SELECT emp."Id",
    concat(person."Surname", ' ', person."Name", ' ', person."Patronymic") AS "FullName",
    person."Name",
    person."Surname",
    person."Patronymic",
    emp."BusinessId"
   FROM ("SEPTEM"."HR_Employees" emp
     JOIN "SEPTEM"."CRM_PhysicalPerson" person ON ((person."Id" = emp."PersonId")))
  ORDER BY emp."OrderNum";

CREATE VIEW "SEPTEM"."VW_WF_AssignedWorkAllActive" AS
 SELECT assigns."WorkId",
    assigns."FlowId",
    assigns."ProductId",
    assigns."UserId",
    assigns."Operation",
    producttypes."Id" AS "ProductTypeId",
    producttypes."Name" AS "ProductTypeName",
    statuses."Id" AS "WorkCurrentStatusId",
    statuses."Name" AS "WorkCurrentStatusName",
    statuses."Code" AS "WorkCurrentStatusCode",
    statuses."CanEdit" AS "StatusCanEdit",
    statuses."CanDelete" AS "StatusCanDelete",
    statuses."CanPrint" AS "StatusCanPrint"
   FROM ((( SELECT work."Id" AS "WorkId",
            work."FlowId",
            work."ProductId",
            work."CurrentStatusId" AS "WorkCurrentStatusId",
            work."ProductTypeId",
            assigned."OperationType" AS "Operation",
            assigned."AssignedUserId" AS "UserId"
           FROM ("SEPTEM"."WF_AssignedWork" assigned
             JOIN "SEPTEM"."WF_Work" work ON ((assigned."WorkId" = work."Id")))
        UNION
         SELECT work."Id" AS "WorkId",
            work."FlowId",
            work."ProductId",
            work."CurrentStatusId" AS "WorkCurrentStatusId",
            work."ProductTypeId",
            assigned."OperationType" AS "Operation",
            assignedemployeeuser."Id" AS "UserId"
           FROM (((("SEPTEM"."WF_AssignedWork" assigned
             JOIN "SEPTEM"."WF_Work" work ON ((assigned."WorkId" = work."Id")))
             LEFT JOIN "SEPTEM"."WF_EmployeeRole" assignedemployeeroles ON ((assigned."AssignedRoleId" = assignedemployeeroles."RoleId")))
             LEFT JOIN "SEPTEM"."WF_Employee" assignedemployee ON ((assignedemployeeroles."CollectionId" = assignedemployee."RolesCollectionId")))
             LEFT JOIN "SEPTEM"."User" assignedemployeeuser ON ((assignedemployee."Id" = assignedemployeeuser."EmployeeId")))
        UNION
         SELECT work."Id" AS "WorkId",
            work."FlowId",
            work."ProductId",
            work."CurrentStatusId" AS "WorkCurrentStatusId",
            work."ProductTypeId",
            assigned."OperationType" AS "Operation",
            assignedpermissionuser."Id" AS "UserId"
           FROM ((("SEPTEM"."WF_AssignedWork" assigned
             JOIN "SEPTEM"."WF_Work" work ON ((assigned."WorkId" = work."Id")))
             LEFT JOIN "SEPTEM"."UserRole" assignedpermission ON ((assigned."AssignedUserRoleId" = assignedpermission."RoleId")))
             LEFT JOIN "SEPTEM"."User" assignedpermissionuser ON ((assignedpermission."CollectionId" = assignedpermissionuser."RolesCollectionId")))) assigns
     JOIN "SEPTEM"."WF_ProductType" producttypes ON ((assigns."ProductTypeId" = producttypes."Id")))
     JOIN "SEPTEM"."WF_FlowStatus" statuses ON ((assigns."WorkCurrentStatusId" = statuses."Id")));

CREATE VIEW "SEPTEM"."VW_CT_RequirementRepoFlow" AS
 SELECT "Assignes"."UserId",
    "Assignes"."WorkId",
    "Assignes"."Operation",
    "Assignes"."ProductTypeName" AS "ProductType",
    "Assignes"."WorkCurrentStatusId",
    "Assignes"."WorkCurrentStatusName",
    "Assignes"."WorkCurrentStatusCode",
    "Assignes"."StatusCanEdit",
    "Assignes"."StatusCanDelete",
    "Assignes"."StatusCanPrint",
    rar."Id",
    rar."CreatedDate",
    rar."Description",
    rar."DocType",
    emp."BusinessId",
    rar."EmployeeId",
    emp."FullName",
    empcu."FullName" AS "ConfirmedFullName",
    rar."CreatedUserId",
    rtype."Name" AS "DocTypeName",
    rar."DocsRepoId"
   FROM (((((("SEPTEM"."CT_RequirementRepo" rar
     LEFT JOIN "SEPTEM"."User" u ON ((u."Id" = rar."CreatedUserId")))
     JOIN "SEPTEM"."VW_WF_AssignedWorkAllActive" "Assignes" ON ((rar."Id" = "Assignes"."ProductId")))
     JOIN "SEPTEM"."VW_EmployeesSimple" emp ON ((emp."Id" = rar."EmployeeId")))
     LEFT JOIN "SEPTEM"."CT_RequirementRepoTypes" rtype ON (((rtype."Code")::text = (rar."DocType")::text)))
     LEFT JOIN "SEPTEM"."User" cu ON ((cu."Id" = rar."ConfirmUserId")))
     LEFT JOIN "SEPTEM"."VW_EmployeesSimple" empcu ON ((empcu."Id" = cu."EmployeeId")));

CREATE VIEW "SEPTEM"."VW_CalculatedSalary" AS
 SELECT pcs."Id",
    pcs."CollectionId",
    pcs."Version",
    pcs."DocumentSalaryId",
    pcs."BusinessId",
    pcs."EmployeeId",
    pcs."SocialStatus",
    pcs."MonthNumber",
    pcs."Month",
    pcs."Year",
    pcs."OperationDate",
    pcs."WorkDaysMonth",
    pcs."WorkedDay",
    pcs."SalaryMonthly",
    pcs."PositionSalary",
    pcs."SickDay",
    pcs."SickPayment",
    pcs."VacationDay",
    pcs."VacationPayment",
    pcs."TotalVacation",
    pcs."DismissalPayment",
    pcs."BonusPayment",
    pcs."OverTimePayment",
    pcs."ReplacementPayment",
    pcs."RemainingPayment",
    pcs."GeneralSalary",
    pcs."IncomeTax",
    pcs."DsmfEmployee",
    pcs."DsmfCompany",
    pcs."PayedAdvance",
    pcs."Penalty",
    pcs."LifeInsurance",
    pcs."PayedBonus",
    pcs."PayedSick",
    pcs."PayedVacation",
    pcs."PayedSubsidy",
    pcs."PayedDismissal",
    pcs."TotalCharge",
    pcs."SalaryPayable",
    pcs."EmployeeInsurance",
    pcs."CompanyInsurance",
    pcs."CompanyMedicalInsurance",
    pcs."EmpoyeeMedicalInsurance",
    pcs."SubsidyPayment",
    pcs."OneTimeBonusPayment",
    pcs."AdditionalCostPayment",
    pcs."PayedAliment",
    pcs."PayedCredit",
    pcs."BusinessTripDay",
    pcs."BusinessTripPayment",
    pcs."AdditionalAmount",
    pcs."ConpensationAmount",
    pcs."SocialVacationAmount",
    pcs."DismissalDay",
    peon."OrderNum",
    pcs."AddSalaryPayment",
    pcs."AwardPayment",
    ve."FullName",
    ve."AccountNumber",
    ve."StaffUnitName" AS "Position",
    pcs."BenefitPayment",
    pcs."CommonSalary",
    pcs."NextMonthPayedSalary",
    pcs."NextMonthVacPayment",
    ve."BranchCode",
    ve."BranchName",
    ve."BranchId",
    pcs."HourlySalary",
    pcs."TotalHourlyAmount",
    ve."WorkPlaceCode",
    ve."Uid",
    ve."Gender",
    pcs."SalaryDsmfEmployee",
    pcs."BonusDsmfEmployee",
    pcs."RewardDsmfEmployee",
    pcs."SalaryEmpoyeeMedicalInsurance",
    pcs."BonusEmpoyeeMedicalInsurance",
    pcs."RewardEmpoyeeMedicalInsurance",
    pcs."SalaryEmployeeInsurance",
    pcs."BonusEmployeeInsurance",
    pcs."RewardEmployeeInsurance",
    pcs."SalaryIncomeTax",
    pcs."BonusIncomeTax",
    pcs."RewardIncomeTax",
    pcs."SalaryDsmfCompany",
    pcs."BonusDsmfCompany",
    pcs."RewardDsmfCompany",
    pcs."SalaryCompanyInsurance",
    pcs."BonusCompanyInsurance",
    pcs."RewardCompanyInsurance",
    pcs."SalaryCompanyMedicalInsurance",
    pcs."BonusCompanyMedicalInsurance",
    pcs."RewardCompanyMedicalInsurance",
    pcs."SalaryPLFAmount",
    pcs."BonusPLFAmount",
    pcs."RewardPLFAmount",
    pcs."SalaryATLAmount",
    pcs."BonusATLAmount",
    pcs."RewardATLAmount",
    pcs."CompanyPlf15",
    pcs."CompanyAtl15",
    pcs."BonusPayable",
    pcs."MainSalaryPayable",
    pcs."RewardPayable",
    pcs."MobilizationAmount",
    pcs."DiscountAmount"
   FROM (("SEPTEM"."PR_CalculatedSalary" pcs
     JOIN "SEPTEM"."VW_Employees" ve ON ((ve."Id" = pcs."EmployeeId")))
     LEFT JOIN "SEPTEM"."PR_EmployeeOrderNum" peon ON ((pcs."EmployeeId" = peon."EmployeeId")));

CREATE VIEW "SEPTEM"."VW_EmployeeAbsentWork" AS
 SELECT hebt."Id",
    hdr."DocNumber",
    emp."BusinessId",
    hdr."DocDate",
    emp."BranchName",
    emp."StructureName",
    emp."StaffUnitName",
    emp."Id" AS "EmployeeId",
    emp."FullName",
    hebt."StartDate",
    rdp."PointName" AS "DestinationPoint",
    hebt."Days",
    hebt."FirstWorkDate",
    hebt."Basis",
    hebt."EndDate",
    hdr."DocTypes",
    emp."AccountNumber",
    hebt."Basis" AS "Cause"
   FROM ((("SEPTEM"."VW_Employees" emp
     JOIN "SEPTEM"."HR_EmployeeBusinessTrip" hebt ON ((emp."Id" = hebt."EmployeeId")))
     JOIN "SEPTEM"."REF_DestinationPoints" rdp ON ((hebt."BusinessTripDestinationCollectionId" = rdp."Id")))
     JOIN "SEPTEM"."HR_DocsRepo" hdr ON ((hdr."Id" = hebt."DocsRepoId")))
UNION ALL
 SELECT emprd."Id",
    hdr."DocNumber",
    emp."BusinessId",
    hdr."DocDate",
    emp."BranchName",
    emp."StructureName",
    emp."StaffUnitName",
    emp."Id" AS "EmployeeId",
    emp."FullName",
    emprd."StartDate",
    NULL::character varying AS "DestinationPoint",
    NULL::smallint AS "Days",
    NULL::timestamp without time zone AS "FirstWorkDate",
    emprd."Basis",
    emprd."EndDate",
    hdr."DocTypes",
    emp."AccountNumber",
    emprd."Basis" AS "Cause"
   FROM (("SEPTEM"."VW_Employees" emp
     JOIN "SEPTEM"."HR_EmployeeReplaceDay" emprd ON ((emp."Id" = emprd."EmployeeId")))
     JOIN "SEPTEM"."HR_DocsRepo" hdr ON ((hdr."Id" = emprd."DocsRepoId")))
UNION ALL
 SELECT empsl."Id",
    hdr."DocNumber",
    emp."BusinessId",
    hdr."DocDate",
    emp."BranchName",
    emp."StructureName",
    emp."StaffUnitName",
    emp."Id" AS "EmployeeId",
    emp."FullName",
    empsl."StartDate",
    NULL::character varying AS "DestinationPoint",
    empsl."Days",
    empsl."FirstWorkDate",
    NULL::character varying AS "Basis",
    empsl."EndDate",
    hdr."DocTypes",
    emp."AccountNumber",
    NULL::character varying AS "Cause"
   FROM (("SEPTEM"."VW_Employees" emp
     JOIN "SEPTEM"."HR_EmployeeSickList" empsl ON ((emp."Id" = empsl."EmployeeId")))
     JOIN "SEPTEM"."HR_DocsRepo" hdr ON ((hdr."Id" = empsl."DocsRepoId")))
UNION ALL
 SELECT wow."Id",
    hdr."DocNumber",
    emp."BusinessId",
    hdr."DocDate",
    emp."BranchName",
    emp."StructureName",
    emp."StaffUnitName",
    emp."Id" AS "EmployeeId",
    emp."FullName",
    wow."StartDate",
    NULL::character varying AS "DestinationPoint",
    NULL::integer AS "Days",
    wow."FirstWorkDate",
    NULL::character varying AS "Basis",
    wow."EndDate",
    hdr."DocTypes",
    emp."AccountNumber",
    NULL::character varying AS "Cause"
   FROM (("SEPTEM"."VW_Employees" emp
     JOIN "SEPTEM"."HR_WorkOrWeekends" wow ON ((emp."Id" = wow."EmployeeId")))
     JOIN "SEPTEM"."HR_DocsRepo" hdr ON ((hdr."Id" = wow."DocsRepoId")))
UNION ALL
 SELECT empr."Id",
    hdr."DocNumber",
    emp."BusinessId",
    hdr."DocDate",
    emp."BranchName",
    emp."StructureName",
    emp."StaffUnitName",
    emp."Id" AS "EmployeeId",
    emp."FullName",
    empr."StartDate",
    NULL::character varying AS "DestinationPoint",
    empr."Days",
    empr."FirstWorkDate",
    empr."Basis",
    empr."EndDate",
    hdr."DocTypes",
    emp."AccountNumber",
    empr."Basis" AS "Cause"
   FROM (("SEPTEM"."VW_Employees" emp
     JOIN "SEPTEM"."HR_EmployeePermission" empr ON ((emp."Id" = empr."EmployeeId")))
     JOIN "SEPTEM"."HR_DocsRepo" hdr ON ((hdr."Id" = empr."DocsRepoId")))
UNION ALL
 SELECT elv."Id",
    hdr."DocNumber",
    emp."BusinessId",
    hdr."DocDate",
    emp."BranchName",
    emp."StructureName",
    emp."StaffUnitName",
    emp."Id" AS "EmployeeId",
    emp."FullName",
    elv."StartDate",
    NULL::character varying AS "DestinationPoint",
    elv."Days",
    NULL::timestamp without time zone AS "FirstWorkDate",
    elv."Basis",
    elv."EndDate",
    hdr."DocTypes",
    emp."AccountNumber",
    elv."Basis" AS "Cause"
   FROM (("SEPTEM"."VW_Employees" emp
     JOIN "SEPTEM"."HR_EmployeeLaborVacations" elv ON ((emp."Id" = elv."EmployeeId")))
     JOIN "SEPTEM"."HR_DocsRepo" hdr ON ((hdr."Id" = elv."DocsRepoId")))
UNION ALL
 SELECT emev."Id",
    hdr."DocNumber",
    emp."BusinessId",
    hdr."DocDate",
    emp."BranchName",
    emp."StructureName",
    emp."StaffUnitName",
    emp."Id" AS "EmployeeId",
    emp."FullName",
    emev."StartDate",
    NULL::character varying AS "DestinationPoint",
    emev."Days",
    emev."FirstWorkDate",
    emev."Basis",
    emev."EndDate",
    hdr."DocTypes",
    emp."AccountNumber",
    emev."Basis" AS "Cause"
   FROM (("SEPTEM"."VW_Employees" emp
     JOIN "SEPTEM"."HR_EmployeeEducationVacations" emev ON ((emp."Id" = emev."EmployeeId")))
     JOIN "SEPTEM"."HR_DocsRepo" hdr ON ((hdr."Id" = emev."DocsRepoId")))
UNION ALL
 SELECT eps."Id",
    hdr."DocNumber",
    emp."BusinessId",
    hdr."DocDate",
    emp."BranchName",
    emp."StructureName",
    emp."StaffUnitName",
    emp."Id" AS "EmployeeId",
    emp."FullName",
    eps."StartDate",
    NULL::character varying AS "DestinationPoint",
    eps."Days",
    eps."FirstWorkDate",
    eps."Basis",
    eps."EndDate",
    hdr."DocTypes",
    emp."AccountNumber",
    eps."Basis" AS "Cause"
   FROM (("SEPTEM"."VW_Employees" emp
     JOIN "SEPTEM"."HR_EmployeePaidSocialVacation" eps ON ((emp."Id" = eps."EmployeeId")))
     JOIN "SEPTEM"."HR_DocsRepo" hdr ON ((hdr."Id" = eps."DocsRepoId")))
UNION ALL
 SELECT esv."Id",
    hdr."DocNumber",
    emp."BusinessId",
    hdr."DocDate",
    emp."BranchName",
    emp."StructureName",
    emp."StaffUnitName",
    emp."Id" AS "EmployeeId",
    emp."FullName",
    esv."StartDate",
    NULL::character varying AS "DestinationPoint",
    esv."Days",
    esv."FirstWorkDate",
    esv."Basis",
    esv."EndDate",
    hdr."DocTypes",
    emp."AccountNumber",
    esv."Basis" AS "Cause"
   FROM (("SEPTEM"."VW_Employees" emp
     JOIN "SEPTEM"."HR_EmployeeSocialVacations" esv ON ((emp."Id" = esv."EmployeeId")))
     JOIN "SEPTEM"."HR_DocsRepo" hdr ON ((hdr."Id" = esv."DocsRepoId")))
UNION ALL
 SELECT upv."Id",
    hdr."DocNumber",
    emp."BusinessId",
    hdr."DocDate",
    emp."BranchName",
    emp."StructureName",
    emp."StaffUnitName",
    emp."Id" AS "EmployeeId",
    emp."FullName",
    upv."StartDate",
    NULL::character varying AS "DestinationPoint",
    upv."Days",
    NULL::timestamp without time zone AS "FirstWorkDate",
    upv."Basis",
    upv."EndDate",
    hdr."DocTypes",
    emp."AccountNumber",
    upv."Basis" AS "Cause"
   FROM (("SEPTEM"."VW_Employees" emp
     JOIN "SEPTEM"."HR_EmployeeUnPaidVacations" upv ON ((emp."Id" = upv."EmployeeId")))
     JOIN "SEPTEM"."HR_DocsRepo" hdr ON ((hdr."Id" = upv."DocsRepoId")));

CREATE VIEW "SEPTEM"."VW_EmployeeAccounting" AS
 SELECT pea."Id",
    pea."EmployeeId",
    ve."FullName",
    ve."AccountNumber",
    ve."EmployeeStatuses"
   FROM ("SEPTEM"."PR_EmployeeAccounting" pea
     JOIN "SEPTEM"."VW_Employees" ve ON ((pea."EmployeeId" = ve."Id")));

CREATE VIEW "SEPTEM"."VW_EmployeeBirthDateReport" AS
 SELECT "Id",
    "FullName",
    "BirthDate",
    "BranchName" AS "Branch",
    "StaffUnitName",
    "StructureName",
    "BusinessId",
    "AccountNumber"
   FROM "SEPTEM"."VW_Employees" emp
  WHERE (("EmployeeStatuses")::text <> 'Dismissal'::text);

CREATE VIEW "SEPTEM"."VW_EmployeeConfirmedUsers" AS
 SELECT u."Id",
    ve."FullName" AS "EmployeeFullName",
    ve2."FullName",
    recu."EmployeeId",
    recu."ConfirmedUserId",
    recu."ManuallyCreated",
    recu."Id" AS "UniqueId"
   FROM ((("SEPTEM"."REF_EmployeeConfirmedUsers" recu
     JOIN "SEPTEM"."VW_Employees" ve ON ((ve."Id" = recu."EmployeeId")))
     JOIN "SEPTEM"."User" u ON ((u."Id" = recu."ConfirmedUserId")))
     LEFT JOIN "SEPTEM"."VW_Employees" ve2 ON ((ve2."Id" = u."EmployeeId")));

CREATE VIEW "SEPTEM"."VW_EmployeeContractChange" AS
 SELECT hecc."Id",
    hdr."DocNumber",
    hdr."DocDate",
    hecc."WithPositionChange",
    emp."BranchName",
    emp."StructureName",
    emp."StaffUnitName",
    emp."IsStaff",
    emp."IsStaffType",
    hecc."WithDocDateChange",
    hecc."ContractType",
    hecc."StartDate",
    hecc."EndDate",
    hecc."EntryDate",
    hecc."DurationYear" AS "ContractDuration",
    hecc."WithSalaryChange",
    hecc."SalaryChangeDate",
    hecc."Salary",
    hecc."Basis",
    hecc."EmployeeId",
    hecc."IsRelatedPerson",
    hecc."PositionChangeDate",
    hecc."WithStaffChange"
   FROM (("SEPTEM"."HR_EmployeeContractChange" hecc
     JOIN "SEPTEM"."HR_DocsRepo" hdr ON ((hecc."DocsRepoId" = hdr."Id")))
     JOIN "SEPTEM"."VW_Employees" emp ON ((emp."Id" = hecc."EmployeeId")));

CREATE VIEW "SEPTEM"."VW_EmployeeCredentialDelegations" AS
 SELECT hecd."Id",
    hecd."EmployeeFromId",
    hecd."EmployeeToId",
    ve."StructureName",
    ve."FullName",
    hecd."StartDate",
    hecd."EndDate",
    hecd."IsSalaryDiff",
    abs((ve."Salary" - ve2."Salary")) AS "DiffSalary",
    hecd."CollectionId",
    ve."StaffUnitName"
   FROM (("SEPTEM"."HR_EmployeeCredentialDelegations" hecd
     JOIN "SEPTEM"."VW_Employees" ve ON ((hecd."EmployeeFromId" = ve."Id")))
     JOIN "SEPTEM"."VW_Employees" ve2 ON ((hecd."EmployeeToId" = ve2."Id")));

CREATE VIEW "SEPTEM"."VW_EmployeeEndContract" AS
 SELECT hec."Id",
    he."BusinessId",
    hec."Description",
    hec."Salary",
    hecl."StartDate",
    hecl."EndDate",
    repo."DocNumber",
    repo."DocDate",
    hsu."Name" AS "StaffUnitName",
    struc."StructureName",
    hb."Name" AS "BranchName",
    he."FullName",
    he."Id" AS "EmployeeId",
    he."AccountNumber",
    repo."DocTypes",
    hec."DurationYear",
    hec."DurationMonth",
    hec."DurationDay",
    concat(date_part('year'::text, age(COALESCE((he."EndDate")::timestamp with time zone, now()), (he."StartDate")::timestamp with time zone)), ' il, ', date_part('month'::text, age(COALESCE((he."EndDate")::timestamp with time zone, now()), (he."StartDate")::timestamp with time zone)), ' ay, ', date_part('day'::text, age(COALESCE((he."EndDate")::timestamp with time zone, now()), (he."StartDate")::timestamp with time zone)), ' gün') AS "CurrentExperience",
    hec."ContractType",
    he."EmployeeStatuses"
   FROM ((((((("SEPTEM"."HR_EmployeeContracts" hec
     JOIN "SEPTEM"."VW_Employees" he ON ((hec."EmployeeId" = he."Id")))
     JOIN "SEPTEM"."HR_DocsRepo" repo ON ((repo."Id" = hec."DocsRepoId")))
     JOIN "SEPTEM"."HR_StaffUnits" hsu ON ((hsu."Id" = hec."StaffUnitId")))
     JOIN ( SELECT DISTINCT ON ("HR_EmployeeContractLog"."EmployeeId") "HR_EmployeeContractLog"."Id",
            "HR_EmployeeContractLog"."CollectionId",
            "HR_EmployeeContractLog"."Version",
            "HR_EmployeeContractLog"."CreatedUserId",
            "HR_EmployeeContractLog"."CreatedDate",
            "HR_EmployeeContractLog"."ModifiedUserId",
            "HR_EmployeeContractLog"."ModifiedDate",
            "HR_EmployeeContractLog"."EmployeeId",
            "HR_EmployeeContractLog"."DocsRepoId",
            "HR_EmployeeContractLog"."StartDate",
            "HR_EmployeeContractLog"."EndDate",
            "HR_EmployeeContractLog"."ContractDuration",
            "HR_EmployeeContractLog"."EntryDate",
            "HR_EmployeeContractLog"."ContractTypeOld",
            "HR_EmployeeContractLog"."ContractType",
            "HR_EmployeeContractLog"."DurationDay",
            "HR_EmployeeContractLog"."DurationMonth",
            "HR_EmployeeContractLog"."DurationYear"
           FROM "SEPTEM"."HR_EmployeeContractLog"
          ORDER BY "HR_EmployeeContractLog"."EmployeeId", "HR_EmployeeContractLog"."EndDate" DESC NULLS LAST) hecl ON ((hecl."EmployeeId" = he."Id")))
     JOIN "SEPTEM"."HR_Branches" hb ON ((hsu."BranchId" = hb."Id")))
     JOIN "SEPTEM"."HR_StaffUnits" staffunit ON ((staffunit."Id" = he."StaffUnitId")))
     JOIN "SEPTEM"."VW_HR_OrganizationStructure" struc ON ((struc."Id" = staffunit."OrganizationStructureId")));

CREATE VIEW "SEPTEM"."VW_EmployeeEndTestPeriod" AS
 SELECT eh."Id",
    emp."BranchName" AS "Branch",
    emp."StructureName" AS "OrgName",
    emp."StaffUnitName" AS "StaffUnit",
    eh."StartDate",
    (eh."TestPeriod")::numeric(9,0) AS "TestPeriod",
    (eh."Salary")::numeric(9,0) AS "Salary",
    eh."Basis",
    dr."DocNumber",
    dr."DocDate",
    emp."FullName",
    emp."BusinessId"
   FROM ((("SEPTEM"."HR_EmployeeHire" eh
     JOIN "SEPTEM"."HR_DocsRepo" dr ON ((eh."DocsRepoId" = dr."Id")))
     JOIN "SEPTEM"."HR_DocEmployeeAssigments" asg ON ((asg."DocsRepoId" = dr."Id")))
     JOIN "SEPTEM"."VW_Employees" emp ON ((emp."Id" = asg."EmployeeId")));

CREATE VIEW "SEPTEM"."VW_EmployeeExpireDocs" AS
 SELECT DISTINCT doc."Id",
    emp."FullName",
    doc."Name",
    doc."Serial",
    doc."Number",
    doc."StartDate",
    doc."EndDate",
    doctype."Name" AS "DocumentTypeName",
    issue."Name" AS "IssuedOrganizationName",
    doc."Description",
    emp."BusinessId",
    doctype."Name" AS "DocType",
    emp."AccountNumber"
   FROM ((("SEPTEM"."CRM_PhysicalPersonDocs" doc
     JOIN "SEPTEM"."VW_Employees" emp ON ((doc."PersonId" = emp."PersonId")))
     JOIN "SEPTEM"."REF_DocumentType" doctype ON ((doctype."Id" = doc."DocumentTypeId")))
     JOIN "SEPTEM"."Ref_IssuedOrganization" issue ON ((issue."Id" = doc."IssuedOrganizationId")));

CREATE VIEW "SEPTEM"."VW_EmployeeNoWorkedDays" AS
 SELECT xx."Id",
    xx."DocsRepoId",
    xx."StartDate",
    xx."EndDate",
    xx."FirstWorkDate",
    xx."Days",
    hdr."DocNumber",
    hdr."DocDate",
    hdr."DocTypes",
    hdea."EmployeeId"
   FROM (((( SELECT vac."Id",
            vac."DocsRepoId",
            vac."StartDate",
            COALESCE((back."StartDate" - '1 day'::interval), vac."EndDate") AS "EndDate",
            COALESCE(back."StartDate", vac."FirstWworkDate") AS "FirstWorkDate",
            (vac."Days" - COALESCE((back."Days")::integer, 0)) AS "Days"
           FROM ("SEPTEM"."HR_EmployeeLaborVacations" vac
             LEFT JOIN "SEPTEM"."HR_EmployeeLaborVacationsBack" back ON ((back."EmployeeLaborVacationId" = vac."Id")))
        UNION
         SELECT back."Id",
            back."DocsRepoId",
            (back."EndDate" + '1 day'::interval) AS "StartDate",
            vac."EndDate",
            vac."FirstWworkDate" AS "FirstWorkDate",
            ((date_part('day'::text, (vac."EndDate" - back."EndDate")) + (1)::double precision))::integer AS "Days"
           FROM ("SEPTEM"."HR_EmployeeLaborVacationsBack" back
             JOIN "SEPTEM"."HR_EmployeeLaborVacations" vac ON ((back."EmployeeLaborVacationId" = vac."Id")))
        UNION
         SELECT vac."Id",
            vac."DocsRepoId",
            vac."StartDate",
            COALESCE((back."StartDate" - '1 day'::interval), vac."EndDate") AS "EndDate",
            COALESCE(back."StartDate", vac."FirstWorkDate") AS "FirstWorkDate",
            (vac."RealDays" - COALESCE(back."UsedRealDays", 0)) AS "Days"
           FROM ("SEPTEM"."HR_EmployeeEducationVacations" vac
             LEFT JOIN "SEPTEM"."HR_EmployeeEducationVacationBack" back ON ((back."EmployeeEducationVacationId" = vac."Id")))
        UNION
         SELECT back."Id",
            back."DocsRepoId",
            (back."EndDate" + '1 day'::interval) AS "StartDate",
            vac."EndDate",
            vac."FirstWorkDate",
            ((date_part('day'::text, (vac."EndDate" - back."EndDate")) + (1)::double precision))::integer AS "Days"
           FROM ("SEPTEM"."HR_EmployeeEducationVacations" vac
             JOIN "SEPTEM"."HR_EmployeeEducationVacationBack" back ON ((back."EmployeeEducationVacationId" = vac."Id")))
        UNION
         SELECT vac."Id",
            vac."DocsRepoId",
            vac."StartDate",
            COALESCE((back."StartDate" - '1 day'::interval), vac."EndDate") AS "EndDate",
            COALESCE(back."StartDate", vac."FirstWokDate") AS "FirstWorkDate",
            (vac."RealDays" - COALESCE(back."UsedRealDays", 0)) AS "Days"
           FROM ("SEPTEM"."HR_EmployeeUnPaidVacations" vac
             LEFT JOIN "SEPTEM"."HR_EmployeeUnPaidVacationBack" back ON ((back."EmployeeUnPaidVacationId" = vac."Id")))
        UNION
         SELECT back."Id",
            back."DocsRepoId",
            (back."EndDate" + '1 day'::interval) AS "StartDate",
            vac."EndDate",
            vac."FirstWokDate" AS "FirstWorkDate",
            (vac."RealDays" - COALESCE(back."UsedRealDays", 0)) AS "Days"
           FROM ("SEPTEM"."HR_EmployeeUnPaidVacations" vac
             JOIN "SEPTEM"."HR_EmployeeUnPaidVacationBack" back ON ((back."EmployeeUnPaidVacationId" = vac."Id")))
        UNION
         SELECT helv."Id",
            helv."DocsRepoId",
            helv."StartDate",
            helv."EndDate",
            helv."FirstWorkDate",
            ((date_part('day'::text, (helv."EndDate" - helv."StartDate")) + (1)::double precision))::integer AS "Days"
           FROM "SEPTEM"."HR_EmployeeBusinessTrip" helv
          WHERE (NOT (EXISTS ( SELECT 1
                   FROM "SEPTEM"."HR_EmployeeBusinessTrip" innerhelv
                  WHERE ((innerhelv."EmployeeBusinessTripId" IS NOT NULL) AND (innerhelv."EmployeeBusinessTripId" = helv."Id")))))
        UNION
         SELECT helv."Id",
            helv."DocsRepoId",
            helv."StartDate",
            helv."EndDate",
            (helv."EndDate" + '1 day'::interval) AS "FirstWorkDate",
            ((date_part('day'::text, (helv."EndDate" - helv."StartDate")) + (1)::double precision))::integer AS "Days"
           FROM "SEPTEM"."HR_EmployeeTraining" helv
        UNION
         SELECT helv."Id",
            helv."DocsRepoId",
            helv."PermissionDate" AS "StartDate",
            helv."PermissionDate" AS "EndDate",
            helv."PermissionDate" AS "FirstWorkDate",
            1 AS "Days"
           FROM "SEPTEM"."HR_EmployeePermission" helv
        UNION
         SELECT helv."Id",
            helv."DocsRepoId",
            helv."StartDate",
            helv."EndDate",
            helv."FirstWorkDate",
            ((date_part('day'::text, (helv."EndDate" - helv."StartDate")) + (1)::double precision))::integer AS "Days"
           FROM "SEPTEM"."HR_EmployeeSickList" helv
        UNION
         SELECT helv."Id",
            helv."DocsRepoId",
            helv."StartDate",
            COALESCE((back."StartDate" - '1 day'::interval), helv."EndDate") AS "EndDate",
            COALESCE(back."StartDate", helv."FirstWorkDate") AS "FirstWorkDate",
            ((date_part('day'::text, (COALESCE(back."StartDate", helv."EndDate") - helv."StartDate")) + (1)::double precision))::integer AS "Days"
           FROM ("SEPTEM"."HR_EmployeePaidSocialVacation" helv
             LEFT JOIN "SEPTEM"."HR_EmployeePaidSocialVacationBack" back ON ((back."EmployeePaidSocialVacationId" = helv."Id")))
        UNION
         SELECT back."Id",
            back."DocsRepoId",
            (back."EndDate" + '1 day'::interval) AS "StartDate",
            paid."EndDate",
            paid."FirstWorkDate",
            ((date_part('day'::text, (paid."EndDate" - back."EndDate")) + (1)::double precision))::integer AS "Days"
           FROM ("SEPTEM"."HR_EmployeePaidSocialVacationBack" back
             JOIN "SEPTEM"."HR_EmployeePaidSocialVacation" paid ON ((back."EmployeePaidSocialVacationId" = paid."Id")))
          WHERE ((back."EndDate" + '1 day'::interval) <> paid."FirstWorkDate")
        UNION
         SELECT helv."Id",
            helv."DocsRepoId",
            helv."StartDate",
            helv."EndDate",
            helv."FirstWorkDate",
            ((date_part('day'::text, (helv."EndDate" - helv."StartDate")) + (1)::double precision))::integer AS "Days"
           FROM "SEPTEM"."HR_EmployeePaidSocialVacationProlong" helv
        UNION
         SELECT helv."Id",
            helv."DocsRepoId",
            date_trunc('month'::text, (helv."StartDate" - '1 day'::interval)) AS "StartDate",
            (helv."StartDate" - '1 day'::interval) AS "EndDate",
            helv."StartDate" AS "FirstWorkDate",
            0 AS "Days"
           FROM "SEPTEM"."HR_EmployeeHire" helv
        UNION
         SELECT helv."Id",
            helv."DocsRepoId",
            (helv."DismissalDate" + '1 day'::interval) AS "StartDate",
            (date_trunc('month'::text, (helv."DismissalDate" - '1 day'::interval)) + '1 mon -1 days'::interval) AS "EndDate",
            (date_trunc('month'::text, (helv."DismissalDate" - '1 day'::interval)) + '1 mon -1 days'::interval) AS "FirstWorkDate",
            0 AS "Days"
           FROM "SEPTEM"."HR_EmployeeDismissal" helv
        UNION
         SELECT helv."Id",
            helv."DocsRepoId",
            helv."StartDate",
            COALESCE(helvb."EndDate", helv."EndDate") AS "EndDate",
            COALESCE(helvb."FirstWorkDate", helv."FirstWorkDate") AS "FirstWorkDate",
            (helv."RealDays" + COALESCE((helvb."RealDays")::integer, 0)) AS "Days"
           FROM ("SEPTEM"."HR_EmployeeSocialVacations" helv
             LEFT JOIN "SEPTEM"."HR_EmployeeSocialVacationProlong" helvb ON ((helvb."EmployeeSocialVacationId" = helv."Id")))) xx
     JOIN "SEPTEM"."HR_DocsRepo" hdr ON ((hdr."Id" = xx."DocsRepoId")))
     JOIN "SEPTEM"."HR_DocEmployeeAssigments" hdea ON ((hdea."DocsRepoId" = hdr."Id")))
     LEFT JOIN "SEPTEM"."HR_Employees" he ON ((he."Id" = hdea."EmployeeId")))
  WHERE (((he."IsStaff")::text = 'State'::text) AND (NOT (EXISTS ( SELECT 1
           FROM "SEPTEM"."HR_CancellationOrder" co
          WHERE (co."CancellationOrderId" = xx."DocsRepoId")))));

CREATE VIEW "SEPTEM"."VW_EmployeeOperationDates" AS
 SELECT e."Id",
    e."StartDate",
    e."EndDate",
    e."FirstWworkDate" AS "FirstWorkDate",
    e."Days",
    e."EmployeeId",
    e."DocsRepoId",
    'EmployeeLaborVacations'::text AS "Type"
   FROM "SEPTEM"."HR_EmployeeLaborVacations" e
UNION ALL
 SELECT s."Id",
    s."StartDate",
    s."EndDate",
    s."FirstWorkDate",
    s."Days",
    s."EmployeeId",
    s."DocsRepoId",
    'EmployeeSickList'::text AS "Type"
   FROM "SEPTEM"."HR_EmployeeSickList" s
UNION ALL
 SELECT sp."Id",
    sp."StartDate",
    sp."EndDate",
    sp."FirstWorkDate",
    sp."Days",
    sp."EmployeeId",
    sp."DocsRepoId",
    'EmployeeSickListProlong'::text AS "Type"
   FROM "SEPTEM"."HR_EmployeeSickListProlong" sp
UNION ALL
 SELECT r."Id",
    r."StartDate",
    r."EndDate",
    NULL::timestamp without time zone AS "FirstWorkDate",
    NULL::integer AS "Days",
    r."EmployeeId",
    r."DocsRepoId",
    'EmployeeReplaceDay'::text AS "Type"
   FROM "SEPTEM"."HR_EmployeeReplaceDay" r
UNION ALL
 SELECT b."Id",
    b."StartDate",
    b."EndDate",
    b."FirstWorkDate",
    b."Days",
    b."EmployeeId",
    b."DocsRepoId",
    'EmployeeBusinessTrip'::text AS "Type"
   FROM "SEPTEM"."HR_EmployeeBusinessTrip" b
UNION ALL
 SELECT p."Id",
    p."StartDate",
    p."EndDate",
    p."FirstWorkDate",
    p."Days",
    p."EmployeeId",
    p."DocsRepoId",
    'EmployeePermission'::text AS "Type"
   FROM "SEPTEM"."HR_EmployeePermission" p
UNION ALL
 SELECT wo."Id",
    wo."StartDate",
    wo."EndDate",
    wo."FirstWorkDate",
    NULL::integer AS "Days",
    wo."EmployeeId",
    wo."DocsRepoId",
    'WorkOrWeekends'::text AS "Type"
   FROM "SEPTEM"."HR_WorkOrWeekends" wo
UNION ALL
 SELECT lb."Id",
    lb."StartDate",
    lb."EndDate",
    lb."FirstWorkDate",
    lb."Days",
    lb."EmployeeId",
    lb."DocsRepoId",
    'EmployeeLaborVacationsBack'::text AS "Type"
   FROM "SEPTEM"."HR_EmployeeLaborVacationsBack" lb
UNION ALL
 SELECT ev."Id",
    ev."StartDate",
    ev."EndDate",
    ev."FirstWorkDate",
    ev."Days",
    ev."EmployeeId",
    ev."DocsRepoId",
    'EmployeeEducationVacations'::text AS "Type"
   FROM "SEPTEM"."HR_EmployeeEducationVacations" ev
UNION ALL
 SELECT evb."Id",
    evb."StartDate",
    evb."EndDate",
    evb."FirstWorkDate",
    NULL::integer AS "Days",
    evb."EmployeeId",
    evb."DocsRepoId",
    'EmployeeEducationVacationBack'::text AS "Type"
   FROM "SEPTEM"."HR_EmployeeEducationVacationBack" evb
UNION ALL
 SELECT unp."Id",
    unp."StartDate",
    unp."EndDate",
    unp."FirstWokDate" AS "FirstWorkDate",
    unp."Days",
    unp."EmployeeId",
    unp."DocsRepoId",
    'EmployeeUnPaidVacations'::text AS "Type"
   FROM "SEPTEM"."HR_EmployeeUnPaidVacations" unp
UNION ALL
 SELECT unpb."Id",
    unpb."StartDate",
    unpb."EndDate",
    unpb."FirstWorkDate",
    unpb."UsedDays" AS "Days",
    unpb."EmployeeId",
    unpb."DocsRepoId",
    'EmployeeUnPaidVacationBack'::text AS "Type"
   FROM "SEPTEM"."HR_EmployeeUnPaidVacationBack" unpb
UNION ALL
 SELECT sv."Id",
    sv."StartDate",
    sv."EndDate",
    sv."FirstWorkDate",
    sv."Days",
    sv."EmployeeId",
    sv."DocsRepoId",
    'HR_EmployeeSocialVacations'::text AS "Type"
   FROM "SEPTEM"."HR_EmployeeSocialVacations" sv
UNION ALL
 SELECT svb."Id",
    svb."StartDate",
    svb."EndDate",
    svb."FirstWorkDate",
    svb."UsedDays" AS "Days",
    svb."EmployeeId",
    svb."DocsRepoId",
    'HR_EmployeeSocialVacationBack'::text AS "Type"
   FROM "SEPTEM"."HR_EmployeeSocialVacationBack" svb
UNION ALL
 SELECT ps."Id",
    ps."StartDate",
    ps."EndDate",
    ps."FirstWorkDate",
    ps."Days",
    ps."EmployeeId",
    ps."DocsRepoId",
    'HR_EmployeePaidSocialVacation'::text AS "Type"
   FROM "SEPTEM"."HR_EmployeePaidSocialVacation" ps
UNION ALL
 SELECT psb."Id",
    psb."StartDate",
    psb."EndDate",
    psb."FirstWorkDate",
    psb."UsedDays" AS "Days",
    psb."EmployeeId",
    psb."DocsRepoId",
    'HR_EmployeePaidSocialVacationBack'::text AS "Type"
   FROM "SEPTEM"."HR_EmployeePaidSocialVacationBack" psb
UNION ALL
 SELECT pspl."Id",
    pspl."StartDate",
    pspl."EndDate",
    pspl."FirstWorkDate",
    pspl."Days",
    pspl."EmployeeId",
    pspl."DocsRepoId",
    'HR_EmployeePaidSocialVacationProlong'::text AS "Type"
   FROM "SEPTEM"."HR_EmployeePaidSocialVacationProlong" pspl;

CREATE VIEW "SEPTEM"."VW_EmployeePlan" AS
 SELECT hep."Id",
    hep."CreatedDate",
    hep."EmployeeId",
    hep."Uid",
    emp."FullName",
    hep."AccountNumber",
    hep."MonthDays",
    hep."WorkDays",
    hep."WorkHours",
    hep."Status",
    hep."Description"
   FROM ("SEPTEM"."HR_EmployeePlan" hep
     JOIN "SEPTEM"."VW_EmployeesSimple" emp ON ((hep."EmployeeId" = emp."Id")));

CREATE VIEW "SEPTEM"."VW_EmployeeQueued" AS
 SELECT heq."Id",
    heq."CollectionId",
    heq."Version",
    heq."CreatedUserId",
    heq."CreatedDate",
    heq."ModifiedUserId",
    heq."ModifiedDate",
    heq."EmployeeId",
    heq."DocsRepoId",
    heq."StartDate",
    heq."IsStandart",
    heq."Month",
    heq."Year",
    heq."BusinessId",
    emp."FullName",
    heq."WorkHour",
    heq."WorkedDay",
    heq."EmployeeQueuedTypeId",
    rt."Code" AS "EmployeeQueuedTypeCode",
    rt."LunchHour",
    heq."WorkedHour",
    emp."AccountNumber"
   FROM (("SEPTEM"."HR_EmployeeQueued" heq
     JOIN "SEPTEM"."REF_EmployeeQueuedType" rt ON ((rt."Id" = heq."EmployeeQueuedTypeId")))
     JOIN "SEPTEM"."VW_Employees" emp ON ((heq."EmployeeId" = emp."Id")));

CREATE VIEW "SEPTEM"."VW_EmployeeReference" AS
 SELECT pcs."Id",
    pcs."BusinessId",
    pcs."EmployeeId",
    pcs."PositionSalary",
    pcs."SickPayment" AS "IllnessAmount",
    pcs."GeneralSalary" AS "CalcSalary",
    pcs."CommonSalary",
    pcs."MonthNumber",
    pcs."Month",
    pcs."TotalCharge",
    pcs."EmployeeInsurance",
    pcs."EmpoyeeMedicalInsurance",
    pcs."AwardPayment" AS "Bonus",
    pcs."ConpensationAmount",
    pcs."IncomeTax",
    pcs."PayedDismissal",
    pcs."LifeInsurance" AS "InsuranceAmount",
    pcs."VacationPayment" AS "Vacation",
    pcs."DsmfEmployee",
    pcs."SalaryPayable" AS "Salary",
    NULL::text AS "Other",
    NULL::text AS "EnsuranceQualitification",
    pcs."Year",
    ve."FullName"
   FROM ("SEPTEM"."PR_CalculatedSalary" pcs
     JOIN "SEPTEM"."VW_Employees" ve ON ((ve."Id" = pcs."EmployeeId")));

CREATE VIEW "SEPTEM"."VW_EmployeeTestPeriods" AS
 SELECT p."Id",
    p."PromotedStaffUnitId",
    su."Name" AS "PromotedStaffUnitName",
    p."EmployeeId",
    ve."FullName",
    ve."OrganizationStructureId" AS "StructureId",
    ve."StructureName",
    ve."StartDate",
    ve."AccountNumber",
    p."HasPromotion",
    p."VacancyId",
    rv."VacancyName",
    p."HasPromotionSalary",
    p."IncreaseDate",
    p."IncreaseStaffUnitDate",
    p."Status",
    p."StatusPromotion",
    p."StatusSalary",
    ve."TestPeriodDate" AS "TestPeriodEndDate",
    ve."BusinessId",
    ve."Salary",
    ve."StaffUnitId",
    ve."StaffUnitName",
    p."ConfirmedUserId",
    (((ur."FirstName")::text || ' '::text) || (ur."LastName")::text) AS "ConfirmedUserName",
    p."NewSalary"
   FROM (((("SEPTEM"."HR_EmployeeTestPeriods" p
     JOIN "SEPTEM"."VW_Employees" ve ON ((p."EmployeeId" = ve."Id")))
     LEFT JOIN "SEPTEM"."RC_Vacancy" rv ON ((rv."Id" = p."VacancyId")))
     LEFT JOIN "SEPTEM"."User" ur ON ((ur."Id" = p."ConfirmedUserId")))
     LEFT JOIN "SEPTEM"."HR_StaffUnits" su ON ((su."Id" = p."PromotedStaffUnitId")));

CREATE VIEW "SEPTEM"."VW_EmployeeUserInfo" AS
 SELECT u."Id",
    u."EmployeeId",
    r."Name" AS "RoleName",
    ve."FullName"
   FROM ((("SEPTEM"."User" u
     JOIN "SEPTEM"."UserRole" ur ON ((u."RolesCollectionId" = ur."CollectionId")))
     JOIN "SEPTEM"."Role" r ON ((r."Id" = ur."RoleId")))
     JOIN "SEPTEM"."VW_Employees" ve ON ((ve."Id" = u."EmployeeId")));

CREATE VIEW "SEPTEM"."VW_EmployeesInfo" AS
 SELECT DISTINCT ON (emp."Id") emp."Id",
    emp."Name" AS "FirstName",
    emp."Surname" AS "LastName",
    concat(emp."Name", ' ', emp."Surname") AS "DisplayName",
    emp."WorkEmail" AS "Email",
    ccc."Contact" AS "MobilePhone",
    emp."StructureName" AS "Department",
    emp."FullParentName" AS "Unit",
    emp."StaffUnitName" AS "Jobtitle",
    emp."AccountNumber" AS "EmployeeidNumber",
    emp."StartDate" AS "EmploymentStartDate",
    emp."EndDate" AS "EmploymentTerminationDate",
        CASE
            WHEN ((emp."EmployeeStatuses")::text = 'Dismissal'::text) THEN 'Terminated'::text
            ELSE 'Active'::text
        END AS "Status",
    he."CreatedDate" AS "CreatedAt",
    he."ModifiedDate" AS "UpdateAt",
    pos."ChangeDate",
    emp."Uid"
   FROM (((("SEPTEM"."VW_Employees" emp
     LEFT JOIN "SEPTEM"."CRM_ContractorContacts" ccc ON ((emp."PersonId" = ccc."PersonId")))
     LEFT JOIN "SEPTEM"."REF_ContactTypes" rct ON (((ccc."ContactTypeId" = rct."Id") AND (rct."Id" = '8a401354-96d2-4b5f-9907-424f3429c45f'::uuid))))
     JOIN "SEPTEM"."HR_Employees" he ON ((emp."Id" = he."Id")))
     LEFT JOIN "SEPTEM"."HR_EmployeePositionChanges" pos ON ((emp."Id" = pos."EmployeeId")))
  WHERE (emp."BusinessId" = '9f3cece5-a712-4e0d-961b-58a529fa3c94'::uuid)
  ORDER BY emp."Id", pos."ChangeDate" DESC;

CREATE VIEW "SEPTEM"."VW_EmployeesNoWorkedDaysReport" AS
 SELECT gen_random_uuid() AS "Id",
    emp."Id" AS "EmployeeId",
    nowd."Id" AS "NoWorkedDayId",
    emp."FullName",
    emp."Uid",
    emp."SocialCard",
    nowd."Days",
    nowd."DocTypes",
    nowd."StartDate",
    nowd."EndDate",
    1 AS "MonthNumber",
    ''::text AS "Month",
    2024 AS "Year",
    emp."BusinessId"
   FROM ("SEPTEM"."VW_Employees" emp
     JOIN "SEPTEM"."VW_EmployeeNoWorkedDays" nowd ON ((emp."Id" = nowd."EmployeeId")))
  WHERE ((emp."IsStaff")::text = 'State'::text);

CREATE VIEW "SEPTEM"."VW_HR_DocsRepoFlow" AS
 SELECT DISTINCT "Assignes"."UserId",
    "Assignes"."WorkId",
    "Assignes"."Operation",
    "Assignes"."ProductTypeName" AS "ProductType",
    "Assignes"."WorkCurrentStatusId",
    "Assignes"."WorkCurrentStatusName",
    "Assignes"."WorkCurrentStatusCode",
    "Assignes"."StatusCanEdit",
    "Assignes"."StatusCanDelete",
    "Assignes"."StatusCanPrint",
    po."Id",
    po."CreatedUserId",
    po."CreatedDate",
    po."DocTypes",
    po."DocNumber",
    po."DocDate",
    po."BusinessId",
    ve."FullName",
    ve."AccountNumber",
    po."IsPrePayment",
    ve."Id" AS "EmployeeId",
    po."IsImport"
   FROM (((("SEPTEM"."HR_DocsRepo" po
     JOIN "SEPTEM"."HR_DocEmployeeAssigments" hdea ON ((hdea."DocsRepoId" = po."Id")))
     JOIN "SEPTEM"."VW_Employees" ve ON ((ve."Id" = hdea."EmployeeId")))
     LEFT JOIN "SEPTEM"."User" cu ON ((po."CreatedUserId" = cu."Id")))
     LEFT JOIN "SEPTEM"."VW_WF_AssignedWorkAllActive" "Assignes" ON ((po."Id" = "Assignes"."ProductId")));

CREATE VIEW "SEPTEM"."VW_HR_EmployeeAdditionalCostPayment" AS
 SELECT h."Id",
    h."EmployeeId",
    h."DocsRepoId",
    h."AdditionalPaymentType",
    h."Amount",
    h."StartDate",
    h."EndDate",
    h."Description",
    h."AmountType",
    wfs."Code"
   FROM ((("SEPTEM"."HR_EmployeeAdditionalCostPayment" h
     JOIN "SEPTEM"."HR_DocsRepo" hdr ON ((hdr."Id" = h."DocsRepoId")))
     JOIN "SEPTEM"."WF_Work" ww ON ((ww."ProductId" = hdr."Id")))
     JOIN "SEPTEM"."WF_FlowStatus" wfs ON ((wfs."Id" = ww."CurrentStatusId")));

CREATE VIEW "SEPTEM"."VW_HR_EmployeeAdditionalSalaryReport" AS
 SELECT enc."Id",
    emp."FullName",
    emp."StaffUnitName",
    emp."StructureName",
    emp."BusinessId",
    emp."AccountNumber",
    enc."AddSalary" AS "Amount",
    enc."StartDate",
    enc."EndDate",
    enc."CalculationRule",
    enc."PaymentMethod",
    enc."EmployeeId",
    dr."DocNumber",
    dr."DocTypes"
   FROM (("SEPTEM"."HR_EmployeeAdditionalSalaryLogs" enc
     JOIN "SEPTEM"."HR_DocsRepo" dr ON ((enc."DocsRepoId" = dr."Id")))
     JOIN "SEPTEM"."VW_Employees" emp ON ((enc."EmployeeId" = emp."Id")))
  WHERE ((enc."StartDate" IS NOT NULL) AND (enc."EndDate" IS NOT NULL) AND (enc."AddSalary" IS NOT NULL));

CREATE VIEW "SEPTEM"."VW_HR_EmployeeCompensationPeriods" AS
 SELECT lp."Id",
    lab."DocsRepoId",
    lab."Id" AS "CompensationId",
    (lp."AnnualStart")::date AS "AnualStart",
    (lp."CountDay")::numeric(9,0) AS "CountDay",
    (lab."Days")::numeric(9,0) AS "Days",
    lab."EmployeeId",
    lp."Period",
    dr."BusinessId",
    dr."DocNumber",
    dr."DocDate",
    wfs."Code" AS "StatusCode",
        CASE
            WHEN (lp."AddCountDay" IS NULL) THEN 0
            ELSE lp."AddCountDay"
        END AS "AddCountDay",
    lp."Id" AS "PeriodId"
   FROM ((((("SEPTEM"."HR_EmployeeCompensations" lab
     JOIN "SEPTEM"."HR_DocsRepo" dr ON ((dr."Id" = lab."DocsRepoId")))
     JOIN "SEPTEM"."HR_EmployeeCompensationPeriods" lp ON ((lp."CollectionId" = lab."PeriodItemsCollectionId")))
     JOIN "SEPTEM"."WF_Work" ww ON ((ww."ProductId" = dr."Id")))
     JOIN "SEPTEM"."WF_FlowStatus" wfs ON ((wfs."Id" = ww."CurrentStatusId")))
     LEFT JOIN "SEPTEM"."HR_CancellationOrder" hco ON ((hco."CancellationOrderId" = lab."DocsRepoId")))
  WHERE (hco."Id" IS NULL);

CREATE VIEW "SEPTEM"."VW_HR_EmployeeContractLog" AS
 SELECT "Id",
    "EmployeeId",
    "DocsRepoId",
    "StartDate",
    "EndDate",
    "ContractDuration",
    "EntryDate",
    "ContractType",
    "DurationYear",
    "DurationMonth",
    "DurationDay"
   FROM "SEPTEM"."HR_EmployeeContractLog";

CREATE VIEW "SEPTEM"."VW_HR_EmployeeCurrentSalary" AS
 SELECT uuid_in(("overlay"("overlay"(md5((((random())::text || ':'::text) || (random())::text)), '4'::text, 13), to_hex((floor(((random() * (((11 - 8) + 1))::double precision) + (8)::double precision)))::integer), 17))::cstring) AS "Id",
    current."EmployeeId",
    current."Salary" AS "CurrentSalary",
    current."StartDate" AS "CurrentSalaryChangeDate",
    previous."Salary" AS "PreviousSalary",
    previous."EndDate" AS "PreviousSalaryChangeDate"
   FROM ("SEPTEM"."HR_EmployeeSalaryLogs" current
     LEFT JOIN "SEPTEM"."HR_EmployeeSalaryLogs" previous ON (((current."EmployeeId" = previous."EmployeeId") AND (previous."EndDate" < current."StartDate"))))
  WHERE (current."EndDate" IS NULL);

CREATE VIEW "SEPTEM"."VW_HR_EmployeeDismissal" AS
 WITH latestcontract AS (
         SELECT "HR_EmployeeContractLog"."EmployeeId",
            max("HR_EmployeeContractLog"."StartDate") AS "MaxStartDate"
           FROM "SEPTEM"."HR_EmployeeContractLog"
          GROUP BY "HR_EmployeeContractLog"."EmployeeId"
        )
 SELECT vw."FullName",
    ed."DismissalDate",
    dr."DocNumber",
    dr."DocDate",
    vw."StaffUnitName",
    vw."BranchName",
    vw."StructureName",
    vw."Gender",
    'İşdən azad'::bpchar AS "Type",
    vw."Id" AS "EmployeeId",
    vw."BusinessId",
    vw."EmployeeStatuses",
    ed."Id",
    vw."Salary",
    ec."StartDate" AS "ContractStartDate",
    ec."EndDate" AS "ContractEndDate",
    ec."ContractType",
    vw."AccountNumber",
    ec."DurationYear",
    ec."DurationMonth",
    ed."DismissalTypeId"
   FROM ((((("SEPTEM"."VW_Employees" vw
     JOIN "SEPTEM"."HR_DocEmployeeAssigments" da ON ((vw."Id" = da."EmployeeId")))
     JOIN "SEPTEM"."HR_DocsRepo" dr ON ((da."DocsRepoId" = dr."Id")))
     JOIN "SEPTEM"."HR_EmployeeDismissal" ed ON ((dr."Id" = ed."DocsRepoId")))
     JOIN "SEPTEM"."HR_EmployeeContractLog" ec ON ((ec."EmployeeId" = vw."Id")))
     JOIN latestcontract lc ON (((lc."EmployeeId" = ec."EmployeeId") AND (ec."StartDate" = lc."MaxStartDate"))))
  ORDER BY vw."Id", ec."StartDate" DESC;

CREATE VIEW "SEPTEM"."VW_HR_EmployeeDocs" AS
 SELECT "HR_DocsRepo"."Id",
    "HR_DocsRepo"."DocTypes",
    "HR_DocsRepo"."DocNumber",
    "HR_DocsRepo"."DocDate",
    "HR_DocEmployeeAssigments"."EmployeeId",
    "VW_Employees"."FullName",
    "HR_DocsRepo"."BusinessId",
    wfs."Name" AS "StatusName"
   FROM (((("SEPTEM"."HR_DocsRepo"
     JOIN "SEPTEM"."HR_DocEmployeeAssigments" ON (("HR_DocsRepo"."Id" = "HR_DocEmployeeAssigments"."DocsRepoId")))
     JOIN "SEPTEM"."VW_Employees" ON (("HR_DocEmployeeAssigments"."EmployeeId" = "VW_Employees"."Id")))
     JOIN "SEPTEM"."WF_Work" ww ON ((ww."ProductId" = "HR_DocsRepo"."Id")))
     JOIN "SEPTEM"."WF_FlowStatus" wfs ON ((wfs."Id" = ww."CurrentStatusId")))
  WHERE ((wfs."Code")::text <> 'CANCELED'::text);

CREATE VIEW "SEPTEM"."VW_HR_EmployeeEducationVacationList" AS
 SELECT edu."Id",
    doc."DocDate",
    edu."DocsRepoId",
    edu."EmployeeId",
    edu."EducationInstituteId",
    edu."StartDate",
    COALESCE(back."EndDate", edu."EndDate") AS "EndDate"
   FROM (("SEPTEM"."HR_EmployeeEducationVacations" edu
     JOIN "SEPTEM"."HR_DocsRepo" doc ON ((doc."Id" = edu."DocsRepoId")))
     LEFT JOIN "SEPTEM"."HR_EmployeeEducationVacationBack" back ON ((back."EmployeeEducationVacationId" = edu."Id")));

CREATE VIEW "SEPTEM"."VW_HR_EmployeeEducationVacations" AS
 SELECT edu."Id",
    dr."DocNumber",
    dr."DocDate",
    edu."StartDate",
    COALESCE(back."EndDate", edu."EndDate") AS "EndDate",
    edu."EmployeeId",
    edu."DocsRepoId"
   FROM ((("SEPTEM"."HR_EmployeeEducationVacations" edu
     JOIN "SEPTEM"."HR_DocsRepo" dr ON ((dr."Id" = edu."DocsRepoId")))
     LEFT JOIN "SEPTEM"."HR_EmployeeEducationVacationBack" back ON ((edu."Id" = back."EmployeeEducationVacationId")))
     LEFT JOIN "SEPTEM"."VW_HR_DocsRepoFlow" flow ON (((dr."DocNumber")::text = (flow."DocNumber")::text)))
  WHERE ((((flow."DocTypes")::text = 'EducationVacation'::text) OR ((flow."DocTypes")::text = 'EducationName'::text) OR ((flow."DocTypes")::text = 'Creativity'::text)) AND ((flow."WorkCurrentStatusCode")::text = 'NEW'::text) AND (flow."UserId" IS NOT NULL));

CREATE VIEW "SEPTEM"."VW_HR_EmployeeEncouragement" AS
 SELECT "HR_EmployeeEncouragement"."Id",
    "HR_DocsRepo"."DocNumber",
    "HR_DocsRepo"."DocDate",
    "HR_EmployeeEncouragement"."StartDate",
    "HR_EmployeeEncouragement"."Amount",
    "HR_EmployeeEncouragement"."Basis",
    "HR_EmployeeEncouragement"."DocsRepoId",
    "HR_EmployeeEncouragement"."EmployeeId",
    "HR_EmployeeEncouragement"."Cause",
    "HR_EmployeeEncouragement"."EndDate",
    "VW_Employees"."FullName",
    "HR_EmployeeEncouragement"."CalculationRule",
    "HR_EmployeeEncouragement"."MonthCount",
    "HR_EmployeeEncouragement"."PaymentMethod",
    "HR_DocsRepo"."BusinessId"
   FROM (("SEPTEM"."HR_EmployeeEncouragement"
     JOIN "SEPTEM"."HR_DocsRepo" ON (("HR_EmployeeEncouragement"."DocsRepoId" = "HR_DocsRepo"."Id")))
     JOIN "SEPTEM"."VW_Employees" ON (("HR_EmployeeEncouragement"."EmployeeId" = "VW_Employees"."Id")));

CREATE VIEW "SEPTEM"."VW_HR_EmployeeEncouragementList" AS
 SELECT eng."Id",
    eng."StartDate",
    eng."Amount",
    eng."DocsRepoId",
    eng."EmployeeId",
    COALESCE((COALESCE(eng."EndDate", cancel."ApplyDate"))::timestamp with time zone, now()) AS "EndDate",
    eng."AdditionalSalaryType",
    eng."CalculationRule",
    eng."PaymentMethod"
   FROM (((("SEPTEM"."HR_EmployeeEncouragement" eng
     JOIN "SEPTEM"."HR_DocsRepo" doc ON ((doc."Id" = eng."DocsRepoId")))
     JOIN "SEPTEM"."HR_DocEmployeeAssigments" asg ON ((asg."DocsRepoId" = doc."Id")))
     JOIN "SEPTEM"."HR_EmployeeAdditionalSalaryLogs" al ON ((al."DocsRepoId" = doc."Id")))
     LEFT JOIN "SEPTEM"."HR_EmployeeEncouragementCancel" cancel ON ((cancel."EmployeeAdditionalSalaryLogId" = al."Id")));

CREATE VIEW "SEPTEM"."VW_HR_EmployeeHandover" AS
 SELECT "Id",
    "DocsRepoId",
    "EmployeeId",
    "Basis",
    "RecievedEmployeeHandoverCollectionId",
    "FirstCommissionMemberId",
    "SecondCommissionMemberId"
   FROM "SEPTEM"."HR_EmployeeHandover" eh;

CREATE VIEW "SEPTEM"."VW_HR_EmployeeHire" AS
 WITH firstcontract AS (
         SELECT "HR_EmployeeContractLog"."EmployeeId",
            min("HR_EmployeeContractLog"."StartDate") AS "MinStartDate"
           FROM "SEPTEM"."HR_EmployeeContractLog"
          GROUP BY "HR_EmployeeContractLog"."EmployeeId"
        )
 SELECT vw."FullName",
    eh."StartDate",
    dr."DocNumber",
    dr."DocDate",
    vw."StaffUnitName",
    vw."BranchName",
    vw."StructureName",
    vw."Gender",
    'İşə qəbul'::text AS "Type",
    vw."Id",
    vw."BusinessId",
    eh."Salary",
    ec."StartDate" AS "ContractStartDate",
    ec."EndDate" AS "ContractEndDate",
    ec."ContractType",
    vw."AccountNumber",
    ec."DurationYear",
    ec."DurationMonth"
   FROM ((((("SEPTEM"."VW_Employees" vw
     JOIN "SEPTEM"."HR_DocEmployeeAssigments" da ON ((vw."Id" = da."EmployeeId")))
     JOIN "SEPTEM"."HR_DocsRepo" dr ON ((da."DocsRepoId" = dr."Id")))
     JOIN "SEPTEM"."HR_EmployeeHire" eh ON ((dr."Id" = eh."DocsRepoId")))
     JOIN "SEPTEM"."HR_EmployeeContractLog" ec ON ((ec."EmployeeId" = vw."Id")))
     JOIN firstcontract fc ON ((fc."EmployeeId" = ec."EmployeeId")))
  WHERE (ec."StartDate" = fc."MinStartDate")
  ORDER BY vw."Id", eh."StartDate" DESC;

CREATE VIEW "SEPTEM"."VW_HR_EmployeeHolidayWorkItemsView" AS
 SELECT hwi."Id",
    hwi."StartDate",
    hwi."EmployeeId",
    hwi."Hour",
    hwi."IsReplaceDay",
    hwi."TimeType",
    hwi."WorkType",
    hwi."EndDate",
    hwi."Year",
    hwi."MonthNumber",
    hdr."DocDate",
    hdr."DocNumber",
    hdr."DocTypes",
    hwi."IsIncludeLunch",
    hwi."LunchTime"
   FROM (("SEPTEM"."HR_EmployeeHolidayWorkItems" hwi
     JOIN "SEPTEM"."HR_EmployeeHolidayWork" hw ON ((hwi."CollectionId" = hw."EmployeeHolidayItemsCollectionId")))
     JOIN "SEPTEM"."HR_DocsRepo" hdr ON ((hdr."Id" = hw."DocsRepoId")));

CREATE VIEW "SEPTEM"."VW_HR_EmployeeLaborVacation" AS
 SELECT lab."Id",
    dr."DocNumber",
    dr."DocDate",
    lab."StartDate",
    COALESCE(lb."EndDate", lab."EndDate") AS "EndDate",
    lab."EmployeeId",
    lab."DocsRepoId",
    dr."BusinessId",
    lab."Days",
    COALESCE((lb."Days")::integer, lab."Days") AS "UsedDays",
    COALESCE(lb."IsRefund", false) AS "IsRefund",
    lab."FirstWworkDate",
    lab."EndDate" AS "MainEndDate"
   FROM ((("SEPTEM"."HR_EmployeeLaborVacations" lab
     JOIN "SEPTEM"."HR_DocsRepo" dr ON ((dr."Id" = lab."DocsRepoId")))
     LEFT JOIN "SEPTEM"."HR_CancellationOrder" hco ON ((hco."CancellationOrderId" = lab."DocsRepoId")))
     LEFT JOIN ( SELECT back."Id",
            back."CollectionId",
            back."Version",
            back."DocsRepoId",
            back."EmployeeId",
            back."EndDate",
            back."FirstWorkDate",
            back."Days",
            back."Basis",
            back."EmployeeLaborVacationId",
            back."IsRefund",
            back."PeriodItemCollectionId",
            hcoback."Id",
            hcoback."CollectionId",
            hcoback."Version",
            hcoback."DocsRepoId",
            hcoback."EmployeeId",
            hcoback."CancellationOrderId",
            hcoback."Cause",
            hcoback."Basis"
           FROM ("SEPTEM"."HR_EmployeeLaborVacationsBack" back
             LEFT JOIN "SEPTEM"."HR_CancellationOrder" hcoback ON ((hcoback."CancellationOrderId" = back."DocsRepoId")))
          WHERE (hcoback."Id" IS NULL)) lb("Id", "CollectionId", "Version", "DocsRepoId", "EmployeeId", "EndDate", "FirstWorkDate", "Days", "Basis", "EmployeeLaborVacationId", "IsRefund", "PeriodItemCollectionId", "Id_1", "CollectionId_1", "Version_1", "DocsRepoId_1", "EmployeeId_1", "CancellationOrderId", "Cause", "Basis_1") ON ((lab."Id" = lb."EmployeeLaborVacationId")));

CREATE VIEW "SEPTEM"."VW_HR_EmployeeLaborVacationPeriods" AS
 SELECT lp."Id",
    lab."DocsRepoId",
    lab."Id" AS "LaborVacationId",
    (lp."AnualStart")::date AS "AnualStart",
    (lp."CountDay")::numeric(9,0) AS "CountDay",
    (lab."Days")::numeric(9,0) AS "Days",
    lab."EmployeeId",
    lp."Period",
    dr."BusinessId",
        CASE
            WHEN (lp."AddCountDay" IS NULL) THEN 0
            ELSE lp."AddCountDay"
        END AS "AddCountDay",
    lp."Id" AS "PeriodId"
   FROM ((("SEPTEM"."HR_EmployeeLaborVacations" lab
     JOIN "SEPTEM"."HR_DocsRepo" dr ON ((dr."Id" = lab."DocsRepoId")))
     JOIN "SEPTEM"."HR_EmployeeLaborVacationPeriods" lp ON ((lp."CollectionId" = lab."PeriodItemsCollectionId")))
     LEFT JOIN "SEPTEM"."HR_CancellationOrder" hco ON ((hco."CancellationOrderId" = lab."DocsRepoId")))
  WHERE (hco."Id" IS NULL);

CREATE VIEW "SEPTEM"."VW_HR_StaffUnits" AS
 SELECT "HR_StaffUnits"."Name",
    "VW_HR_OrganizationStructure"."BranchName",
    "VW_HR_OrganizationStructure"."StructureName",
    "HR_StaffUnits"."OrganizationStructureId",
    "HR_StaffUnits"."BranchId",
    "HR_StaffUnits"."Id",
    "HR_StaffUnits"."BusinessId",
    ("HR_StaffUnits"."NeedCount" - COALESCE(staff_units_state.current_count, (0)::bigint)) AS "FreeCount",
    COALESCE(staff_units_state.current_count, (0)::bigint) AS "CurrentCount",
    "HR_StaffUnits"."NeedCount",
    "HR_StaffUnits"."SalaryMin",
    "HR_StaffUnits"."SalaryMax",
    stype."Name" AS "StaffTypeName",
    "HR_StaffUnits"."StaffTypeId",
    "HR_StaffUnits"."Description",
    "HR_StaffUnits"."IsActive",
    "HR_StaffUnits"."OrderNum",
    "HR_StaffUnits"."CreatedDate",
    "HR_StaffUnits"."CreatedUserId",
    "HR_StaffUnits"."ModifiedUserId",
    "HR_StaffUnits"."ModifiedDate",
    "HR_StaffUnits"."OfficeType",
    "HR_StaffUnits"."OrganizationStructureCurationId",
    cur."StructureName" AS "OrganizationStructureCuration",
    "HR_StaffUnits"."StructureCurationId",
    "HR_StaffUnits"."HideCode"
   FROM (((("SEPTEM"."HR_StaffUnits"
     JOIN "SEPTEM"."HR_StaffTypes" stype ON ((stype."Id" = "HR_StaffUnits"."StaffTypeId")))
     JOIN "SEPTEM"."VW_HR_OrganizationStructure" ON (("HR_StaffUnits"."OrganizationStructureId" = "VW_HR_OrganizationStructure"."Id")))
     LEFT JOIN "SEPTEM"."VW_HR_OrganizationStructure" cur ON ((cur."Id" = "HR_StaffUnits"."OrganizationStructureCurationId")))
     LEFT JOIN ( SELECT "HR_Employees"."StaffUnitId",
            count(1) AS current_count
           FROM "SEPTEM"."HR_Employees"
          WHERE ((("HR_Employees"."EmployeeStatuses")::text <> 'Dismissal'::text) AND (((now() >= "HR_Employees"."StartDate") AND (now() <= "HR_Employees"."EndDate")) OR ("HR_Employees"."EndDate" IS NULL)))
          GROUP BY "HR_Employees"."StaffUnitId") staff_units_state ON (("HR_StaffUnits"."Id" = staff_units_state."StaffUnitId")));

CREATE VIEW "SEPTEM"."VW_HR_EmployeeOnboardings" AS
 SELECT b."Id",
    r."CreatedDate",
    (((u."FirstName")::text || ' '::text) || (u."LastName")::text) AS "RecruiterName",
    b."Status",
    b."JobOfferIdId",
    s."Name" AS "StaffUnit",
    org."FullOrgName",
    ru."Name",
    ru."Surname",
    ru."Patronymic",
    r."Salary",
    r."DocumentationDate",
    b."BusinessId"
   FROM (((((("SEPTEM"."HR_EmployeeOnboardings" b
     JOIN "SEPTEM"."RC_JobOffers" r ON ((r."Id" = b."JobOfferIdId")))
     JOIN "SEPTEM"."VW_HR_StaffUnits" s ON ((s."Id" = r."StaffUnitId")))
     JOIN "SEPTEM"."VW_HR_OrganizationStructure" org ON ((org."Id" = s."OrganizationStructureId")))
     JOIN "SEPTEM"."RC_ApplyVacancy" rav ON ((rav."Id" = r."ApplyVacancyId")))
     JOIN "SEPTEM"."RC_Users" ru ON ((ru."Id" = rav."UserId")))
     JOIN "SEPTEM"."User" u ON ((u."Id" = b."CreatedUserId")));

CREATE VIEW "SEPTEM"."VW_HR_EmployeePaidSocialVacation" AS
 SELECT "Id",
    "DocNumber",
    "DocDate",
    "StartDate",
    "EndDate",
    "EmployeeId",
    "DocsRepoId",
    "ChildBirthDate",
    "FirstWorkDate",
    rn
   FROM ( SELECT innerquery."Id",
            innerquery."DocNumber",
            innerquery."DocDate",
            innerquery."StartDate",
            innerquery."EndDate",
            innerquery."EmployeeId",
            innerquery."DocsRepoId",
            innerquery."ChildBirthDate",
            innerquery."FirstWorkDate",
            row_number() OVER (PARTITION BY innerquery."DocsRepoId" ORDER BY innerquery."StartDate" DESC) AS rn
           FROM ( SELECT psv."Id",
                    COALESCE(drr."DocNumber", dr."DocNumber") AS "DocNumber",
                    dr."DocDate",
                    COALESCE(prolong."StartDate", psv."StartDate") AS "StartDate",
                    COALESCE(back."StartDate", COALESCE(prolong."EndDate", psv."EndDate")) AS "EndDate",
                    psv."EmployeeId",
                    psv."DocsRepoId",
                    vcppr."BirthDate" AS "ChildBirthDate",
                    COALESCE(prolong."FirstWorkDate", psv."FirstWorkDate") AS "FirstWorkDate"
                   FROM ((((("SEPTEM"."HR_EmployeePaidSocialVacation" psv
                     JOIN "SEPTEM"."HR_DocsRepo" dr ON ((dr."Id" = psv."DocsRepoId")))
                     LEFT JOIN ( SELECT prolong_1."Id",
                            prolong_1."CollectionId",
                            prolong_1."Version",
                            prolong_1."DocsRepoId",
                            prolong_1."EmployeeId",
                            prolong_1."StartDate",
                            prolong_1."EndDate",
                            prolong_1."Days",
                            prolong_1."Basis",
                            prolong_1."FirstWorkDate",
                            prolong_1."EmployeePaidSocialVacationId",
                            prolong_1."Description",
                            prolong_1."RealDays",
                            repo."UserId",
                            repo."WorkId",
                            repo."Operation",
                            repo."ProductType",
                            repo."WorkCurrentStatusId",
                            repo."WorkCurrentStatusName",
                            repo."WorkCurrentStatusCode",
                            repo."StatusCanEdit",
                            repo."StatusCanDelete",
                            repo."StatusCanPrint",
                            repo."Id",
                            repo."CreatedUserId",
                            repo."CreatedDate",
                            repo."DocTypes",
                            repo."DocNumber",
                            repo."DocDate",
                            repo."BusinessId",
                            repo."FullName",
                            repo."AccountNumber",
                            repo."IsPrePayment"
                           FROM ("SEPTEM"."HR_EmployeePaidSocialVacationProlong" prolong_1
                             JOIN "SEPTEM"."VW_HR_DocsRepoFlow" repo ON ((prolong_1."DocsRepoId" = repo."Id")))
                          WHERE (repo."UserId" IS NOT NULL)) prolong("Id", "CollectionId", "Version", "DocsRepoId", "EmployeeId", "StartDate", "EndDate", "Days", "Basis", "FirstWorkDate", "EmployeePaidSocialVacationId", "Description", "RealDays", "UserId", "WorkId", "Operation", "ProductType", "WorkCurrentStatusId", "WorkCurrentStatusName", "WorkCurrentStatusCode", "StatusCanEdit", "StatusCanDelete", "StatusCanPrint", "Id_1", "CreatedUserId", "CreatedDate", "DocTypes", "DocNumber", "DocDate", "BusinessId", "FullName", "AccountNumber", "IsPrePayment") ON ((psv."Id" = prolong."EmployeePaidSocialVacationId")))
                     LEFT JOIN "SEPTEM"."HR_EmployeePaidSocialVacationBack" back ON ((psv."Id" = back."EmployeePaidSocialVacationId")))
                     LEFT JOIN "SEPTEM"."VW_CRM_PhysicalPersonRelatives" vcppr ON ((vcppr."Id" = psv."RelatedChildId")))
                     LEFT JOIN "SEPTEM"."HR_DocsRepo" drr ON ((drr."Id" = prolong."DocsRepoId")))) innerquery) rankeddocs
  WHERE (rn = 1);

CREATE VIEW "SEPTEM"."VW_HR_EmployeePaidSocialVacationForProlong" AS
 SELECT hpsvp."Id",
    hpsvp."Id" AS "PaidSocialVacationId",
    hr."DocTypes",
    hr."DocDate",
    hpsvp."EmployeeId",
    hpsvp."StartDate",
    hpsvp."EndDate",
    hpsvp."FirstWorkDate"
   FROM ("SEPTEM"."HR_EmployeePaidSocialVacation" hpsvp
     JOIN "SEPTEM"."HR_DocsRepo" hr ON ((hr."Id" = hpsvp."DocsRepoId")))
UNION ALL
 SELECT hpsvp."Id",
    hpsvp."EmployeePaidSocialVacationId" AS "PaidSocialVacationId",
    hr."DocTypes",
    hr."DocDate",
    hpsvp."EmployeeId",
    hpsvp."StartDate",
    hpsvp."EndDate",
    hpsvp."FirstWorkDate"
   FROM ("SEPTEM"."HR_EmployeePaidSocialVacationProlong" hpsvp
     JOIN "SEPTEM"."HR_DocsRepo" hr ON ((hr."Id" = hpsvp."DocsRepoId")));

CREATE VIEW "SEPTEM"."VW_HR_EmployeePenalty" AS
 SELECT "HR_EmployeePenalty"."Id",
    "HR_EmployeePenalty"."Month",
    "HR_EmployeePenalty"."Basis",
    "HR_EmployeePenalty"."PenaltyType",
    "HR_EmployeePenalty"."Cause",
    "HR_EmployeePenalty"."ApplyDate",
    "HR_EmployeePenalty"."EmployeeId",
    "HR_EmployeePenalty"."DocsRepoId",
    "HR_EmployeePenalty"."Percentage",
    "HR_DocsRepo"."DocNumber",
    "HR_DocsRepo"."DocDate",
    "VW_Employees"."FullName",
    "HR_DocsRepo"."BusinessId",
    "VW_Employees"."AccountNumber",
    "VW_Employees"."StructureName",
    "VW_Employees"."StaffUnitName",
    "VW_Employees"."BranchName"
   FROM (("SEPTEM"."HR_EmployeePenalty"
     JOIN "SEPTEM"."HR_DocsRepo" ON (("HR_EmployeePenalty"."DocsRepoId" = "HR_DocsRepo"."Id")))
     JOIN "SEPTEM"."VW_Employees" ON (("HR_EmployeePenalty"."EmployeeId" = "VW_Employees"."Id")));

CREATE VIEW "SEPTEM"."VW_HR_EmployeePenaltyMonthly" AS
 SELECT pen."Id",
    pen."Month",
    pen."Basis",
    pen."PenaltyType",
    pen."Cause",
    pen."ApplyDate",
    pen."EmployeeId",
    pen."DocsRepoId",
    pen."Percentage",
    (pen."ApplyDate" + ((pen."Month")::double precision * '1 mon'::interval)) AS "EndDate"
   FROM (("SEPTEM"."HR_EmployeePenalty" pen
     JOIN "SEPTEM"."HR_DocsRepo" doc ON ((pen."DocsRepoId" = doc."Id")))
     LEFT JOIN "SEPTEM"."HR_EmployeePenaltyCancel" can ON ((pen."Id" = can."PenaltyId")))
  WHERE ((pen."PenaltyType")::text = 'Charge'::text);

CREATE VIEW "SEPTEM"."VW_HR_EmployeePositionChangesLog" AS
 SELECT ul."Id",
    hsu."BranchId",
    hsu."OrganizationStructureId",
    ul."StaffUnitId",
    ul."IsStaff",
    ul."EmployeeId",
    ul."StartDate",
    ul."EndDate",
    dr."DocNumber",
    dr."DocDate",
    dr."DocTypes",
    e."FullName",
    hb."Name" AS "BranchName",
    hs."Name" AS "StructureName",
    hsu."Name" AS "StaffUnitName",
    dr."BusinessId"
   FROM (((((("SEPTEM"."HR_EmployeeStaffUnitLog" ul
     JOIN "SEPTEM"."HR_StaffUnits" hsu ON ((ul."StaffUnitId" = hsu."Id")))
     JOIN "SEPTEM"."HR_DocsRepo" dr ON ((ul."DocsRepoId" = dr."Id")))
     JOIN "SEPTEM"."VW_Employees" e ON ((ul."EmployeeId" = e."Id")))
     JOIN "SEPTEM"."HR_Branches" hb ON ((hsu."BranchId" = hb."Id")))
     JOIN "SEPTEM"."HR_OrganizationStructure" hos ON ((hsu."OrganizationStructureId" = hos."Id")))
     JOIN "SEPTEM"."HR_Structures" hs ON ((hos."StructureId" = hs."Id")));

CREATE VIEW "SEPTEM"."VW_HR_EmployeePositionStop" AS
 SELECT r."Id",
    r."DocsRepoId",
    r."EmployeeId",
    r."StaffUnitId",
    su."OrganizationStructureId",
    su."BranchId",
    r."IsSalaryDiff",
    r."ChangeDate",
    r."EndDate",
    r."Basis",
    d."DocDate",
    d."DocNumber"
   FROM (("SEPTEM"."HR_PositionReplacement" r
     JOIN "SEPTEM"."HR_DocsRepo" d ON ((d."Id" = r."DocsRepoId")))
     JOIN "SEPTEM"."HR_StaffUnits" su ON ((r."StaffUnitId" = su."Id")));

CREATE VIEW "SEPTEM"."VW_HR_EmployeePriveleges" AS
 SELECT cppp."Id",
    cppp."PrivilegeId",
    cppp."EndDate",
    cppp."StartDate",
    rp."Name" AS "PrivilegeName",
    rp."IsActive",
    emp."Id" AS "EmployeeId",
    rp."Priority",
    emp."BranchName" AS "Branch",
    emp."StructureName" AS "OrgName",
    emp."StaffUnitName" AS "StaffUnit",
    emp."FullName",
    pp."Id" AS "PersonId",
    emp."BranchId",
    emp."BusinessId"
   FROM ((("SEPTEM"."CRM_PhysicalPersonPrivileges" cppp
     JOIN "SEPTEM"."CRM_PhysicalPerson" pp ON ((cppp."PersonId" = pp."Id")))
     JOIN "SEPTEM"."VW_Employees" emp ON ((pp."Id" = emp."PersonId")))
     JOIN "SEPTEM"."REF_Privileges" rp ON ((cppp."PrivilegeId" = rp."Id")));

CREATE VIEW "SEPTEM"."VW_HR_EmployeeReplaceDayPayment" AS
 SELECT es."Id",
    es."PayedDays",
    es."Coefficient",
    es."DocsRepoId",
    es."EmployeeId",
    es."Description",
    hdr."DocDate",
    hdr."DocNumber",
    wfs."Code" AS "StatusCode"
   FROM ((("SEPTEM"."HR_EmployeeReplaceDayPayment" es
     JOIN "SEPTEM"."HR_DocsRepo" hdr ON ((hdr."Id" = es."DocsRepoId")))
     JOIN "SEPTEM"."WF_Work" ww ON ((ww."ProductId" = hdr."Id")))
     JOIN "SEPTEM"."WF_FlowStatus" wfs ON ((wfs."Id" = ww."CurrentStatusId")));

CREATE VIEW "SEPTEM"."VW_HR_EmployeeRestDays" AS
 SELECT herd."Id",
    herd."EmployeeId",
    herd."RestTypeId",
    herd."DocDate",
    herd."DocsRepoId",
    herd."CreateDate",
    rrt."Name" AS "RestTypeName",
    (rrt."Code")::integer AS "CodeInt",
    rrt."Code"
   FROM ("SEPTEM"."HR_EmployeeRestDays" herd
     JOIN "SEPTEM"."REF_RestTypes" rrt ON ((herd."RestTypeId" = rrt."Id")));

CREATE VIEW "SEPTEM"."VW_HR_EmployeeSalaryChangeLog" AS
 SELECT "HR_EmployeeSalaryLogs"."Id",
    "HR_EmployeeSalaryLogs"."EmployeeId",
    "HR_EmployeeSalaryLogs"."StartDate",
    "HR_EmployeeSalaryLogs"."EndDate",
    "HR_EmployeeSalaryLogs"."Salary",
    "HR_DocsRepo"."DocNumber",
    "HR_DocsRepo"."DocDate",
    "HR_DocsRepo"."DocTypes",
    emp."BusinessId"
   FROM (("SEPTEM"."HR_DocsRepo"
     JOIN "SEPTEM"."HR_EmployeeSalaryLogs" ON (("HR_DocsRepo"."Id" = "HR_EmployeeSalaryLogs"."DocsRepoId")))
     JOIN "SEPTEM"."HR_Employees" emp ON ((emp."Id" = "HR_EmployeeSalaryLogs"."EmployeeId")));

CREATE VIEW "SEPTEM"."VW_HR_EmployeeShifts" AS
 SELECT hes."Id",
    hes."CreatedDate",
    hes."Status",
    hes."Year",
    hes."MonthNumber",
    hes."Date",
    hes."MorningHour",
    hes."EveningHour",
    hes."BusinessId",
    hes."EmployeeId",
    emp."FullName",
    emp."AccountNumber",
    emp."StaffUnitName",
    hes."WorkDayInMonth",
    u."UserName",
    hes."LimitEveningHour",
    hes."LimitMorningHour"
   FROM (("SEPTEM"."HR_EmployeeShifts" hes
     JOIN "SEPTEM"."VW_Employees" emp ON ((hes."EmployeeId" = emp."Id")))
     LEFT JOIN "SEPTEM"."User" u ON ((emp."Id" = u."EmployeeId")));

CREATE VIEW "SEPTEM"."VW_HR_EmployeeSickList" AS
 SELECT esl."Id",
    dr."DocNumber",
    dr."DocDate",
    dr."DocTypes",
    emp."FullName",
    esl."StartDate",
    esl."EndDate",
    esl."Days",
    esl."EmployeeId",
    esl."DocsRepoId",
    emp."BusinessId",
    esl."FirstWorkDate",
    esl."IsContinious",
    COALESCE(pro."FirstWorkDate", esl."FirstWorkDate") AS "ProlongFirstWorkDate",
    esl."SickKind",
    esl."Year",
    esl."MonthNumber",
    COALESCE(pro."EndDate", esl."EndDate") AS "ProlongEndDate"
   FROM ((("SEPTEM"."HR_EmployeeSickList" esl
     LEFT JOIN ( SELECT pl."Id",
            pl."CollectionId",
            pl."Version",
            pl."Basis",
            pl."EndDate",
            pl."Days",
            pl."RealDays",
            pl."EmployeeId",
            pl."FirstWorkDate",
            pl."SickListId",
            pl."DocsRepoId",
            pl."StartDate",
            pl."CreatedUserId",
            pl."CreatedDate",
            pl."ModifiedUserId",
            pl."ModifiedDate",
            pl."IsContinious",
            pl."Month",
            pl."MonthNumber",
            pl."Year",
            pl.rn
           FROM ( SELECT "HR_EmployeeSickListProlong"."Id",
                    "HR_EmployeeSickListProlong"."CollectionId",
                    "HR_EmployeeSickListProlong"."Version",
                    "HR_EmployeeSickListProlong"."Basis",
                    "HR_EmployeeSickListProlong"."EndDate",
                    "HR_EmployeeSickListProlong"."Days",
                    "HR_EmployeeSickListProlong"."RealDays",
                    "HR_EmployeeSickListProlong"."EmployeeId",
                    "HR_EmployeeSickListProlong"."FirstWorkDate",
                    "HR_EmployeeSickListProlong"."SickListId",
                    "HR_EmployeeSickListProlong"."DocsRepoId",
                    "HR_EmployeeSickListProlong"."StartDate",
                    "HR_EmployeeSickListProlong"."CreatedUserId",
                    "HR_EmployeeSickListProlong"."CreatedDate",
                    "HR_EmployeeSickListProlong"."ModifiedUserId",
                    "HR_EmployeeSickListProlong"."ModifiedDate",
                    "HR_EmployeeSickListProlong"."IsContinious",
                    "HR_EmployeeSickListProlong"."Month",
                    "HR_EmployeeSickListProlong"."MonthNumber",
                    "HR_EmployeeSickListProlong"."Year",
                    row_number() OVER (PARTITION BY "HR_EmployeeSickListProlong"."SickListId" ORDER BY "HR_EmployeeSickListProlong"."EndDate" DESC) AS rn
                   FROM "SEPTEM"."HR_EmployeeSickListProlong") pl
          WHERE (pl.rn = 1)) pro ON ((pro."SickListId" = esl."Id")))
     JOIN "SEPTEM"."HR_DocsRepo" dr ON ((esl."DocsRepoId" = dr."Id")))
     JOIN "SEPTEM"."VW_Employees" emp ON ((esl."EmployeeId" = emp."Id")));

CREATE VIEW "SEPTEM"."VW_HR_EmployeeSocialVacations" AS
 SELECT soc."Id",
    dr."DocNumber",
    dr."DocDate",
    soc."StartDate",
    COALESCE(back."EndDate", prolong."EndDate", soc."EndDate") AS "EndDate",
    soc."EmployeeId",
    soc."DocsRepoId",
    soc."FirstWorkDate"
   FROM (((("SEPTEM"."HR_EmployeeSocialVacations" soc
     JOIN "SEPTEM"."HR_DocsRepo" dr ON ((dr."Id" = soc."DocsRepoId")))
     LEFT JOIN "SEPTEM"."HR_EmployeeSocialVacationProlong" prolong ON ((soc."Id" = prolong."EmployeeSocialVacationId")))
     LEFT JOIN "SEPTEM"."HR_EmployeeSocialVacationBack" back ON ((soc."Id" = back."EmployeeSocialVacationId")))
     LEFT JOIN "SEPTEM"."VW_HR_DocsRepoFlow" flow ON (((dr."DocNumber")::text = (flow."DocNumber")::text)))
  WHERE (((flow."DocTypes")::text = 'SocialVacation'::text) AND ((flow."WorkCurrentStatusCode")::text = 'NEW'::text) AND (flow."UserId" IS NOT NULL));

CREATE VIEW "SEPTEM"."VW_HR_EmployeeStaffUnitLog" AS
 SELECT log."Id",
    log."StaffUnitId",
    st."BranchId",
    st."OrganizationStructureId",
    st."Name",
    types."Id" AS "StaffTypeId",
    types."VacDayLimit",
    log."StartDate",
    log."EndDate",
    log."EmployeeId",
    emp."BusinessId",
    cpp."AccountNumber"
   FROM (((("SEPTEM"."HR_EmployeeStaffUnitLog" log
     JOIN "SEPTEM"."HR_Employees" emp ON ((emp."Id" = log."EmployeeId")))
     JOIN "SEPTEM"."HR_StaffUnits" st ON ((st."Id" = log."StaffUnitId")))
     JOIN "SEPTEM"."HR_StaffTypes" types ON ((types."Id" = st."StaffTypeId")))
     JOIN "SEPTEM"."CRM_PhysicalPerson" cpp ON ((cpp."Id" = emp."PersonId")));

CREATE VIEW "SEPTEM"."VW_HR_EmployeeSubsidy" AS
 SELECT es."Id",
    es."Amount",
    es."DocsRepoId",
    es."Basis",
    es."EmployeeId",
    es."Description",
    hdr."DocDate",
    hdr."DocNumber",
    wfs."Code" AS "StatusCode",
    'SubsidyType'::text AS "SubsidyType"
   FROM ((("SEPTEM"."HR_EmployeeSubsidy" es
     JOIN "SEPTEM"."HR_DocsRepo" hdr ON ((hdr."Id" = es."DocsRepoId")))
     JOIN "SEPTEM"."WF_Work" ww ON ((ww."ProductId" = hdr."Id")))
     JOIN "SEPTEM"."WF_FlowStatus" wfs ON ((wfs."Id" = ww."CurrentStatusId")));

CREATE VIEW "SEPTEM"."VW_HR_EmployeeUnPaidVacations" AS
 SELECT unpaid."Id",
    dr."DocNumber",
    dr."DocDate",
    unpaid."StartDate",
    COALESCE(unpaidback."EndDate", unpaid."EndDate") AS "EndDate",
    unpaid."EmployeeId",
    unpaid."DocsRepoId",
    unpaid."Days"
   FROM ((("SEPTEM"."HR_EmployeeUnPaidVacations" unpaid
     JOIN "SEPTEM"."HR_DocsRepo" dr ON ((dr."Id" = unpaid."DocsRepoId")))
     LEFT JOIN "SEPTEM"."HR_EmployeeUnPaidVacationBack" unpaidback ON ((unpaidback."EmployeeUnPaidVacationId" = unpaid."Id")))
     LEFT JOIN "SEPTEM"."VW_HR_DocsRepoFlow" flow ON (((dr."DocNumber")::text = (flow."DocNumber")::text)))
  WHERE (((flow."DocTypes")::text = 'UnpaidVacation'::text) AND ((flow."WorkCurrentStatusCode")::text = 'NEW'::text) AND (flow."UserId" IS NOT NULL));

CREATE VIEW "SEPTEM"."VW_HR_EmployeeVacationDays" AS
 SELECT vr."Id",
    vr."BusinessId",
    em."FullName",
    em."AccountNumber",
    em."StartDate",
    vr."Period",
    vr."Residue" AS "PeriodResidue",
    date_part('month'::text, em."StartDate") AS "Month",
    (((12)::numeric)::double precision - date_part('month'::text, em."StartDate")) AS "ResidueMonth",
    NULL::text AS "BaseDay",
    (((vr."Residue" / (12)::numeric))::double precision * (((12)::numeric)::double precision - date_part('month'::text, em."StartDate"))) AS "CurrentYearResidue",
    ((vr."Residue")::double precision + (((vr."Residue" / (12)::numeric))::double precision * (((12)::numeric)::double precision - date_part('month'::text, em."StartDate")))) AS "AllYearResideu",
    NULL::text AS "IsUsedDayOf14",
    NULL::text AS "ExperienceDay",
    vr."DayForChild",
    NULL::text AS "TotalDay",
    em."EndDate",
    em."BranchId",
    em."StaffUnitName"
   FROM ("SEPTEM"."HR_EmployeeVacationJob" vr
     RIGHT JOIN "SEPTEM"."VW_Employees" em ON ((em."Id" = vr."EmployeeId")));

CREATE VIEW "SEPTEM"."VW_HR_EmployeeVacationJob" AS
 SELECT vj."Id",
    vj."BusinessId",
    vj."Period",
    vj."Year",
    vj."GenaralVacDays",
    vj."VacAddDays",
    NULL::numeric(18,2) AS "Taken",
    vj."UsedVacDays",
    vj."Residue",
    vj."AnualStartDate",
    ((vj."AnualStartDate" + '1 year'::interval))::date AS "AnualEndDate",
    vj."EmployeeId",
    vj."CollectionId",
    vj."Version",
    em."BranchId",
    false AS "IsUsedDayOf14",
    NULL::integer AS "BaseDay",
    NULL::integer AS "ExperienceDay",
    vj."DayForChild",
    NULL::integer AS "CurrentYearResidue",
    NULL::integer AS "TotalDay",
    date_part('month'::text, em."StartDate") AS "Month",
    (((12)::numeric(9,2))::double precision - date_part('month'::text, em."StartDate")) AS "ResidueMonth",
    vj."AverageAmount",
    vj."CurrentResidueBaseVac",
    NULL::numeric(18,2) AS "CurrentAverageAmount"
   FROM ("SEPTEM"."HR_EmployeeVacationJob" vj
     RIGHT JOIN "SEPTEM"."VW_Employees" em ON ((em."Id" = vj."EmployeeId")));

CREATE VIEW "SEPTEM"."VW_HR_EmployeeVacationReport" AS
 SELECT vr."Id",
    vr."BusinessId",
    em."FullName",
    em."AccountNumber",
    em."StartDate" AS "AnualStartDate",
    vr."Period",
    date_part('month'::text, em."StartDate") AS "Month",
    (((12)::numeric)::double precision - date_part('month'::text, em."StartDate")) AS "ResidueMonth",
    NULL::text AS "ExperienceDay",
    NULL::text AS "BaseDay",
    vr."DayForChild",
    NULL::text AS "Total",
    NULL::text AS "CurrentYearResidue",
    NULL::text AS "AllYearResideu",
    em."StaffUnitName",
    false AS "IsUsedDayOf14",
    ((vr."AnualStartDate" + '1 year'::interval))::date AS "AnualEndDate",
    vr."EmployeeId",
    em."BranchId"
   FROM ("SEPTEM"."HR_EmployeeVacationJob" vr
     RIGHT JOIN "SEPTEM"."VW_Employees" em ON ((em."Id" = vr."EmployeeId")));

CREATE VIEW "SEPTEM"."VW_HR_OrganizationStructureAll" AS
 SELECT org."Id",
    br."Name" AS "BranchName",
    "HR_Structures"."Name" AS "StructureName",
    _str."Name" AS "ParentName",
    org."IsActive",
    org."StructureId",
    org."BranchId",
    org."OrganizationStructureId" AS "ParentId",
    org."BusinessId",
    org."Budget",
    org."CreatedDate",
    org."CreatedUserId",
    org."ModifiedUserId",
    org."ModifiedDate",
    org."CuratorId",
    (((((cpp."Name")::text || ' '::text) || (cpp."Surname")::text) || ' '::text) || (cpp."Patronymic")::text) AS "CuratorName",
    org."ParentName" AS "FullParentName",
    NULL::text AS "StructureCuration"
   FROM ((((((("SEPTEM"."HR_OrganizationStructure" org
     JOIN "SEPTEM"."HR_Branches" br ON ((br."Id" = org."BranchId")))
     JOIN "SEPTEM"."HR_Structures" ON (("HR_Structures"."Id" = org."StructureId")))
     LEFT JOIN "SEPTEM"."HR_OrganizationStructure" horg ON ((horg."Id" = org."OrganizationStructureId")))
     LEFT JOIN "SEPTEM"."HR_Branches" _br ON ((_br."Id" = horg."BranchId")))
     LEFT JOIN "SEPTEM"."HR_Structures" _str ON ((_str."Id" = horg."StructureId")))
     LEFT JOIN "SEPTEM"."HR_Employees" he ON ((he."Id" = org."CuratorId")))
     LEFT JOIN "SEPTEM"."CRM_PhysicalPerson" cpp ON ((cpp."Id" = he."PersonId")));

CREATE VIEW "SEPTEM"."VW_HR_RecievedEmployeeHandover" AS
 SELECT DISTINCT reh."Id",
    reh."EmployeeId",
    reh."CollectionId",
    reh."StartDate",
    reh."EndDate"
   FROM ("SEPTEM"."HR_RecievedEmployeeHandover" reh
     LEFT JOIN "SEPTEM"."HR_EmployeeHandover" eh ON ((eh."RecievedEmployeeHandoverCollectionId" = reh."CollectionId")));

CREATE VIEW "SEPTEM"."VW_HR_SickListReport" AS
 SELECT "VW_Employees"."FullName",
    "VW_Employees"."BranchName",
    "VW_Employees"."StructureName",
    "VW_Employees"."StaffUnitName",
    "HR_EmployeeSickList"."StartDate",
    "HR_EmployeeSickList"."EndDate",
    "HR_EmployeeSickList"."FirstWorkDate",
    "HR_EmployeeSickList"."RealDays",
    "HR_EmployeeSickList"."Days",
    "HR_EmployeeSickList"."SickType",
    "VW_Employees"."EndDate" AS "empEndDate",
    "HR_EmployeeSickList"."Id",
    "VW_Employees"."BusinessId",
    "VW_Employees"."AccountNumber",
    "HR_EmployeeSickList"."SickKind"
   FROM ("SEPTEM"."HR_EmployeeSickList"
     JOIN "SEPTEM"."VW_Employees" ON (("HR_EmployeeSickList"."EmployeeId" = "VW_Employees"."Id")));

CREATE VIEW "SEPTEM"."VW_HR_StaffUnitLogReport" AS
 SELECT DISTINCT "VW_Employees"."Id",
    esul."Id" AS "LogId",
    "VW_Employees"."FullName",
    docs."DocDate",
    docs."DocNumber",
    esul."StaffUnitId",
    esul."StartDate",
    esul."EndDate",
    "HR_StaffUnits"."Name",
    "HR_StaffUnits"."OrganizationStructureId",
    "HR_StaffUnits"."BranchId",
    "VW_Employees"."BranchName",
    "VW_Employees"."StructureName",
    "VW_Employees"."BusinessId",
    "VW_Employees"."AccountNumber",
    esul."EmployeeId",
    esul."StartDate" AS "PositionChangeDate",
    docs."DocTypes",
    esl."Salary" AS "CurrentSalary",
    COALESCE(( SELECT esl2."Salary"
           FROM "SEPTEM"."HR_EmployeeSalaryLogs" esl2
          WHERE ((esl2."EmployeeId" = esul."EmployeeId") AND (esl2."StartDate" < esul."StartDate"))
          ORDER BY esl2."StartDate" DESC
         LIMIT 1), NULL::numeric) AS "PreviousSalary",
    esl."StartDate" AS "SalaryChangeDate"
   FROM ((((("SEPTEM"."HR_EmployeeStaffUnitLog" esul
     LEFT JOIN "SEPTEM"."HR_StaffUnits" ON (("HR_StaffUnits"."Id" = esul."StaffUnitId")))
     RIGHT JOIN "SEPTEM"."VW_Employees" ON (("VW_Employees"."Id" = esul."EmployeeId")))
     JOIN "SEPTEM"."HR_DocsRepo" docs ON ((docs."Id" = esul."DocsRepoId")))
     LEFT JOIN "SEPTEM"."HR_EmployeeContractChange" contractchange ON (((contractchange."EmployeeId" = esul."EmployeeId") AND (contractchange."WithPositionChange" = true))))
     LEFT JOIN "SEPTEM"."HR_EmployeeSalaryLogs" esl ON ((esl."DocsRepoId" = esul."DocsRepoId")))
  WHERE ((docs."DocTypes")::text = ANY (ARRAY[('PositionChange'::character varying)::text, ('EmployeeContractChange'::character varying)::text]));

CREATE VIEW "SEPTEM"."VW_NormativeAccess" AS
 SELECT hna."Id",
    hna."Id" AS "NormativeAccessId",
    hna."NormativeId",
    hnaei."EmployeeId",
    hnaei."Id" AS "NormativeAccessEmployeeItemId",
    NULL::uuid AS "NormativeAccessStaffTypeItemId",
    NULL::uuid AS "StaffTypeId",
    hnaei."Description",
    hn."StartDate",
    hn."EndDate",
    emp."FullName",
    hna."AllAccept"
   FROM ((("SEPTEM"."HR_NormativeAccess" hna
     LEFT JOIN "SEPTEM"."HR_NormativeAccessEmployeeItem" hnaei ON ((hna."Id" = hnaei."NormativeAccessId")))
     LEFT JOIN "SEPTEM"."HR_Normatives" hn ON ((hna."NormativeId" = hn."Id")))
     LEFT JOIN "SEPTEM"."VW_Employees" emp ON ((hnaei."EmployeeId" = emp."Id")))
  WHERE (hnaei."EmployeeId" IS NOT NULL)
UNION
 SELECT hna."Id",
    hna."Id" AS "NormativeAccessId",
    hna."NormativeId",
    NULL::uuid AS "EmployeeId",
    NULL::uuid AS "NormativeAccessEmployeeItemId",
    hnasti."Id" AS "NormativeAccessStaffTypeItemId",
    hnasti."StaffTypeId",
    hnasti."Description",
    hn."StartDate",
    hn."EndDate",
    NULL::text AS "FullName",
    hna."AllAccept"
   FROM (("SEPTEM"."HR_NormativeAccess" hna
     LEFT JOIN "SEPTEM"."HR_NormativeAccessStaffTypeItem" hnasti ON ((hna."Id" = hnasti."NormativeAccessId")))
     LEFT JOIN "SEPTEM"."HR_Normatives" hn ON ((hna."NormativeId" = hn."Id")))
  WHERE (hnasti."Id" IS NOT NULL)
UNION
 SELECT hna."Id",
    hna."Id" AS "NormativeAccessId",
    hna."NormativeId",
    NULL::uuid AS "EmployeeId",
    NULL::uuid AS "NormativeAccessEmployeeItemId",
    NULL::uuid AS "NormativeAccessStaffTypeItemId",
    NULL::uuid AS "StaffTypeId",
    NULL::character varying(250) AS "Description",
    hn."StartDate",
    hn."EndDate",
    NULL::text AS "FullName",
    hna."AllAccept"
   FROM ("SEPTEM"."HR_NormativeAccess" hna
     LEFT JOIN "SEPTEM"."HR_Normatives" hn ON ((hna."NormativeId" = hn."Id")))
  WHERE ((hna."AllAccept" = true) AND (NOT (EXISTS ( SELECT 1
           FROM "SEPTEM"."HR_NormativeAccessEmployeeItem" ei
          WHERE (ei."NormativeAccessId" = hna."Id")))) AND (NOT (EXISTS ( SELECT 1
           FROM "SEPTEM"."HR_NormativeAccessStaffTypeItem" si
          WHERE (si."NormativeAccessId" = hna."Id")))));

CREATE VIEW "SEPTEM"."VW_HR_UserNormativeAccess" AS
 WITH base AS (
         SELECT na."NormativeId",
            na."EmployeeId",
            na."StaffTypeId",
            na."AllAccept",
            na."StartDate",
            na."EndDate",
            n."Subject"
           FROM ("SEPTEM"."VW_NormativeAccess" na
             JOIN "SEPTEM"."HR_Normatives" n ON ((n."Id" = na."NormativeId")))
        )
 SELECT gen_random_uuid() AS "Id",
    u."Id" AS "UserId",
    b."NormativeId",
    b."EmployeeId",
    b."StaffTypeId",
    b."Subject",
    b."StartDate",
    b."EndDate"
   FROM (base b
     JOIN "SEPTEM"."User" u ON ((u."EmployeeId" = b."EmployeeId")))
  WHERE (b."EmployeeId" IS NOT NULL)
UNION ALL
 SELECT gen_random_uuid() AS "Id",
    u."Id" AS "UserId",
    b."NormativeId",
    u."EmployeeId",
    NULL::uuid AS "StaffTypeId",
    b."Subject",
    b."StartDate",
    b."EndDate"
   FROM (base b
     CROSS JOIN "SEPTEM"."User" u)
  WHERE (b."AllAccept" = true)
UNION ALL
 SELECT gen_random_uuid() AS "Id",
    u."Id" AS "UserId",
    b."NormativeId",
    u."EmployeeId",
    b."StaffTypeId",
    b."Subject",
    b."StartDate",
    b."EndDate"
   FROM ((base b
     JOIN "SEPTEM"."VW_Employees" e ON ((e."StaffTypeId" = b."StaffTypeId")))
     JOIN "SEPTEM"."User" u ON ((u."EmployeeId" = e."Id")))
  WHERE (b."StaffTypeId" IS NOT NULL);

CREATE VIEW "SEPTEM"."VW_HR_WorkOrWeekends" AS
 SELECT weeknd."Id",
    weeknd."DocsRepoId",
    weeknd."EmployeeId",
    weeknd."StartDate",
    weeknd."EndDate",
    weeknd."FirstWorkDate",
    NULL::date AS "BackDate",
    repo."DocDate",
    weeknd."Type",
    weeknd."DontChargeSalary",
    weeknd."IsIndefinitely",
    weeknd."WorkDayOrNotId",
    repo."DocNumber"
   FROM ("SEPTEM"."HR_WorkOrWeekends" weeknd
     JOIN "SEPTEM"."HR_DocsRepo" repo ON ((weeknd."DocsRepoId" = repo."Id")));

CREATE VIEW "SEPTEM"."VW_HR_WorkReportItemsView" AS
 SELECT wr."Id",
    wri."Id" AS "ItemId",
    wri."Day",
    wri."WorkStatus"
   FROM ("SEPTEM"."WorkReports" wr
     JOIN "SEPTEM"."WorkReportItems" wri ON ((wr."WorkReportItemCollectionId" = wri."CollectionId")));

CREATE VIEW "SEPTEM"."VW_Operation" AS
 SELECT po."Id",
    po."DocType",
    po."EmployeeId",
    ve."FullName",
    po."DocsRepoId",
    po."OperationItemId",
    po."Status",
    po."Year",
    po."MonthNumber",
    hdr."DocNumber",
    hdr."DocDate"
   FROM (("SEPTEM"."PR_Operation" po
     JOIN "SEPTEM"."HR_DocsRepo" hdr ON ((po."DocsRepoId" = hdr."Id")))
     JOIN "SEPTEM"."VW_Employees" ve ON ((po."EmployeeId" = ve."Id")));

CREATE VIEW "SEPTEM"."VW_PO_PermissionsFlow" AS
 SELECT "Assignes"."UserId",
    "Assignes"."WorkId",
    "Assignes"."Operation",
    "Assignes"."ProductTypeName" AS "ProductType",
    "Assignes"."WorkCurrentStatusId",
    "Assignes"."WorkCurrentStatusName",
    "Assignes"."WorkCurrentStatusCode",
    "Assignes"."StatusCanEdit",
    "Assignes"."StatusCanDelete",
    "Assignes"."StatusCanPrint",
    po."Id",
    po."Hour",
    po."Date",
    po."IsOverTime",
    po."IsVacationDay",
    po."ConfirmedUserId",
    po."EmployeeId",
    po."OverTimeDate",
    po."Cause",
    po."Description",
    po."StartTime",
    po."EndTime",
    po."BusinessId",
    po."CreatedUserId",
    po."CreatedDate",
    emp."FullName",
    concat(confirmedu."FirstName", ' ', confirmedu."LastName") AS "ConfirmedUserName"
   FROM ((((("SEPTEM"."PO_Permissions" po
     LEFT JOIN "SEPTEM"."User" cu ON ((po."CreatedUserId" = cu."Id")))
     JOIN "SEPTEM"."VW_WF_AssignedWorkAllActive" "Assignes" ON ((po."Id" = "Assignes"."ProductId")))
     LEFT JOIN "SEPTEM"."User" u ON ((u."Id" = po."CreatedUserId")))
     JOIN "SEPTEM"."VW_EmployeesSimple" emp ON ((emp."Id" = u."EmployeeId")))
     LEFT JOIN "SEPTEM"."User" confirmedu ON ((po."ConfirmedUserId" = confirmedu."Id")));

CREATE VIEW "SEPTEM"."VW_PO_PermissionsStatuses" AS
 SELECT po."Id",
    po."CreatedUserId" AS "EmployeeId",
    po."Date",
    po."Hour",
    wfs."Name",
    wfs."Code"
   FROM (("SEPTEM"."PO_Permissions" po
     JOIN "SEPTEM"."WF_Work" ww ON ((po."Id" = ww."ProductId")))
     JOIN "SEPTEM"."WF_FlowStatus" wfs ON ((wfs."Id" = ww."CurrentStatusId")));

CREATE VIEW "SEPTEM"."VW_PR_EmployeeAverageAmounts" AS
 SELECT j."Id",
    j."EmployeeId",
    ve."AccountNumber",
    ve."StructureName",
    ve."StaffUnitName",
    j."Residue",
    ap."Amount",
    (j."Residue" * ap."Amount") AS "TotalAmount",
    ve."BusinessId",
    ve."FullName",
    j."Period",
    j."Year",
    j."AnualStartDate"
   FROM (("SEPTEM"."HR_EmployeeVacationJob" j
     JOIN "SEPTEM"."VW_Employees" ve ON ((ve."Id" = j."EmployeeId")))
     JOIN "SEPTEM"."PR_EmployeeAverageAmounts" ap ON ((ap."EmployeeId" = ve."Id")))
  WHERE (j."Residue" > (0)::numeric);

CREATE VIEW "SEPTEM"."VW_PR_LifeInsurance" AS
 SELECT pli."Id",
    pli."EmployeeId",
    pli."StartDate",
    pli."EndDate",
    pli."ContractNumber",
    pli."Description",
    pli."BusinessId",
    pli."Status",
    pli."Code",
    plii."Year",
    plii."MonthNumber",
    plii."AteshgahAward",
    plii."AteshgahBonus",
    plii."AteshgahSalary",
    plii."PashaAward",
    plii."PashaBonus",
    plii."PashaSalary",
    ve."FullName",
    ve."AccountNumber",
    pli."Id" AS "LifeInsuranceId"
   FROM (("SEPTEM"."PR_LifeInsurance" pli
     LEFT JOIN "SEPTEM"."PR_LifeInsuranceItem" plii ON ((plii."LifeInsuranceId" = pli."Id")))
     JOIN "SEPTEM"."VW_Employees" ve ON ((ve."Id" = pli."EmployeeId")));

CREATE VIEW "SEPTEM"."VW_PR_MonthlyPayments" AS
 SELECT p."Id",
    p."CreatedDate",
    p."Year",
    p."MonthNumber",
    p."PaymentType",
    p."Description",
    p."Amount",
    p."PaidAmount",
    p."EmployeeId",
    p."BusinessId",
    p."DocumentId",
    ve."AccountNumber",
    ve."FullName",
    p."Status"
   FROM ("SEPTEM"."PR_MonthlyPayments" p
     JOIN "SEPTEM"."VW_Employees" ve ON ((ve."Id" = p."EmployeeId")));

CREATE VIEW "SEPTEM"."VW_PR_NotWorkedDayReport" AS
 SELECT gen_random_uuid() AS "Id",
    emp."BusinessId",
    xx."EmployeeId",
    xx."Year",
    xx."DocTypes",
    emp."FullName",
    emp."Uid",
    emp."SocialCard",
    emp."AccountNumber",
    contype."Name" AS "ConfigureName",
    xx."Jan",
    xx."Feb",
    xx."Mar",
    xx."Apr",
    xx."May",
    xx."Jun",
    xx."Jul",
    xx."Aug",
    xx."Sep",
    xx."Oct",
    xx."Nov",
    xx."Dec"
   FROM (((( SELECT heh."EmployeeId",
            EXTRACT(year FROM heh."StartDate") AS "Year",
            'Hire'::text AS "DocTypes",
                CASE
                    WHEN (EXTRACT(month FROM heh."StartDate") > (1)::numeric) THEN (31)::numeric
                    WHEN (EXTRACT(month FROM heh."StartDate") = (1)::numeric) THEN (EXTRACT(day FROM heh."StartDate") - (1)::numeric)
                    ELSE (0)::numeric
                END AS "Jan",
                CASE
                    WHEN (EXTRACT(month FROM heh."StartDate") > (2)::numeric) THEN EXTRACT(day FROM (date_trunc('month'::text, (date_trunc('year'::text, heh."StartDate") + '1 mon'::interval)) + '1 mon -1 days'::interval))
                    WHEN (EXTRACT(month FROM heh."StartDate") = (2)::numeric) THEN (EXTRACT(day FROM heh."StartDate") - (1)::numeric)
                    ELSE (0)::numeric
                END AS "Feb",
                CASE
                    WHEN (EXTRACT(month FROM heh."StartDate") > (3)::numeric) THEN (31)::numeric
                    WHEN (EXTRACT(month FROM heh."StartDate") = (3)::numeric) THEN (EXTRACT(day FROM heh."StartDate") - (1)::numeric)
                    ELSE (0)::numeric
                END AS "Mar",
                CASE
                    WHEN (EXTRACT(month FROM heh."StartDate") > (4)::numeric) THEN (30)::numeric
                    WHEN (EXTRACT(month FROM heh."StartDate") = (4)::numeric) THEN (EXTRACT(day FROM heh."StartDate") - (1)::numeric)
                    ELSE (0)::numeric
                END AS "Apr",
                CASE
                    WHEN (EXTRACT(month FROM heh."StartDate") > (5)::numeric) THEN (31)::numeric
                    WHEN (EXTRACT(month FROM heh."StartDate") = (5)::numeric) THEN (EXTRACT(day FROM heh."StartDate") - (1)::numeric)
                    ELSE (0)::numeric
                END AS "May",
                CASE
                    WHEN (EXTRACT(month FROM heh."StartDate") > (6)::numeric) THEN (30)::numeric
                    WHEN (EXTRACT(month FROM heh."StartDate") = (6)::numeric) THEN (EXTRACT(day FROM heh."StartDate") - (1)::numeric)
                    ELSE (0)::numeric
                END AS "Jun",
                CASE
                    WHEN (EXTRACT(month FROM heh."StartDate") > (7)::numeric) THEN (31)::numeric
                    WHEN (EXTRACT(month FROM heh."StartDate") = (7)::numeric) THEN (EXTRACT(day FROM heh."StartDate") - (1)::numeric)
                    ELSE (0)::numeric
                END AS "Jul",
                CASE
                    WHEN (EXTRACT(month FROM heh."StartDate") > (8)::numeric) THEN (31)::numeric
                    WHEN (EXTRACT(month FROM heh."StartDate") = (8)::numeric) THEN (EXTRACT(day FROM heh."StartDate") - (1)::numeric)
                    ELSE (0)::numeric
                END AS "Aug",
                CASE
                    WHEN (EXTRACT(month FROM heh."StartDate") > (9)::numeric) THEN (30)::numeric
                    WHEN (EXTRACT(month FROM heh."StartDate") = (9)::numeric) THEN (EXTRACT(day FROM heh."StartDate") - (1)::numeric)
                    ELSE (0)::numeric
                END AS "Sep",
                CASE
                    WHEN (EXTRACT(month FROM heh."StartDate") > (10)::numeric) THEN (31)::numeric
                    WHEN (EXTRACT(month FROM heh."StartDate") = (10)::numeric) THEN (EXTRACT(day FROM heh."StartDate") - (1)::numeric)
                    ELSE (0)::numeric
                END AS "Oct",
                CASE
                    WHEN (EXTRACT(month FROM heh."StartDate") > (11)::numeric) THEN (30)::numeric
                    WHEN (EXTRACT(month FROM heh."StartDate") = (11)::numeric) THEN (EXTRACT(day FROM heh."StartDate") - (1)::numeric)
                    ELSE (0)::numeric
                END AS "Nov",
                CASE
                    WHEN (EXTRACT(month FROM heh."StartDate") = (12)::numeric) THEN (EXTRACT(day FROM heh."StartDate") - (1)::numeric)
                    ELSE (0)::numeric
                END AS "Dec"
           FROM ("SEPTEM"."HR_EmployeeHire" heh
             JOIN "SEPTEM"."HR_DocsRepo" hdr ON ((hdr."Id" = heh."DocsRepoId")))
        UNION ALL
         SELECT heh."EmployeeId",
            EXTRACT(year FROM heh."DismissalDate") AS "Year",
            hdr."DocTypes",
                CASE
                    WHEN (EXTRACT(month FROM heh."DismissalDate") = (1)::numeric) THEN (EXTRACT(day FROM (date_trunc('month'::text, heh."DismissalDate") + '1 mon -1 days'::interval)) - EXTRACT(day FROM heh."DismissalDate"))
                    WHEN (EXTRACT(month FROM heh."DismissalDate") > (1)::numeric) THEN (31)::numeric
                    ELSE (0)::numeric
                END AS "Jan",
                CASE
                    WHEN (EXTRACT(month FROM heh."DismissalDate") = (2)::numeric) THEN (EXTRACT(day FROM (date_trunc('month'::text, heh."DismissalDate") + '1 mon -1 days'::interval)) - EXTRACT(day FROM heh."DismissalDate"))
                    WHEN (EXTRACT(month FROM heh."DismissalDate") > (2)::numeric) THEN EXTRACT(day FROM (date_trunc('month'::text, (date_trunc('year'::text, heh."DismissalDate") + '1 mon'::interval)) + '1 mon -1 days'::interval))
                    ELSE (0)::numeric
                END AS "Feb",
                CASE
                    WHEN (EXTRACT(month FROM heh."DismissalDate") = (3)::numeric) THEN ((31)::numeric - EXTRACT(day FROM heh."DismissalDate"))
                    WHEN (EXTRACT(month FROM heh."DismissalDate") > (3)::numeric) THEN (31)::numeric
                    ELSE (0)::numeric
                END AS "Mar",
                CASE
                    WHEN (EXTRACT(month FROM heh."DismissalDate") = (4)::numeric) THEN ((30)::numeric - EXTRACT(day FROM heh."DismissalDate"))
                    WHEN (EXTRACT(month FROM heh."DismissalDate") > (4)::numeric) THEN (30)::numeric
                    ELSE (0)::numeric
                END AS "Apr",
                CASE
                    WHEN (EXTRACT(month FROM heh."DismissalDate") = (5)::numeric) THEN ((31)::numeric - EXTRACT(day FROM heh."DismissalDate"))
                    WHEN (EXTRACT(month FROM heh."DismissalDate") > (5)::numeric) THEN (31)::numeric
                    ELSE (0)::numeric
                END AS "May",
                CASE
                    WHEN (EXTRACT(month FROM heh."DismissalDate") = (6)::numeric) THEN ((30)::numeric - EXTRACT(day FROM heh."DismissalDate"))
                    WHEN (EXTRACT(month FROM heh."DismissalDate") > (6)::numeric) THEN (30)::numeric
                    ELSE (0)::numeric
                END AS "Jun",
                CASE
                    WHEN (EXTRACT(month FROM heh."DismissalDate") = (7)::numeric) THEN ((31)::numeric - EXTRACT(day FROM heh."DismissalDate"))
                    WHEN (EXTRACT(month FROM heh."DismissalDate") > (7)::numeric) THEN (31)::numeric
                    ELSE (0)::numeric
                END AS "Jul",
                CASE
                    WHEN (EXTRACT(month FROM heh."DismissalDate") = (8)::numeric) THEN ((31)::numeric - EXTRACT(day FROM heh."DismissalDate"))
                    WHEN (EXTRACT(month FROM heh."DismissalDate") > (8)::numeric) THEN (31)::numeric
                    ELSE (0)::numeric
                END AS "Aug",
                CASE
                    WHEN (EXTRACT(month FROM heh."DismissalDate") = (9)::numeric) THEN ((30)::numeric - EXTRACT(day FROM heh."DismissalDate"))
                    WHEN (EXTRACT(month FROM heh."DismissalDate") > (9)::numeric) THEN (30)::numeric
                    ELSE (0)::numeric
                END AS "Sep",
                CASE
                    WHEN (EXTRACT(month FROM heh."DismissalDate") = (10)::numeric) THEN ((31)::numeric - EXTRACT(day FROM heh."DismissalDate"))
                    WHEN (EXTRACT(month FROM heh."DismissalDate") > (10)::numeric) THEN (31)::numeric
                    ELSE (0)::numeric
                END AS "Oct",
                CASE
                    WHEN (EXTRACT(month FROM heh."DismissalDate") = (11)::numeric) THEN ((30)::numeric - EXTRACT(day FROM heh."DismissalDate"))
                    WHEN (EXTRACT(month FROM heh."DismissalDate") > (11)::numeric) THEN (30)::numeric
                    ELSE (0)::numeric
                END AS "Nov",
                CASE
                    WHEN (EXTRACT(month FROM heh."DismissalDate") = (12)::numeric) THEN ((31)::numeric - EXTRACT(day FROM heh."DismissalDate"))
                    ELSE (0)::numeric
                END AS "Dec"
           FROM ("SEPTEM"."HR_EmployeeDismissal" heh
             JOIN "SEPTEM"."HR_DocsRepo" hdr ON ((hdr."Id" = heh."DocsRepoId")))
        UNION ALL
         SELECT hewd."EmployeeId",
            EXTRACT(year FROM hewd."Date") AS "Year",
            hdr."DocTypes",
            count(
                CASE
                    WHEN (EXTRACT(month FROM hewd."Date") = (1)::numeric) THEN 1
                    ELSE NULL::integer
                END) AS "Jan",
            count(
                CASE
                    WHEN (EXTRACT(month FROM hewd."Date") = (2)::numeric) THEN 1
                    ELSE NULL::integer
                END) AS "Feb",
            count(
                CASE
                    WHEN (EXTRACT(month FROM hewd."Date") = (3)::numeric) THEN 1
                    ELSE NULL::integer
                END) AS "Mar",
            count(
                CASE
                    WHEN (EXTRACT(month FROM hewd."Date") = (4)::numeric) THEN 1
                    ELSE NULL::integer
                END) AS "Apr",
            count(
                CASE
                    WHEN (EXTRACT(month FROM hewd."Date") = (5)::numeric) THEN 1
                    ELSE NULL::integer
                END) AS "May",
            count(
                CASE
                    WHEN (EXTRACT(month FROM hewd."Date") = (6)::numeric) THEN 1
                    ELSE NULL::integer
                END) AS "Jun",
            count(
                CASE
                    WHEN (EXTRACT(month FROM hewd."Date") = (7)::numeric) THEN 1
                    ELSE NULL::integer
                END) AS "Jul",
            count(
                CASE
                    WHEN (EXTRACT(month FROM hewd."Date") = (8)::numeric) THEN 1
                    ELSE NULL::integer
                END) AS "Aug",
            count(
                CASE
                    WHEN (EXTRACT(month FROM hewd."Date") = (9)::numeric) THEN 1
                    ELSE NULL::integer
                END) AS "Sep",
            count(
                CASE
                    WHEN (EXTRACT(month FROM hewd."Date") = (10)::numeric) THEN 1
                    ELSE NULL::integer
                END) AS "Oct",
            count(
                CASE
                    WHEN (EXTRACT(month FROM hewd."Date") = (11)::numeric) THEN 1
                    ELSE NULL::integer
                END) AS "Nov",
            count(
                CASE
                    WHEN (EXTRACT(month FROM hewd."Date") = (12)::numeric) THEN 1
                    ELSE NULL::integer
                END) AS "Dec"
           FROM ("SEPTEM"."HR_EmployeeWorkedDays" hewd
             JOIN "SEPTEM"."HR_DocsRepo" hdr ON ((hdr."Id" = hewd."DocsRepoId")))
          WHERE ((hewd."IsNonWorkingDay" = false) AND (hewd."IsDeleted" = false))
          GROUP BY hewd."EmployeeId", (EXTRACT(year FROM hewd."Date")), hdr."DocTypes") xx
     JOIN "SEPTEM"."VW_Employees" emp ON ((emp."Id" = xx."EmployeeId")))
     JOIN "SEPTEM"."PR_NotWorkReportConfigure" con ON (((con."DocType")::text = xx."DocTypes")))
     JOIN "SEPTEM"."PR_NotWorkTypes" contype ON ((contype."Id" = con."NotWorkTypeId")));

CREATE VIEW "SEPTEM"."VW_PR_PayedTransactionPaymentLogs" AS
 SELECT pp."Id",
    ve."FullName",
    pl."EmployeeId",
    p."Id" AS "PayedTransactionId",
    pl."TxFid",
    p."Status",
    p."Year",
    p."MonthNumber",
    pl."Status" AS "TransactionStatus",
    pl."CustomerId",
    pl."CustomerAccountNo",
    pl."CustomerBranchId",
    pp."PayedTransactionLogId",
    pp."ClearingBranchCode",
    pp."Amount",
    pp."PaymentType",
    pp."Description",
    pp."PayOrder",
    p."TransactionId"
   FROM ((("SEPTEM"."PR_PayedTransactionLogs" pl
     JOIN "SEPTEM"."PR_PayedTransactionPaymentLogs" pp ON ((pl."Id" = pp."PayedTransactionLogId")))
     JOIN "SEPTEM"."VW_Employees" ve ON ((ve."Id" = pl."EmployeeId")))
     JOIN "SEPTEM"."PR_PayedTransaction" p ON ((p."Id" = pl."PayedTransactionIdId")));

CREATE VIEW "SEPTEM"."VW_PR_PrePayment" AS
 SELECT COALESCE(pr."Id", po."Id") AS "Id",
    po."DocTypes",
    po."DocNumber",
    po."DocDate",
    po."BusinessId",
    po."IsPrePayment",
    ve."FullName",
    ve."AccountNumber",
    pr."CalcAmount",
    pr."PaidAmount",
    COALESCE(pr."Year", (date_part('year'::text, po."DocDate"))::integer) AS "Year",
    COALESCE(pr."MonthNumber", (date_part('month'::text, po."DocDate"))::integer) AS "MonthNumber",
    COALESCE(pr."Status", 'Yeni'::character varying) AS "Status",
    ve."Id" AS "EmployeeId",
    po."Id" AS "DocsRepoId",
    NULL::text AS "Name",
    pr."DsmfAmount",
    ve."WorkPlaceCode",
    cpp."BranchCode",
    cpp."SubCode"
   FROM (((("SEPTEM"."PR_PrePayment" pr
     RIGHT JOIN "SEPTEM"."HR_DocsRepo" po ON ((po."Id" = pr."DocsRepoId")))
     JOIN "SEPTEM"."HR_DocEmployeeAssigments" hdea ON ((hdea."DocsRepoId" = po."Id")))
     JOIN "SEPTEM"."VW_Employees" ve ON ((ve."Id" = hdea."EmployeeId")))
     JOIN "SEPTEM"."CRM_PhysicalPerson" cpp ON ((cpp."Id" = ve."PersonId")))
  WHERE (((pr."Id" IS NULL) AND (po."IsPrePayment" = true)) OR (pr."Id" IS NOT NULL));

CREATE VIEW "SEPTEM"."VW_PR_SalaryReport" AS
 SELECT (((((emp."Surname")::text || ' '::text) || (emp."Name")::text) || ' '::text) || (emp."Patronymic")::text) AS "FullName",
    emp."Uid",
    emp."SocialCard",
    cs."BusinessId",
    cs."MonthNumber",
    cs."Month",
    cs."Year",
    cs."WorkDaysMonth",
    cs."WorkedDay",
    (cs."DismissalPayment" + COALESCE(cs."ConpensationAmount", (0)::numeric)) AS "DismissalPayment",
    cs."GeneralSalary",
    cs."Id",
    cs."VacationPayment",
    cs."IsAdditionalWorkPlace",
    cs."AdditionalCostPayment",
    cs."LifeInsurance",
    COALESCE(cs."DiscountAmount", (0)::numeric) AS "DiscountAmount",
    cs."SickPayment"
   FROM ("SEPTEM"."PR_CalculatedSalary" cs
     JOIN "SEPTEM"."VW_Employees" emp ON ((emp."Id" = cs."EmployeeId")));

CREATE VIEW "SEPTEM"."VW_PhysicalPersonList" AS
 SELECT "CRM_PhysicalPerson"."Id",
    "CRM_PhysicalPerson"."ContractorId",
    "CRM_PhysicalPerson"."Uid",
    "CRM_PhysicalPerson"."Name",
    "CRM_PhysicalPerson"."Surname",
    "CRM_PhysicalPerson"."Patronymic",
    "CRM_PhysicalPerson"."BirthDate",
    "CRM_PhysicalPerson"."Gender",
    ((('AZE'::bpchar)::text || ' ? '::text) || '25155552'::text) AS "IdentyDoc",
    (
        CASE
            WHEN (employed_persons."PersonId" IS NULL) THEN 0
            ELSE 1
        END)::bit(1) AS "IsEmployeed",
    "CRM_PhysicalPerson"."BusinessId",
    "CRM_PhysicalPerson"."Phone",
    "CRM_PhysicalPerson"."WorkPlace"
   FROM ("SEPTEM"."CRM_PhysicalPerson"
     LEFT JOIN ( SELECT DISTINCT "HR_Employees"."PersonId"
           FROM "SEPTEM"."HR_Employees") employed_persons ON (("CRM_PhysicalPerson"."Id" = employed_persons."PersonId")));

CREATE VIEW "SEPTEM"."VW_PositionReplacement" AS
 SELECT hpr."Id",
    hpr."CollectionId",
    hdr."DocNumber",
    hos."StructureName",
    hsu."Name" AS "StaffName",
    hpr."ChangeDate",
    hpr."EndDate",
    hpr."EmployeeId"
   FROM ((("SEPTEM"."HR_PositionReplacement" hpr
     JOIN "SEPTEM"."HR_DocsRepo" hdr ON ((hpr."DocsRepoId" = hdr."Id")))
     JOIN "SEPTEM"."HR_StaffUnits" hsu ON ((hpr."StaffUnitId" = hsu."Id")))
     JOIN "SEPTEM"."VW_HR_OrganizationStructure" hos ON ((hsu."OrganizationStructureId" = hos."Id")));

CREATE VIEW "SEPTEM"."VW_RC_ApplyVacancyDetails" AS
 SELECT apply."Id",
    COALESCE(u_ext."Name", u_int."FirstName") AS "FirstName",
    COALESCE(u_ext."Surname", u_int."LastName") AS "LastName",
    vac."VacancyName",
    vac."Id" AS "VacancyId",
    COALESCE(u_ext."Email", u_int."Email") AS "Email",
    NULL::text AS "PhoneNumber",
    vac."OrganizationStructureId" AS "StructureId",
    COALESCE(emp."StaffUnitId", NULL::uuid) AS "StaffUnitId",
    apply."Status" AS "ApplyVacancyStatus",
    vac."VacancyStatus",
    COALESCE(emp."StartDate", NULL::timestamp without time zone) AS "HireDate",
    NULL::text AS "Experience",
    NULL::text AS "InterviewDate",
    NULL::text AS "ExamSentDate",
    NULL::text AS "ExamTookDate",
    NULL::text AS "TaskSentDate",
    NULL::text AS "TaskCompletedDate",
    NULL::text AS "TaskScore",
    NULL::text AS "Note",
    apply."UserType"
   FROM (((("SEPTEM"."RC_ApplyVacancy" apply
     LEFT JOIN "SEPTEM"."RC_Vacancy" vac ON ((apply."VacancyId" = vac."Id")))
     LEFT JOIN "SEPTEM"."RC_Users" u_ext ON ((((apply."UserType")::text = 'External'::text) AND (apply."UserId" = u_ext."Id"))))
     LEFT JOIN "SEPTEM"."User" u_int ON ((((apply."UserType")::text = 'Internal'::text) AND (apply."UserId" = u_int."Id"))))
     LEFT JOIN "SEPTEM"."VW_Employees" emp ON ((u_int."EmployeeId" = emp."Id")));

CREATE VIEW "SEPTEM"."VW_RC_ApplyVacancyView" AS
 SELECT rl."Id",
    rl."VacancyId",
    v."VacancyName",
    s."Name" AS "StructureName",
    rl."CreatedAt" AS "ApplyVacancyDate",
    rl."Status",
    v."Obligation",
    v."Requirement",
    v."StaffType",
    v."EndDate" AS "VacancyEndDate",
    rl."ActionStatus",
    rl."UserId"
   FROM ((("SEPTEM"."RC_ApplyVacancy" rl
     JOIN "SEPTEM"."RC_Vacancy" v ON ((v."Id" = rl."VacancyId")))
     JOIN "SEPTEM"."HR_OrganizationStructure" ss ON ((ss."Id" = v."OrganizationStructureId")))
     JOIN "SEPTEM"."HR_Structures" s ON ((s."Id" = ss."StructureId")));

CREATE VIEW "SEPTEM"."VW_RC_BlackList" AS
 SELECT bl."Id",
    bl."UserId",
    bl."VacancyId",
    bl."BlockDate",
    bl."BlockStatus",
    ru."Name",
    ru."Surname",
    v."VacancyName",
    s."Name" AS "StructureName",
    ap."CreatedAt" AS "ApplyDate",
    bl."Reason"
   FROM (((("SEPTEM"."RC_BlackList" bl
     JOIN "SEPTEM"."RC_Users" ru ON ((bl."UserId" = ru."Id")))
     JOIN "SEPTEM"."RC_Vacancy" v ON ((v."Id" = bl."VacancyId")))
     JOIN "SEPTEM"."HR_Structures" s ON ((s."Id" = v."OrganizationStructureId")))
     JOIN "SEPTEM"."RC_ApplyVacancy" ap ON ((bl."VacancyId" = ap."VacancyId")));

CREATE VIEW "SEPTEM"."VW_RC_BudgetExtra" AS
 SELECT bi."Id",
    bi."CreatedDate",
    bi."BudgetId",
    b."DepartamentId",
    org1."StructureName" AS "DepartamentName",
    bi."DivisionId",
    org2."StructureName" AS "DivisionName",
    bi."OfferSalary",
    bi."OfferMonth",
    bi."Year",
    bi."Description",
    bi."ActionStatus",
    bi."VacancyId",
    bi."BudgetType",
    NULL::character varying AS "Type",
    bi."OfferPosition",
    bi."ChangeReason"
   FROM ((("SEPTEM"."RC_BudgetItems" bi
     JOIN "SEPTEM"."RC_Budgets" b ON ((b."Id" = bi."BudgetId")))
     LEFT JOIN "SEPTEM"."VW_HR_OrganizationStructure" org1 ON ((org1."StructureId" = b."DepartamentId")))
     LEFT JOIN "SEPTEM"."VW_HR_OrganizationStructure" org2 ON ((org2."Id" = bi."DivisionId")))
  WHERE ((bi."Status")::text = 'NewEmployee'::text)
UNION
 SELECT be."Id",
    be."CreatedDate",
    be."Id" AS "BudgetId",
    be."DepartamentId",
    org1."StructureName" AS "DepartamentName",
    be."DivisionId",
    org2."StructureName" AS "DivisionName",
    be."Budget" AS "OfferSalary",
    be."OfferMonth",
    NULL::numeric AS "Year",
    NULL::character varying AS "Description",
    be."Status" AS "ActionStatus",
    be."VacancyId",
    be."BudgetType",
    be."Type",
    NULL::character varying AS "OfferPosition",
    be."CancelReason" AS "ChangeReason"
   FROM (("SEPTEM"."RC_BudgetExtra" be
     LEFT JOIN "SEPTEM"."VW_HR_OrganizationStructure" org1 ON ((org1."StructureId" = be."DepartamentId")))
     LEFT JOIN "SEPTEM"."VW_HR_OrganizationStructure" org2 ON ((org2."Id" = be."DivisionId")));

CREATE VIEW "SEPTEM"."VW_RC_BudgetExtraDetail" AS
 SELECT be."Id",
    be."DepartamentId",
    be."DivisionId",
    be."Status",
    emp."StructureName",
    emp."AccountNumber",
    emp."FullName",
    emp."StaffUnitName",
    be."Budget",
    hsu."Name" AS "OfferPosition",
    be."OfferMonth",
    be."Reason",
    be."CancelReason",
    emp."Salary",
    be."StaffUnitId",
    be."EmployeeId",
    be."VacancyId",
    be."BudgetType",
    v."VacancyName",
    be."Type"
   FROM ((("SEPTEM"."RC_BudgetExtra" be
     JOIN "SEPTEM"."VW_Employees" emp ON ((be."EmployeeId" = emp."Id")))
     JOIN "SEPTEM"."HR_StaffUnits" hsu ON ((hsu."Id" = be."StaffUnitId")))
     LEFT JOIN "SEPTEM"."RC_Vacancy" v ON ((v."Id" = be."VacancyId")));

CREATE VIEW "SEPTEM"."VW_RC_Budgets" AS
 SELECT bi."Id",
    b."DepartamentId",
    bi."CreatedDate",
    b."Year",
    b."Status",
    org."StructureName" AS "DepartamentName",
    bi."AccountNumber",
    emp."FullName",
    COALESCE(org2."StructureName", emp."StructureName") AS "StructureName",
    emp."StaffUnitName",
    bi."OfferSalary",
    COALESCE((hsu."Name")::character varying(200), bi."OfferPosition") AS "OfferPosition",
    bi."OfferMonth",
    bi."Difference",
    bi."Reason",
    bi."ChangeReason",
    bi."Status" AS "ItemStatus",
    bi."ActionStatus",
    bi."Description",
    bi."Salary",
    b."Id" AS "BudgetId",
    bi."OfferPositionId",
    bi."SalaryChangeType",
    bi."EmployeeId",
    bi."DirectorReason",
    bi."VacancyId",
    COALESCE(bi."BudgetType", 'OnBudget'::character varying(100)) AS "BudgetType",
    bi."CancelReason"
   FROM (((((("SEPTEM"."RC_Budgets" b
     JOIN "SEPTEM"."RC_BudgetItems" bi ON ((b."Id" = bi."BudgetId")))
     JOIN "SEPTEM"."HR_Structures" hs ON ((hs."Id" = b."DepartamentId")))
     LEFT JOIN "SEPTEM"."VW_Employees" emp ON ((emp."Id" = bi."EmployeeId")))
     JOIN "SEPTEM"."VW_HR_OrganizationStructure" org ON ((org."StructureId" = b."DepartamentId")))
     LEFT JOIN "SEPTEM"."HR_StaffUnits" hsu ON ((hsu."Id" = bi."OfferPositionId")))
     LEFT JOIN "SEPTEM"."VW_HR_OrganizationStructure" org2 ON ((org2."Id" = bi."DivisionId")));

CREATE VIEW "SEPTEM"."VW_RC_OperationLogs" AS
 SELECT l."Id",
    u."UserName" AS "CreatedUserName",
    l."CreatedDate",
    l."DocumentId",
    l."BusinessId",
    l."Message",
    l."ChangeLog"
   FROM ("SEPTEM"."RC_OperationLogs" l
     JOIN "SEPTEM"."User" u ON ((u."Id" = l."CreatedUserId")));

CREATE VIEW "SEPTEM"."VW_RC_RecruitmentStagesMapping" AS
 SELECT rs."Id",
    rs."RecruitmentStatus",
    vct."Name" AS "StageType"
   FROM ("SEPTEM"."RC_RecruitmentStagesMapping" rs
     JOIN "SEPTEM"."RC_VacancyStageTypes" vct ON ((rs."VacancyStageTypeId" = vct."Id")));

CREATE VIEW "SEPTEM"."VW_RC_RejectList" AS
 SELECT rl."Id",
    rl."VacancyId",
    rl."RejectDate",
    rl."RejectStage",
    COALESCE((((ru."Name")::text || ' '::text) || (ru."Surname")::text), (((ui."FirstName")::text || ' '::text) || (ui."LastName")::text)) AS "FullName",
    v."VacancyName",
    s."Name" AS "StructureName",
    rl."UserId",
    rr."Name" AS "Reason"
   FROM ((((((("SEPTEM"."RC_RejectList" rl
     LEFT JOIN "SEPTEM"."RC_Users" ru ON ((rl."UserId" = ru."Id")))
     LEFT JOIN "SEPTEM"."User" ui ON ((rl."UserId" = ui."Id")))
     JOIN "SEPTEM"."RC_Vacancy" v ON ((v."Id" = rl."VacancyId")))
     JOIN "SEPTEM"."HR_OrganizationStructure" ss ON ((ss."Id" = v."OrganizationStructureId")))
     JOIN "SEPTEM"."HR_Structures" s ON ((s."Id" = ss."StructureId")))
     LEFT JOIN "SEPTEM"."REF_ReasonList" rr ON ((rl."ReasonListId" = rr."Id")))
     LEFT JOIN "SEPTEM"."RC_ApplyVacancy" av ON (((rl."UserId" = av."UserId") AND (rl."VacancyId" = av."VacancyId"))))
  WHERE ((av."ActionStatus")::text = 'RejectedByAdmin'::text);

CREATE VIEW "SEPTEM"."VW_RC_Vacancy" AS
 SELECT rv."Id",
    rv."OrganizationStructureId" AS "StructureId",
    hs."Name" AS "StructureName",
    rv."VacancyType",
    rv."VacancyStatus",
    rv."VacancyStage",
    rv."RecruiterUserId",
    emp."FullName",
    rv."OpenDate",
    rv."CloseDate",
    rv."VacancyDays",
    rv."EndDate",
    rv."MinBudget",
    rv."ApplicantApplyingNumber",
    rv."ApplicantProcessNumber",
    rv."SelectedApplicant",
    rv."BusinessId",
    rv."VacancyName",
    rv."MaxBudget",
    rv."StaffType",
    rv."Requirement",
    rv."Obligation",
    rv."VacancyAreaId",
    rv."Cause",
    rv."StopCause",
    rv."StopTime",
    rv."CancelTime",
    va."Name" AS "VacancyAreaName",
    rv."VacancyStatus" AS "Status",
    rv."OrderDate",
    rv."CreatedDate"
   FROM ((((("SEPTEM"."RC_Vacancy" rv
     JOIN "SEPTEM"."HR_OrganizationStructure" hos ON ((rv."OrganizationStructureId" = hos."Id")))
     JOIN "SEPTEM"."HR_Structures" hs ON ((hos."StructureId" = hs."Id")))
     LEFT JOIN "SEPTEM"."User" u ON ((rv."RecruiterUserId" = u."Id")))
     LEFT JOIN "SEPTEM"."VW_Employees" emp ON ((u."EmployeeId" = emp."Id")))
     LEFT JOIN "SEPTEM"."RC_VacancyArea" va ON ((rv."VacancyAreaId" = va."Id")));

CREATE VIEW "SEPTEM"."VW_RC_VacancyGeneralReport" AS
 SELECT v."Id",
    v."CreatedDate",
    v."BusinessId",
    v."VacancyName",
    (count(av."Id"))::integer AS "OrderCount",
    (count(av2."Id"))::integer AS "ActiveVacancyCount",
    (count(av."Id"))::integer AS "ClosedVacancyCount",
    (count(av."Id"))::integer AS "ClosingVacancyCount",
    (count(av."Id"))::integer AS "CandidatesCount",
    (count(av."Id"))::integer AS "ReviewCandidatesCount",
    (count(av."Id"))::integer AS "ShortlistCandidatesCount",
    (count(avi."Id"))::integer AS "InterviewInviteCandidatesCount",
    (count(avi2."Id"))::integer AS "InterviewCandidatesCount",
    (count(av."Id"))::integer AS "SuccessCandidatesCount",
    v."RecruiterUserId",
    (count(av."Id"))::integer AS "CanceledVacancyCount",
    (count(av."Id"))::integer AS "JobOfferCandidatesCount",
    (count(av."Id"))::integer AS "UnsuitableCandidatesCount",
    (count(av."Id"))::integer AS "HiredCandidatesCount"
   FROM (((("SEPTEM"."RC_Vacancy" v
     JOIN "SEPTEM"."RC_ApplyVacancy" av ON ((av."VacancyId" = v."Id")))
     LEFT JOIN "SEPTEM"."RC_ApplyVacancy" av2 ON (((av2."VacancyId" = v."Id") AND ((av2."ActionStatus")::text <> 'Rejected'::text) AND ((av2."ActionStatus")::text <> 'RejectedByAdmin'::text))))
     LEFT JOIN "SEPTEM"."RC_ApplyVacancyInterview" avi ON (((avi."ApplyVacancyId" = av."Id") AND ((avi."Status")::text = 'Send'::text))))
     LEFT JOIN "SEPTEM"."RC_ApplyVacancyInterview" avi2 ON (((avi2."ApplyVacancyId" = av."Id") AND ((avi2."Status")::text = 'Accepted'::text))))
  GROUP BY v."Id", v."CreatedDate", v."BusinessId", v."VacancyName", v."RecruiterUserId";

CREATE VIEW "SEPTEM"."VW_RC_VacancyReport" AS
SELECT
    NULL::uuid AS "Id",
    NULL::timestamp without time zone AS "CreatedDate",
    NULL::character varying(250) AS "VacancyName",
    NULL::uuid AS "OrganizationStructureId",
    NULL::character varying(150) AS "StructureName",
    NULL::character varying(500) AS "CurationStructureName",
    NULL::text AS "StaffUnit",
    NULL::text AS "CreationBasis",
    NULL::text AS "WhosePlace",
    NULL::uuid AS "BusinessId",
    NULL::timestamp without time zone AS "OpenDate",
    NULL::timestamp without time zone AS "CloseDate",
    NULL::date AS "ReOpenDate",
    NULL::text AS "Recruiter",
    NULL::character varying(50) AS "VacancyType",
    NULL::character varying(50) AS "VacancyStatus",
    NULL::character varying AS "BudgetType",
    NULL::bigint AS "ApplicationCount",
    NULL::bigint AS "CandidateApplicationCount",
    NULL::bigint AS "JobOfferCount",
    NULL::integer AS "ShortlistApplicationCount",
    NULL::integer AS "ShortlistAcceptedApplicationCount",
    NULL::bigint AS "RejectedApplicationCount",
    NULL::integer AS "SuccessApplicationCount",
    NULL::integer AS "ActiveDayCount",
    NULL::uuid AS "RecruiterUserId",
    NULL::integer AS "ShortlistCount";

CREATE VIEW "SEPTEM"."VW_REF_PrintPages" AS
 SELECT pp."Id",
    pp."BusinessId",
    b."Name" AS "BusinessName",
    pp."Name" AS "DocumentName",
    pp."Code",
    pp."DocType",
    pp."MimeType",
    pp."FileData",
    pp."UploadDate"
   FROM ("SEPTEM"."REF_PrintPages" pp
     JOIN "SEPTEM"."Business" b ON ((pp."BusinessId" = b."Id")));

CREATE VIEW "SEPTEM"."VW_RT_AdvanceRequirementFlow" AS
 SELECT "Assignes"."UserId",
    "Assignes"."WorkId",
    "Assignes"."Operation",
    "Assignes"."ProductTypeName" AS "ProductType",
    "Assignes"."WorkCurrentStatusId",
    "Assignes"."WorkCurrentStatusName",
    "Assignes"."WorkCurrentStatusCode",
    "Assignes"."StatusCanEdit",
    "Assignes"."StatusCanDelete",
    "Assignes"."StatusCanPrint",
    emp."FullName",
    concat(' ', u."FirstName", ' ', u."LastName", ' ', u."PatronymicName") AS "ConfirmedUserFullName",
    rar."Id",
    rar."CreatedUserId",
    rar."CurrentStatusId",
    rar."ConfirmedUserId",
    rar."LastExecutedDate",
    rar."ModifiedUserId",
    rar."ModifiedDate",
    rar."EmployeeId",
    rar."AdvanceAmount",
    rar."CreatedDate",
    rar."CollectionId",
    rar."Cause",
    rar."Version"
   FROM ((("SEPTEM"."RT_AdvanceRequirement" rar
     LEFT JOIN "SEPTEM"."User" u ON ((u."Id" = rar."ConfirmedUserId")))
     JOIN "SEPTEM"."VW_WF_AssignedWorkAllActive" "Assignes" ON ((rar."Id" = "Assignes"."ProductId")))
     JOIN "SEPTEM"."VW_EmployeesSimple" emp ON ((emp."Id" = rar."EmployeeId")));

CREATE VIEW "SEPTEM"."VW_RT_BusinessTripRequirementFlow" AS
 SELECT "Assignes"."UserId",
    "Assignes"."WorkId",
    "Assignes"."Operation",
    "Assignes"."ProductTypeName" AS "ProductType",
    "Assignes"."WorkCurrentStatusId",
    "Assignes"."WorkCurrentStatusName",
    "Assignes"."WorkCurrentStatusCode",
    "Assignes"."StatusCanEdit",
    "Assignes"."StatusCanDelete",
    "Assignes"."StatusCanPrint",
    emp."FullName",
    concat(' ', u."FirstName", ' ', u."LastName", ' ', u."PatronymicName") AS "ConfirmedUserFullName",
    rar."Id",
    rar."CreatedUserId",
    rar."LastExecutedDate",
    rar."StartDate",
    rar."EndDate",
    rar."Days",
    rar."FirstWorkDate",
    rar."DestinationPointId",
    rar."EmployeeId",
    rar."Cause",
    rar."CreatedDate"
   FROM ((("SEPTEM"."RT_BusinessTripRequirement" rar
     LEFT JOIN "SEPTEM"."User" u ON ((u."Id" = rar."CreatedUserId")))
     JOIN "SEPTEM"."VW_WF_AssignedWorkAllActive" "Assignes" ON ((rar."Id" = "Assignes"."ProductId")))
     JOIN "SEPTEM"."VW_EmployeesSimple" emp ON ((emp."Id" = rar."EmployeeId")));

CREATE VIEW "SEPTEM"."VW_RT_CompensationRequirementFlow" AS
 SELECT "Assignes"."UserId",
    "Assignes"."WorkId",
    "Assignes"."Operation",
    "Assignes"."ProductTypeName" AS "ProductType",
    "Assignes"."WorkCurrentStatusId",
    "Assignes"."WorkCurrentStatusName",
    "Assignes"."WorkCurrentStatusCode",
    "Assignes"."StatusCanEdit",
    "Assignes"."StatusCanDelete",
    "Assignes"."StatusCanPrint",
    emp."FullName",
    po."Id",
    po."CreatedUserId",
    po."CreatedDate",
    po."EmployeeId",
    po."Basis",
    po."Days",
    po."TotalDays"
   FROM (("SEPTEM"."RT_CompensationRequirement" po
     JOIN "SEPTEM"."VW_WF_AssignedWorkAllActive" "Assignes" ON ((po."Id" = "Assignes"."ProductId")))
     JOIN "SEPTEM"."VW_EmployeesSimple" emp ON ((emp."Id" = po."EmployeeId")));

CREATE VIEW "SEPTEM"."VW_RT_DismissalRequirementFlow" AS
 SELECT "Assignes"."UserId",
    "Assignes"."WorkId",
    "Assignes"."Operation",
    "Assignes"."ProductTypeName" AS "ProductType",
    "Assignes"."WorkCurrentStatusId",
    "Assignes"."WorkCurrentStatusName",
    "Assignes"."WorkCurrentStatusCode",
    "Assignes"."StatusCanEdit",
    "Assignes"."StatusCanDelete",
    "Assignes"."StatusCanPrint",
    emp."FullName",
    concat(' ', u."FirstName", ' ', u."LastName", ' ', u."PatronymicName") AS "ConfirmedUserFullName",
    rar."Id",
    rar."CreatedUserId",
    rar."LastExecutedDate",
    rar."CreatedDate",
    rar."OperationDate",
    rar."DismissalTypeId",
    rar."Description",
    rar."EmployeeId",
    rar."ConfirmedUserId"
   FROM ((("SEPTEM"."RT_DismissalRequirement" rar
     LEFT JOIN "SEPTEM"."User" u ON ((u."Id" = rar."CreatedUserId")))
     JOIN "SEPTEM"."VW_WF_AssignedWorkAllActive" "Assignes" ON ((rar."Id" = "Assignes"."ProductId")))
     JOIN "SEPTEM"."VW_EmployeesSimple" emp ON ((emp."Id" = rar."EmployeeId")));

CREATE VIEW "SEPTEM"."VW_RT_EmployeePenaltyRequirement" AS
 SELECT "Assignes"."UserId",
    "Assignes"."WorkId",
    "Assignes"."Operation",
    "Assignes"."ProductTypeName" AS "ProductType",
    "Assignes"."WorkCurrentStatusId",
    "Assignes"."WorkCurrentStatusName",
    "Assignes"."WorkCurrentStatusCode",
    "Assignes"."StatusCanEdit",
    "Assignes"."StatusCanDelete",
    "Assignes"."StatusCanPrint",
    po."Id",
    po."CreatedUserId",
    po."CreatedDate",
    po."EmployeeId",
    po."Cause",
    po."Basis",
    po."PenaltyType",
    po."Month",
    po."Percentage",
    po."ApplyDate",
    emp."FullName",
    ''::text AS "ConfirmedUserName"
   FROM (((("SEPTEM"."RT_EmployeePenaltyRequirement" po
     LEFT JOIN "SEPTEM"."User" cu ON ((po."CreatedUserId" = cu."Id")))
     JOIN "SEPTEM"."VW_WF_AssignedWorkAllActive" "Assignes" ON ((po."Id" = "Assignes"."ProductId")))
     LEFT JOIN "SEPTEM"."User" u ON ((u."Id" = po."CreatedUserId")))
     JOIN "SEPTEM"."VW_EmployeesSimple" emp ON ((emp."Id" = u."EmployeeId")));

CREATE VIEW "SEPTEM"."VW_RT_LaborVacatoionRequirementFlow" AS
 SELECT "Assignes"."UserId",
    "Assignes"."WorkId",
    "Assignes"."Operation",
    "Assignes"."ProductTypeName" AS "ProductType",
    "Assignes"."WorkCurrentStatusId",
    "Assignes"."WorkCurrentStatusName",
    "Assignes"."WorkCurrentStatusCode",
    "Assignes"."StatusCanEdit",
    "Assignes"."StatusCanDelete",
    "Assignes"."StatusCanPrint",
    po."Id",
    po."StartDate",
    po."Days",
    po."ConfirmedUserId",
    po."CreatedUserId",
    po."CreatedDate",
    po."EmployeeId",
    po."Cause",
    po."Description",
    po."BusinessId",
    emp."FullName",
    concat(' ', cu."FirstName", ' ', cu."LastName", ' ', cu."PatronymicName") AS "ConfirmedUserFullName",
    po."EndDate",
    po."VacationType",
    po."FirstWorkDate",
    po."EducationPlace",
    po."HasPrePayment"
   FROM ((("SEPTEM"."RT_LaborVacactionRequirement" po
     LEFT JOIN "SEPTEM"."User" cu ON ((po."ConfirmedUserId" = cu."Id")))
     JOIN "SEPTEM"."VW_WF_AssignedWorkAllActive" "Assignes" ON ((po."Id" = "Assignes"."ProductId")))
     JOIN "SEPTEM"."VW_EmployeesSimple" emp ON ((emp."Id" = po."EmployeeId")));

CREATE VIEW "SEPTEM"."VW_RT_MaterialAssistanceFlow" AS
 SELECT "Assignes"."UserId",
    "Assignes"."WorkId",
    "Assignes"."Operation",
    "Assignes"."ProductTypeName" AS "ProductType",
    "Assignes"."WorkCurrentStatusId",
    "Assignes"."WorkCurrentStatusName",
    "Assignes"."WorkCurrentStatusCode",
    "Assignes"."StatusCanEdit",
    "Assignes"."StatusCanDelete",
    "Assignes"."StatusCanPrint",
    po."Id",
    po."CreatedUserId",
    po."CreatedDate",
    po."Type",
    po."Amount",
    po."Description",
    po."EmployeeId"
   FROM (((("SEPTEM"."RT_MaterialAssistance" po
     LEFT JOIN "SEPTEM"."User" cu ON ((po."CreatedUserId" = cu."Id")))
     JOIN "SEPTEM"."VW_WF_AssignedWorkAllActive" "Assignes" ON ((po."Id" = "Assignes"."ProductId")))
     LEFT JOIN "SEPTEM"."User" u ON ((u."Id" = po."CreatedUserId")))
     JOIN "SEPTEM"."VW_EmployeesSimple" emp ON ((emp."Id" = u."EmployeeId")));

CREATE VIEW "SEPTEM"."VW_RT_MobilizationRequirementFlow" AS
 SELECT "Assignes"."UserId",
    "Assignes"."WorkId",
    "Assignes"."Operation",
    "Assignes"."ProductTypeName" AS "ProductType",
    "Assignes"."WorkCurrentStatusId",
    "Assignes"."WorkCurrentStatusName",
    "Assignes"."WorkCurrentStatusCode",
    "Assignes"."StatusCanEdit",
    "Assignes"."StatusCanDelete",
    "Assignes"."StatusCanPrint",
    po."Id",
    po."CreatedUserId",
    po."CreatedDate",
    po."StartDate",
    po."EndDate",
    po."Days",
    po."Type",
    po."Description",
    po."EmployeeId",
    emp."FullName"
   FROM ((("SEPTEM"."RT_MobilizationRequirement" po
     JOIN "SEPTEM"."VW_WF_AssignedWorkAllActive" "Assignes" ON ((po."Id" = "Assignes"."ProductId")))
     LEFT JOIN "SEPTEM"."User" u ON ((u."Id" = po."CreatedUserId")))
     JOIN "SEPTEM"."VW_EmployeesSimple" emp ON ((emp."Id" = u."EmployeeId")));

CREATE VIEW "SEPTEM"."VW_RT_RemoteJobFlow" AS
 SELECT "Assignes"."UserId",
    "Assignes"."WorkId",
    "Assignes"."Operation",
    "Assignes"."ProductTypeName" AS "ProductType",
    "Assignes"."WorkCurrentStatusId",
    "Assignes"."WorkCurrentStatusName",
    "Assignes"."WorkCurrentStatusCode",
    "Assignes"."StatusCanEdit",
    "Assignes"."StatusCanDelete",
    "Assignes"."StatusCanPrint",
    emp."FullName",
    concat(' ', u."FirstName", ' ', u."LastName", ' ', u."PatronymicName") AS "ConfirmedUserFullName",
    rar."Id",
    rar."CreatedUserId",
    rar."CreatedDate",
    rar."StartDate",
    rar."Days",
    rar."EmployeeId",
    rar."ConfirmedUserId",
    rar."BusinessId",
    rar."EndDate",
    rar."FirstWorkDate"
   FROM ((("SEPTEM"."RT_RemoteJob" rar
     LEFT JOIN "SEPTEM"."User" u ON ((u."Id" = rar."CreatedUserId")))
     JOIN "SEPTEM"."VW_WF_AssignedWorkAllActive" "Assignes" ON ((rar."Id" = "Assignes"."ProductId")))
     JOIN "SEPTEM"."VW_EmployeesSimple" emp ON ((emp."Id" = rar."EmployeeId")));

CREATE VIEW "SEPTEM"."VW_RT_ReplacementRequirementFlow" AS
 SELECT "Assignes"."UserId",
    "Assignes"."WorkId",
    "Assignes"."Operation",
    "Assignes"."ProductTypeName" AS "ProductType",
    "Assignes"."WorkCurrentStatusId",
    "Assignes"."WorkCurrentStatusName",
    "Assignes"."WorkCurrentStatusCode",
    "Assignes"."StatusCanEdit",
    "Assignes"."StatusCanDelete",
    "Assignes"."StatusCanPrint",
    ns."Id",
    ns."StartDate",
    ns."EndDate",
    ns."FirstWorkDate",
    ns."Days",
    ns."ConfirmedUserIdId" AS "ConfirmedUserId",
    ns."EmployeeId",
    ns."SubstituteEmployeeId",
    ns."Description",
    ns."CreatedUserId",
    ns."CreatedDate",
    emp."FullName",
    concat(confirmedu."FirstName", ' ', confirmedu."LastName") AS "ConfirmedUserName"
   FROM ((("SEPTEM"."RT_ReplacementRequirement" ns
     JOIN "SEPTEM"."VW_WF_AssignedWorkAllActive" "Assignes" ON ((ns."Id" = "Assignes"."ProductId")))
     JOIN "SEPTEM"."VW_EmployeesSimple" emp ON ((emp."Id" = ns."EmployeeId")))
     LEFT JOIN "SEPTEM"."User" confirmedu ON ((ns."ConfirmedUserIdId" = confirmedu."Id")))
  WHERE ("Assignes"."UserId" IS NOT NULL);

CREATE VIEW "SEPTEM"."VW_RT_RequestRequestRequirementFlow" AS
 SELECT "Assignes"."UserId",
    "Assignes"."WorkId",
    "Assignes"."Operation",
    "Assignes"."ProductTypeName" AS "ProductType",
    "Assignes"."WorkCurrentStatusId",
    "Assignes"."WorkCurrentStatusName",
    "Assignes"."WorkCurrentStatusCode",
    "Assignes"."StatusCanEdit",
    "Assignes"."StatusCanDelete",
    "Assignes"."StatusCanPrint",
    emp."FullName",
    po."Id",
    po."CreatedUserId",
    po."Type",
    po."CreatedDate",
    po."Description",
    po."EmployeeId"
   FROM (("SEPTEM"."RT_RequestRequestRequirement" po
     JOIN "SEPTEM"."VW_WF_AssignedWorkAllActive" "Assignes" ON ((po."Id" = "Assignes"."ProductId")))
     JOIN "SEPTEM"."VW_EmployeesSimple" emp ON ((emp."Id" = po."EmployeeId")));

CREATE VIEW "SEPTEM"."VW_RT_StatementRequirements" AS
 SELECT "Assignes"."UserId",
    "Assignes"."WorkId",
    "Assignes"."Operation",
    "Assignes"."ProductTypeName" AS "ProductType",
    "Assignes"."WorkCurrentStatusId",
    "Assignes"."WorkCurrentStatusName",
    "Assignes"."WorkCurrentStatusCode",
    "Assignes"."StatusCanEdit",
    "Assignes"."StatusCanDelete",
    "Assignes"."StatusCanPrint",
    sr."Id",
    sr."CreatedDate",
    sr."BusinessId",
    sr."Note",
    sr."CreatedUserId",
    sr."EmployeeId",
    rd."Name" AS "Destination",
    sr."Date",
    sr."Cause",
    sr."Shipping",
    sr."ReferenceType" AS "RefferenceType",
    sr."DestinationId"
   FROM (("SEPTEM"."RT_StatementRequirements" sr
     JOIN "SEPTEM"."VW_WF_AssignedWorkAllActive" "Assignes" ON ((sr."Id" = "Assignes"."ProductId")))
     LEFT JOIN "SEPTEM"."REF_Destinations" rd ON ((rd."Id" = sr."DestinationId")));

CREATE VIEW "SEPTEM"."VW_RT_SurnameChangeRequirementFlow" AS
 SELECT "Assignes"."UserId",
    "Assignes"."WorkId",
    "Assignes"."Operation",
    "Assignes"."ProductTypeName" AS "ProductType",
    "Assignes"."WorkCurrentStatusId",
    "Assignes"."WorkCurrentStatusName",
    "Assignes"."WorkCurrentStatusCode",
    "Assignes"."StatusCanEdit",
    "Assignes"."StatusCanDelete",
    "Assignes"."StatusCanPrint",
    po."Id",
    po."CreatedUserId",
    po."CreatedDate",
    po."NewSurname",
    po."EmployeeId",
    po."ChangedDate",
    emp."FullName"
   FROM ((("SEPTEM"."RT_SurnameChangeRequirement" po
     JOIN "SEPTEM"."VW_WF_AssignedWorkAllActive" "Assignes" ON ((po."Id" = "Assignes"."ProductId")))
     LEFT JOIN "SEPTEM"."User" u ON ((u."Id" = po."CreatedUserId")))
     JOIN "SEPTEM"."VW_EmployeesSimple" emp ON ((emp."Id" = u."EmployeeId")));

CREATE VIEW "SEPTEM"."VW_RT_TrainingEventRequirementFlow" AS
 SELECT "Assignes"."UserId",
    "Assignes"."WorkId",
    "Assignes"."Operation",
    "Assignes"."ProductTypeName" AS "ProductType",
    "Assignes"."WorkCurrentStatusId",
    "Assignes"."WorkCurrentStatusName",
    "Assignes"."WorkCurrentStatusCode",
    "Assignes"."StatusCanEdit",
    "Assignes"."StatusCanDelete",
    "Assignes"."StatusCanPrint",
    emp."FullName",
    po."Id",
    po."CreatedUserId",
    po."CreatedDate",
    po."StartDate",
    po."EndDate",
    po."Basis",
    po."TrainingPlace",
    po."EmployeeId"
   FROM (("SEPTEM"."RT_TrainingEventRequirement" po
     JOIN "SEPTEM"."VW_WF_AssignedWorkAllActive" "Assignes" ON ((po."Id" = "Assignes"."ProductId")))
     JOIN "SEPTEM"."VW_EmployeesSimple" emp ON ((emp."Id" = po."EmployeeId")));

CREATE VIEW "SEPTEM"."VW_RT_UnWorkHoursRequirementFlow" AS
 SELECT "Assignes"."UserId",
    "Assignes"."WorkId",
    "Assignes"."Operation",
    "Assignes"."ProductTypeName" AS "ProductType",
    "Assignes"."WorkCurrentStatusId",
    "Assignes"."WorkCurrentStatusName",
    "Assignes"."WorkCurrentStatusCode",
    "Assignes"."StatusCanEdit",
    "Assignes"."StatusCanDelete",
    "Assignes"."StatusCanPrint",
    po."Id",
    po."CreatedUserId",
    po."CreatedDate",
    po."StartDate",
    po."EndDate",
    po."StartTime",
    po."EndTime",
    po."Hours",
    po."Cause",
    po."Description",
    po."EmployeeId",
    emp."FullName"
   FROM ((("SEPTEM"."RT_UnWorkHoursRequirement" po
     JOIN "SEPTEM"."VW_WF_AssignedWorkAllActive" "Assignes" ON ((po."Id" = "Assignes"."ProductId")))
     LEFT JOIN "SEPTEM"."User" u ON ((u."Id" = po."CreatedUserId")))
     JOIN "SEPTEM"."VW_EmployeesSimple" emp ON ((emp."Id" = u."EmployeeId")));

CREATE VIEW "SEPTEM"."VW_RT_WorkOrWeekendRequirementFlow" AS
 SELECT "Assignes"."UserId",
    "Assignes"."WorkId",
    "Assignes"."Operation",
    "Assignes"."ProductTypeName" AS "ProductType",
    "Assignes"."WorkCurrentStatusId",
    "Assignes"."WorkCurrentStatusName",
    "Assignes"."WorkCurrentStatusCode",
    "Assignes"."StatusCanEdit",
    "Assignes"."StatusCanDelete",
    "Assignes"."StatusCanPrint",
    emp."FullName",
    po."Id",
    po."CreatedUserId",
    po."CreatedDate",
    po."Type",
    po."StartDate",
    po."IsIndefinitely",
    po."FirstWorkDate",
    po."Description",
    po."EmployeeId",
    po."Cause",
    po."EndDate"
   FROM (("SEPTEM"."RT_WorkOrWeekendRequirement" po
     JOIN "SEPTEM"."VW_WF_AssignedWorkAllActive" "Assignes" ON ((po."Id" = "Assignes"."ProductId")))
     JOIN "SEPTEM"."VW_EmployeesSimple" emp ON ((emp."Id" = po."EmployeeId")));

CREATE VIEW "SEPTEM"."VW_RT_WorkingHoursReductionRequirementFlow" AS
 SELECT "Assignes"."UserId",
    "Assignes"."WorkId",
    "Assignes"."Operation",
    "Assignes"."ProductTypeName" AS "ProductType",
    "Assignes"."WorkCurrentStatusId",
    "Assignes"."WorkCurrentStatusName",
    "Assignes"."WorkCurrentStatusCode",
    "Assignes"."StatusCanEdit",
    "Assignes"."StatusCanDelete",
    "Assignes"."StatusCanPrint",
    emp."FullName",
    concat(' ', cu."FirstName", ' ', cu."LastName", ' ', cu."PatronymicName") AS "ConfirmedUserFullName",
    po."Id",
    po."CreatedUserId",
    po."CreatedDate",
    po."StartDate",
    po."EndDate",
    po."StartTime",
    po."EndTime",
    po."Cause",
    po."Description",
    po."EmployeeId",
    po."ConfirmedUserId"
   FROM ((("SEPTEM"."RT_WorkingHoursReductionRequirement" po
     LEFT JOIN "SEPTEM"."User" cu ON ((po."ConfirmedUserId" = cu."Id")))
     JOIN "SEPTEM"."VW_WF_AssignedWorkAllActive" "Assignes" ON ((po."Id" = "Assignes"."ProductId")))
     JOIN "SEPTEM"."VW_EmployeesSimple" emp ON ((emp."Id" = po."EmployeeId")));

CREATE VIEW "SEPTEM"."VW_RT_AllRequirementsFlow" AS
 SELECT DISTINCT rar."UserId",
    rar."WorkId",
    rar."Operation",
    rar."ProductType",
    NULL::uuid AS "ProductTypeId",
    rar."WorkCurrentStatusId",
    rar."WorkCurrentStatusName",
    rar."WorkCurrentStatusCode",
    rar."StatusCanEdit",
    rar."StatusCanDelete",
    rar."StatusCanPrint",
    rar."Id" AS "ProductId",
    rar."ConfirmedUserId",
    concat(' ', u."FirstName", ' ', u."LastName", ' ', u."PatronymicName") AS "ConfirmedUserName",
    NULL::timestamp without time zone AS "StartTime",
    NULL::timestamp without time zone AS "EndTime",
    NULL::text AS "Shipping",
    NULL::integer AS "Days",
    NULL::uuid AS "DestinationId",
    NULL::text AS "DestinationName",
    rar."EmployeeId",
    NULL::text AS "Description",
    rar."Cause",
    rar."CreatedUserId",
    NULL::timestamp without time zone AS "StartDate",
    rar."CreatedDate",
    rar."Id",
    NULL::timestamp without time zone AS "EndDate",
    NULL::numeric AS "AdvanceAmount"
   FROM ("SEPTEM"."VW_RT_AdvanceRequirementFlow" rar
     LEFT JOIN "SEPTEM"."User" u ON ((u."Id" = rar."ConfirmedUserId")))
UNION
 SELECT DISTINCT po."UserId",
    po."WorkId",
    po."Operation",
    po."ProductType",
    NULL::uuid AS "ProductTypeId",
    po."WorkCurrentStatusId",
    po."WorkCurrentStatusName",
    po."WorkCurrentStatusCode",
    po."StatusCanEdit",
    po."StatusCanDelete",
    po."StatusCanPrint",
    po."Id" AS "ProductId",
    po."ConfirmedUserId",
    concat(' ', cu."FirstName", ' ', cu."LastName", ' ', cu."PatronymicName") AS "ConfirmedUserName",
    po."StartDate" AS "StartTime",
    po."EndDate" AS "EndTime",
    NULL::text AS "Shipping",
    po."Days",
    NULL::uuid AS "DestinationId",
    NULL::text AS "DestinationName",
    po."EmployeeId",
    po."Description",
    po."Cause",
    po."CreatedUserId",
    po."StartDate",
    po."CreatedDate",
    po."Id",
    po."EndDate",
    NULL::numeric AS "AdvanceAmount"
   FROM ("SEPTEM"."VW_RT_LaborVacatoionRequirementFlow" po
     LEFT JOIN "SEPTEM"."User" cu ON ((po."ConfirmedUserId" = cu."Id")))
UNION
 SELECT DISTINCT sr."UserId",
    sr."WorkId",
    sr."Operation",
    sr."ProductType",
    NULL::uuid AS "ProductTypeId",
    sr."WorkCurrentStatusId",
    sr."WorkCurrentStatusName",
    sr."WorkCurrentStatusCode",
    sr."StatusCanEdit",
    sr."StatusCanDelete",
    sr."StatusCanPrint",
    sr."Id" AS "ProductId",
    NULL::uuid AS "ConfirmedUserId",
    NULL::text AS "ConfirmedUserName",
    sr."Date" AS "StartTime",
    NULL::timestamp without time zone AS "EndTime",
    sr."Shipping",
    NULL::integer AS "Days",
    sr."DestinationId",
    sr."Destination" AS "DestinationName",
    sr."EmployeeId",
    sr."Note" AS "Description",
    sr."Cause",
    sr."CreatedUserId",
    sr."Date" AS "StartDate",
    sr."CreatedDate",
    sr."Id",
    NULL::timestamp without time zone AS "EndDate",
    NULL::numeric AS "AdvanceAmount"
   FROM "SEPTEM"."VW_RT_StatementRequirements" sr
UNION
 SELECT DISTINCT po."UserId",
    po."WorkId",
    po."Operation",
    po."ProductType",
    NULL::uuid AS "ProductTypeId",
    po."WorkCurrentStatusId",
    po."WorkCurrentStatusName",
    po."WorkCurrentStatusCode",
    po."StatusCanEdit",
    po."StatusCanDelete",
    po."StatusCanPrint",
    po."Id" AS "ProductId",
    po."ConfirmedUserId",
    concat(confirmedu."FirstName", ' ', confirmedu."LastName") AS "ConfirmedUserName",
    po."StartTime",
    po."EndTime",
    NULL::text AS "Shipping",
    NULL::integer AS "Days",
    NULL::uuid AS "DestinationId",
    NULL::text AS "DestinationName",
    po."EmployeeId",
    po."Description",
    po."Cause",
    po."CreatedUserId",
    po."StartTime" AS "StartDate",
    po."CreatedDate",
    po."Id",
    po."EndTime" AS "EndDate",
    NULL::numeric AS "AdvanceAmount"
   FROM ("SEPTEM"."VW_PO_PermissionsFlow" po
     LEFT JOIN "SEPTEM"."User" confirmedu ON ((po."ConfirmedUserId" = confirmedu."Id")))
UNION
 SELECT DISTINCT po."UserId",
    po."WorkId",
    po."Operation",
    po."ProductType",
    NULL::uuid AS "ProductTypeId",
    po."WorkCurrentStatusId",
    po."WorkCurrentStatusName",
    po."WorkCurrentStatusCode",
    po."StatusCanEdit",
    po."StatusCanDelete",
    po."StatusCanPrint",
    po."Id" AS "ProductId",
    NULL::uuid AS "ConfirmedUserId",
    NULL::text AS "ConfirmedUserName",
    NULL::date AS "StartTime",
    NULL::date AS "EndTime",
    NULL::text AS "Shipping",
    NULL::integer AS "Days",
    NULL::uuid AS "DestinationId",
    NULL::text AS "DestinationName",
    po."EmployeeId",
    NULL::text AS "Description",
    po."Cause",
    po."CreatedUserId",
    NULL::date AS "StartDate",
    po."CreatedDate",
    po."Id",
    NULL::date AS "EndDate",
    NULL::numeric AS "AdvanceAmount"
   FROM "SEPTEM"."VW_RT_EmployeePenaltyRequirement" po
UNION
 SELECT DISTINCT po."UserId",
    po."WorkId",
    po."Operation",
    po."ProductType",
    NULL::uuid AS "ProductTypeId",
    po."WorkCurrentStatusId",
    po."WorkCurrentStatusName",
    po."WorkCurrentStatusCode",
    po."StatusCanEdit",
    po."StatusCanDelete",
    po."StatusCanPrint",
    po."Id" AS "ProductId",
    po."CreatedUserId" AS "ConfirmedUserId",
    concat(' ', cu."FirstName", ' ', cu."LastName", ' ', cu."PatronymicName") AS "ConfirmedUserName",
    NULL::date AS "StartTime",
    NULL::date AS "EndTime",
    NULL::text AS "Shipping",
    po."Days",
    po."DestinationPointId" AS "DestinationId",
    NULL::text AS "DestinationName",
    po."EmployeeId",
    ''::text AS "Description",
    po."Cause",
    po."CreatedUserId",
    po."StartDate",
    po."CreatedDate",
    po."Id",
    po."EndDate",
    NULL::numeric AS "AdvanceAmount"
   FROM ("SEPTEM"."VW_RT_BusinessTripRequirementFlow" po
     LEFT JOIN "SEPTEM"."User" cu ON ((po."CreatedUserId" = cu."Id")))
UNION
 SELECT DISTINCT rr."UserId",
    rr."WorkId",
    rr."Operation",
    rr."ProductType",
    NULL::uuid AS "ProductTypeId",
    rr."WorkCurrentStatusId",
    rr."WorkCurrentStatusName",
    rr."WorkCurrentStatusCode",
    rr."StatusCanEdit",
    rr."StatusCanDelete",
    rr."StatusCanPrint",
    rr."Id" AS "ProductId",
    rr."ConfirmedUserId",
    concat(confirmed_user."FirstName", ' ', confirmed_user."LastName") AS "ConfirmedUserName",
    NULL::date AS "StartTime",
    NULL::date AS "EndTime",
    NULL::text AS "Shipping",
    NULL::integer AS "Days",
    NULL::uuid AS "DestinationId",
    NULL::text AS "DestinationName",
    rr."EmployeeId",
    rr."Description",
    rr."Description" AS "Cause",
    rr."CreatedUserId",
    rr."StartDate",
    rr."CreatedDate",
    rr."Id",
    rr."EndDate",
    NULL::numeric AS "AdvanceAmount"
   FROM ("SEPTEM"."VW_RT_ReplacementRequirementFlow" rr
     LEFT JOIN "SEPTEM"."User" confirmed_user ON ((rr."ConfirmedUserId" = confirmed_user."Id")))
  WHERE (rr."UserId" IS NOT NULL)
UNION
 SELECT DISTINCT po."UserId",
    po."WorkId",
    po."Operation",
    po."ProductType",
    NULL::uuid AS "ProductTypeId",
    po."WorkCurrentStatusId",
    po."WorkCurrentStatusName",
    po."WorkCurrentStatusCode",
    po."StatusCanEdit",
    po."StatusCanDelete",
    po."StatusCanPrint",
    po."Id" AS "ProductId",
    po."CreatedUserId" AS "ConfirmedUserId",
    concat(' ', cu."FirstName", ' ', cu."LastName", ' ', cu."PatronymicName") AS "ConfirmedUserName",
    NULL::date AS "StartTime",
    NULL::date AS "EndTime",
    NULL::text AS "Shipping",
    NULL::integer AS "Days",
    NULL::uuid AS "DestinationId",
    NULL::text AS "DestinationName",
    po."EmployeeId",
    po."Description",
    NULL::text AS "Cause",
    po."CreatedUserId",
    po."OperationDate" AS "StartDate",
    po."CreatedDate",
    po."Id",
    NULL::date AS "EndDate",
    NULL::numeric AS "AdvanceAmount"
   FROM ("SEPTEM"."VW_RT_DismissalRequirementFlow" po
     LEFT JOIN "SEPTEM"."User" cu ON ((po."CreatedUserId" = cu."Id")))
UNION
 SELECT DISTINCT po."UserId",
    po."WorkId",
    po."Operation",
    po."ProductType",
    NULL::uuid AS "ProductTypeId",
    po."WorkCurrentStatusId",
    po."WorkCurrentStatusName",
    po."WorkCurrentStatusCode",
    po."StatusCanEdit",
    po."StatusCanDelete",
    po."StatusCanPrint",
    po."Id" AS "ProductId",
    po."ConfirmedUserId",
    concat(' ', cu."FirstName", ' ', cu."LastName", ' ', cu."PatronymicName") AS "ConfirmedUserName",
    NULL::date AS "StartTime",
    NULL::date AS "EndTime",
    NULL::text AS "Shipping",
    po."Days",
    NULL::uuid AS "DestinationId",
    NULL::text AS "DestinationName",
    po."EmployeeId",
    NULL::text AS "Description",
    NULL::text AS "Cause",
    po."CreatedUserId",
    po."StartDate",
    po."CreatedDate",
    po."Id",
    po."EndDate",
    NULL::numeric AS "AdvanceAmount"
   FROM ("SEPTEM"."VW_RT_RemoteJobFlow" po
     LEFT JOIN "SEPTEM"."User" cu ON ((po."ConfirmedUserId" = cu."Id")))
UNION
 SELECT DISTINCT po."UserId",
    po."WorkId",
    po."Operation",
    po."ProductType",
    NULL::uuid AS "ProductTypeId",
    po."WorkCurrentStatusId",
    po."WorkCurrentStatusName",
    po."WorkCurrentStatusCode",
    po."StatusCanEdit",
    po."StatusCanDelete",
    po."StatusCanPrint",
    po."Id" AS "ProductId",
    NULL::uuid AS "ConfirmedUserId",
    NULL::text AS "ConfirmedUserName",
    NULL::date AS "StartTime",
    NULL::date AS "EndTime",
    NULL::text AS "Shipping",
    NULL::integer AS "Days",
    NULL::uuid AS "DestinationId",
    NULL::text AS "DestinationName",
    po."EmployeeId",
    po."Description",
    po."Type" AS "Cause",
    po."CreatedUserId",
    NULL::date AS "StartDate",
    po."CreatedDate",
    po."Id",
    NULL::date AS "EndDate",
    po."Amount" AS "AdvanceAmount"
   FROM "SEPTEM"."VW_RT_MaterialAssistanceFlow" po
UNION
 SELECT DISTINCT po."UserId",
    po."WorkId",
    po."Operation",
    po."ProductType",
    NULL::uuid AS "ProductTypeId",
    po."WorkCurrentStatusId",
    po."WorkCurrentStatusName",
    po."WorkCurrentStatusCode",
    po."StatusCanEdit",
    po."StatusCanDelete",
    po."StatusCanPrint",
    po."Id" AS "ProductId",
    NULL::uuid AS "ConfirmedUserId",
    NULL::text AS "ConfirmedUserName",
    NULL::date AS "StartTime",
    NULL::date AS "EndTime",
    NULL::text AS "Shipping",
    NULL::integer AS "Days",
    NULL::uuid AS "DestinationId",
    NULL::text AS "DestinationName",
    po."EmployeeId",
    NULL::text AS "Description",
    po."NewSurname" AS "Cause",
    po."CreatedUserId",
    po."ChangedDate" AS "StartDate",
    po."CreatedDate",
    po."Id",
    NULL::date AS "EndDate",
    NULL::numeric AS "AdvanceAmount"
   FROM "SEPTEM"."VW_RT_SurnameChangeRequirementFlow" po
UNION
 SELECT DISTINCT po."UserId",
    po."WorkId",
    po."Operation",
    po."ProductType",
    NULL::uuid AS "ProductTypeId",
    po."WorkCurrentStatusId",
    po."WorkCurrentStatusName",
    po."WorkCurrentStatusCode",
    po."StatusCanEdit",
    po."StatusCanDelete",
    po."StatusCanPrint",
    po."Id" AS "ProductId",
    NULL::uuid AS "ConfirmedUserId",
    NULL::text AS "ConfirmedUserName",
    NULL::date AS "StartTime",
    NULL::date AS "EndTime",
    NULL::text AS "Shipping",
    NULL::integer AS "Days",
    NULL::uuid AS "DestinationId",
    NULL::text AS "DestinationName",
    po."EmployeeId",
    po."Description",
    po."Type" AS "Cause",
    po."CreatedUserId",
    po."StartDate",
    po."CreatedDate",
    po."Id",
    po."EndDate",
    NULL::numeric AS "AdvanceAmount"
   FROM "SEPTEM"."VW_RT_MobilizationRequirementFlow" po
UNION
 SELECT DISTINCT po."UserId",
    po."WorkId",
    po."Operation",
    po."ProductType",
    NULL::uuid AS "ProductTypeId",
    po."WorkCurrentStatusId",
    po."WorkCurrentStatusName",
    po."WorkCurrentStatusCode",
    po."StatusCanEdit",
    po."StatusCanDelete",
    po."StatusCanPrint",
    po."Id" AS "ProductId",
    NULL::uuid AS "ConfirmedUserId",
    NULL::text AS "ConfirmedUserName",
    po."StartTime",
    po."EndTime",
    NULL::text AS "Shipping",
    NULL::integer AS "Days",
    NULL::uuid AS "DestinationId",
    NULL::text AS "DestinationName",
    po."EmployeeId",
    po."Description",
    po."Cause",
    po."CreatedUserId",
    po."StartDate",
    po."CreatedDate",
    po."Id",
    po."EndDate",
    NULL::numeric AS "AdvanceAmount"
   FROM "SEPTEM"."VW_RT_UnWorkHoursRequirementFlow" po
UNION
 SELECT DISTINCT po."UserId",
    po."WorkId",
    po."Operation",
    po."ProductType",
    NULL::uuid AS "ProductTypeId",
    po."WorkCurrentStatusId",
    po."WorkCurrentStatusName",
    po."WorkCurrentStatusCode",
    po."StatusCanEdit",
    po."StatusCanDelete",
    po."StatusCanPrint",
    po."Id" AS "ProductId",
    po."ConfirmedUserId",
    po."ConfirmedUserFullName" AS "ConfirmedUserName",
    po."StartTime",
    po."EndTime",
    NULL::text AS "Shipping",
    NULL::integer AS "Days",
    NULL::uuid AS "DestinationId",
    NULL::text AS "DestinationName",
    po."EmployeeId",
    po."Description",
    po."Cause",
    po."CreatedUserId",
    po."StartDate",
    po."CreatedDate",
    po."Id",
    po."EndDate",
    NULL::numeric AS "AdvanceAmount"
   FROM "SEPTEM"."VW_RT_WorkingHoursReductionRequirementFlow" po
UNION
 SELECT DISTINCT po."UserId",
    po."WorkId",
    po."Operation",
    po."ProductType",
    NULL::uuid AS "ProductTypeId",
    po."WorkCurrentStatusId",
    po."WorkCurrentStatusName",
    po."WorkCurrentStatusCode",
    po."StatusCanEdit",
    po."StatusCanDelete",
    po."StatusCanPrint",
    po."Id" AS "ProductId",
    NULL::uuid AS "ConfirmedUserId",
    NULL::text AS "ConfirmedUserName",
    NULL::date AS "StartTime",
    NULL::date AS "EndTime",
    NULL::text AS "Shipping",
    NULL::integer AS "Days",
    NULL::uuid AS "DestinationId",
    NULL::text AS "DestinationName",
    po."EmployeeId",
    po."Description",
    po."Cause",
    po."CreatedUserId",
    po."StartDate",
    po."CreatedDate",
    po."Id",
    po."EndDate",
    NULL::numeric AS "AdvanceAmount"
   FROM "SEPTEM"."VW_RT_WorkOrWeekendRequirementFlow" po
UNION
 SELECT DISTINCT po."UserId",
    po."WorkId",
    po."Operation",
    po."ProductType",
    NULL::uuid AS "ProductTypeId",
    po."WorkCurrentStatusId",
    po."WorkCurrentStatusName",
    po."WorkCurrentStatusCode",
    po."StatusCanEdit",
    po."StatusCanDelete",
    po."StatusCanPrint",
    po."Id" AS "ProductId",
    NULL::uuid AS "ConfirmedUserId",
    NULL::text AS "ConfirmedUserName",
    NULL::date AS "StartTime",
    NULL::date AS "EndTime",
    NULL::text AS "Shipping",
    po."Days",
    NULL::uuid AS "DestinationId",
    NULL::text AS "DestinationName",
    po."EmployeeId",
    po."Basis" AS "Description",
    NULL::text AS "Cause",
    po."CreatedUserId",
    NULL::date AS "StartDate",
    po."CreatedDate",
    po."Id",
    NULL::date AS "EndDate",
    NULL::numeric AS "AdvanceAmount"
   FROM "SEPTEM"."VW_RT_CompensationRequirementFlow" po
UNION
 SELECT DISTINCT po."UserId",
    po."WorkId",
    po."Operation",
    po."ProductType",
    NULL::uuid AS "ProductTypeId",
    po."WorkCurrentStatusId",
    po."WorkCurrentStatusName",
    po."WorkCurrentStatusCode",
    po."StatusCanEdit",
    po."StatusCanDelete",
    po."StatusCanPrint",
    po."Id" AS "ProductId",
    NULL::uuid AS "ConfirmedUserId",
    NULL::text AS "ConfirmedUserName",
    NULL::date AS "StartTime",
    NULL::date AS "EndTime",
    NULL::text AS "Shipping",
    NULL::integer AS "Days",
    NULL::uuid AS "DestinationId",
    NULL::text AS "DestinationName",
    po."EmployeeId",
    po."Basis" AS "Description",
    po."TrainingPlace" AS "Cause",
    po."CreatedUserId",
    po."StartDate",
    po."CreatedDate",
    po."Id",
    po."EndDate",
    NULL::numeric AS "AdvanceAmount"
   FROM "SEPTEM"."VW_RT_TrainingEventRequirementFlow" po
UNION
 SELECT DISTINCT po."UserId",
    po."WorkId",
    po."Operation",
    po."ProductType",
    NULL::uuid AS "ProductTypeId",
    po."WorkCurrentStatusId",
    po."WorkCurrentStatusName",
    po."WorkCurrentStatusCode",
    po."StatusCanEdit",
    po."StatusCanDelete",
    po."StatusCanPrint",
    po."Id" AS "ProductId",
    NULL::uuid AS "ConfirmedUserId",
    NULL::text AS "ConfirmedUserName",
    NULL::date AS "StartTime",
    NULL::date AS "EndTime",
    NULL::text AS "Shipping",
    NULL::integer AS "Days",
    NULL::uuid AS "DestinationId",
    NULL::text AS "DestinationName",
    po."EmployeeId",
    po."Description",
    po."Type" AS "Cause",
    po."CreatedUserId",
    NULL::date AS "StartDate",
    po."CreatedDate",
    po."Id",
    NULL::date AS "EndDate",
    NULL::numeric AS "AdvanceAmount"
   FROM "SEPTEM"."VW_RT_RequestRequestRequirementFlow" po;

CREATE VIEW "SEPTEM"."VW_SK_Balance" AS
 SELECT "SK_Balance"."Id",
    "SK_Balance"."CollectionId",
    "SK_Balance"."Version",
    "SK_Balance"."BusinessId",
    "SK_Products"."ProductGroupId",
    "SK_Balance"."ProductId",
    "SK_Balance"."Amount",
    "SK_ProductGroups"."Name" AS "ProductGroup",
    "SK_Products"."Name" AS "Product",
    "SK_Units"."Name" AS "Unit",
    "SK_ProductGroups"."Code" AS "ProductGroupCode"
   FROM ((("SEPTEM"."SK_Balance"
     JOIN "SEPTEM"."SK_Products" ON (("SK_Balance"."ProductId" = "SK_Products"."Id")))
     JOIN "SEPTEM"."SK_ProductGroups" ON (("SK_Products"."ProductGroupId" = "SK_ProductGroups"."Id")))
     JOIN "SEPTEM"."SK_Units" ON (("SK_Products"."UnitId" = "SK_Units"."Id")));

CREATE VIEW "SEPTEM"."VW_SK_BalanceByGroup" AS
 SELECT "SK_ProductGroups"."Id",
    "SK_Balance"."BusinessId",
    "SK_Units"."Name" AS "Unit",
    "SK_ProductGroups"."Code" AS "ProductGroupCode",
    "SK_ProductGroups"."Name" AS "ProductGroup",
    sum("SK_Balance"."Amount") AS "Amount"
   FROM ((("SEPTEM"."SK_Balance"
     JOIN "SEPTEM"."SK_Products" ON (("SK_Balance"."ProductId" = "SK_Products"."Id")))
     JOIN "SEPTEM"."SK_ProductGroups" ON (("SK_Products"."ProductGroupId" = "SK_ProductGroups"."Id")))
     JOIN "SEPTEM"."SK_Units" ON (("SK_Products"."UnitId" = "SK_Units"."Id")))
  GROUP BY "SK_ProductGroups"."Id", "SK_Balance"."BusinessId", "SK_Units"."Name", "SK_ProductGroups"."Code", "SK_ProductGroups"."Name";

CREATE VIEW "SEPTEM"."VW_SK_BankAccountBalances" AS
 SELECT bab."Id",
    bb."Name" AS "BranchName",
    bab."BankAccountId",
    ba."IBAN",
    bab."Amount",
    bab."BusinessId",
    bab."BalanceType",
    c."Name" AS "CurrencyName"
   FROM ((("SEPTEM"."SK_BankAccountBalances" bab
     JOIN "SEPTEM"."SK_BankAccounts" ba ON ((ba."Id" = bab."BankAccountId")))
     JOIN "SEPTEM"."SK_BankBranches" bb ON ((bb."Id" = ba."BankBranchId")))
     JOIN "SEPTEM"."SK_Currencies" c ON ((c."Id" = ba."CurrencyId")));

CREATE VIEW "SEPTEM"."VW_SK_BankAccounts" AS
 SELECT ba."Id",
    ((((bb."Name")::text || '<'::text) || (ba."IBAN")::text) || '>'::text) AS "FullName",
    ba."BankBranchId",
    ba."IBAN",
    ba."BusinessId",
    ba."CorrBankName",
    ba."CorrBankSwift",
    ba."CorrBankAccount",
    ba."CorrAccount",
    ba."CurrencyId",
    bb."Name" AS "BankBranchName",
    c."Name" AS "CurrencyName",
    ba."AccountType"
   FROM (("SEPTEM"."SK_BankAccounts" ba
     JOIN "SEPTEM"."SK_BankBranches" bb ON ((bb."Id" = ba."BankBranchId")))
     JOIN "SEPTEM"."SK_Currencies" c ON ((c."Id" = ba."CurrencyId")));

CREATE VIEW "SEPTEM"."VW_SK_BankOperationIncomeAdvance" AS
 SELECT c."Id",
    c."Code",
    c."DocDate",
    cu."Name" AS "CustomerName",
    cu."TIN",
    ct."Name" AS "OperationType",
    c."IncomeAmount",
    c."AdvanceAmount" AS "OutcomeAmount",
    c."Note",
    COALESCE(p."Name", c."Purpose") AS "Purpose",
    0.00 AS "Amount",
    ''::text AS "PaymentType",
    ''::text AS "DocNum",
    ''::text AS "DocNumVat",
    0.00 AS "AmountVat",
    c."BusinessId",
    c."BankAccountId",
    c."CustomerId",
    ''::text AS "OutcomeDocNum",
    ''::text AS "OutcomeDocNumVat",
    0.00 AS "OutAmount",
    0.00 AS "OutAmountVat",
    0 AS "RowNumber",
    NULL::date AS "IncomeDocDate",
    NULL::date AS "IncomeDocDateVat",
    NULL::date AS "OutcomeDocDate",
    NULL::date AS "OutcomeDocDateVat"
   FROM ((("SEPTEM"."SK_BankOperations" c
     JOIN "SEPTEM"."SK_CashOperationTypes" ct ON ((ct."Id" = c."CashOperationTypeId")))
     LEFT JOIN "SEPTEM"."SK_Customers" cu ON ((cu."Id" = c."CustomerId")))
     LEFT JOIN "SEPTEM"."SK_Purposes" p ON ((p."Id" = c."OperationPurposeId")))
  WHERE (((c."Status")::text = 'CONFIRMED'::text) AND ((ct."Code")::text = 'CustomerIncome'::text) AND (c."AdvanceAmount" > (0)::numeric));

CREATE VIEW "SEPTEM"."VW_SK_BankOperationIncomeItemMain" AS
 SELECT c."Id",
    c."Code",
    c."DocDate",
    cu."Name" AS "CustomerName",
    cu."TIN",
    ct."Name" AS "OperationType",
    0.00 AS "IncomeAmount",
    COALESCE(income."Amount", 0.00) AS "OutcomeAmount",
    c."Note",
    COALESCE(p."Name", c."Purpose") AS "Purpose",
    income."Amount",
    income."PaymentType",
    (((i."DocNum")::text || ' '::text) || (i."DocSerial")::text) AS "DocNum",
    ''::text AS "DocNumVat",
    0 AS "AmountVat",
    c."BusinessId",
    c."BankAccountId",
    c."CustomerId",
    ''::text AS "OutcomeDocNum",
    ''::text AS "OutcomeDocNumVat",
    0.00 AS "OutAmount",
    0.00 AS "OutAmountVat",
    0 AS "RowNumber",
    (i."DocDate")::date AS "IncomeDocDate",
    NULL::date AS "IncomeDocDateVat",
    NULL::date AS "OutcomeDocDate",
    NULL::date AS "OutcomeDocDateVat"
   FROM ((((("SEPTEM"."SK_BankOperations" c
     JOIN "SEPTEM"."SK_CashOperationTypes" ct ON ((ct."Id" = c."CashOperationTypeId")))
     LEFT JOIN "SEPTEM"."SK_Customers" cu ON ((cu."Id" = c."CustomerId")))
     LEFT JOIN "SEPTEM"."SK_Purposes" p ON ((p."Id" = c."OperationPurposeId")))
     JOIN ( SELECT "SK_BankOperationIncomeItems"."Id",
            "SK_BankOperationIncomeItems"."CollectionId",
            "SK_BankOperationIncomeItems"."Version",
            "SK_BankOperationIncomeItems"."IncomeId",
            "SK_BankOperationIncomeItems"."Amount",
            "SK_BankOperationIncomeItems"."PaymentType"
           FROM "SEPTEM"."SK_BankOperationIncomeItems"
          WHERE (("SK_BankOperationIncomeItems"."PaymentType")::text = 'MainAmount'::text)) income ON ((income."CollectionId" = c."IncomeItemsCollectionId")))
     LEFT JOIN "SEPTEM"."SK_Incomes" i ON ((i."Id" = income."IncomeId")))
  WHERE ((c."Status")::text = 'CONFIRMED'::text);

CREATE VIEW "SEPTEM"."VW_SK_BankOperationIncomeItemVat" AS
 SELECT c."Id",
    c."Code",
    c."DocDate",
    cu."Name" AS "CustomerName",
    cu."TIN",
    ct."Name" AS "OperationType",
    0.00 AS "IncomeAmount",
    COALESCE(incomevat."Amount", 0.00) AS "OutcomeAmount",
    c."Note",
    COALESCE(p."Name", c."Purpose") AS "Purpose",
    0.00 AS "Amount",
    incomevat."PaymentType",
    ''::text AS "DocNum",
    (((ii."DocNum")::text || ' '::text) || (ii."DocSerial")::text) AS "DocNumVat",
    incomevat."Amount" AS "AmountVat",
    c."BusinessId",
    c."BankAccountId",
    c."CustomerId",
    ''::text AS "OutcomeDocNum",
    ''::text AS "OutcomeDocNumVat",
    0.00 AS "OutAmount",
    0.00 AS "OutAmountVat",
    0 AS "RowNumber",
    NULL::date AS "IncomeDocDate",
    (ii."DocDate")::date AS "IncomeDocDateVat",
    NULL::date AS "OutcomeDocDate",
    NULL::date AS "OutcomeDocDateVat"
   FROM ((((("SEPTEM"."SK_BankOperations" c
     JOIN "SEPTEM"."SK_CashOperationTypes" ct ON ((ct."Id" = c."CashOperationTypeId")))
     LEFT JOIN "SEPTEM"."SK_Customers" cu ON ((cu."Id" = c."CustomerId")))
     LEFT JOIN "SEPTEM"."SK_Purposes" p ON ((p."Id" = c."OperationPurposeId")))
     JOIN ( SELECT "SK_BankOperationIncomeItems"."Id",
            "SK_BankOperationIncomeItems"."CollectionId",
            "SK_BankOperationIncomeItems"."Version",
            "SK_BankOperationIncomeItems"."IncomeId",
            "SK_BankOperationIncomeItems"."Amount",
            "SK_BankOperationIncomeItems"."PaymentType"
           FROM "SEPTEM"."SK_BankOperationIncomeItems"
          WHERE (("SK_BankOperationIncomeItems"."PaymentType")::text = 'VatAmount'::text)) incomevat ON ((incomevat."CollectionId" = c."IncomeItemsCollectionId")))
     LEFT JOIN "SEPTEM"."SK_Incomes" ii ON ((ii."Id" = incomevat."IncomeId")))
  WHERE ((c."Status")::text = 'CONFIRMED'::text);

CREATE VIEW "SEPTEM"."VW_SK_BankOperationOther" AS
 SELECT c."Id",
    c."Code",
    c."DocDate",
    cu."Name" AS "CustomerName",
    cu."TIN",
    ct."Name" AS "OperationType",
    c."IncomeAmount",
    c."OutcomeAmount",
    c."Note",
    COALESCE(p."Name", c."Purpose") AS "Purpose",
    0.00 AS "Amount",
    ''::text AS "PaymentType",
    ''::text AS "DocNum",
    ''::text AS "DocNumVat",
    0.00 AS "AmountVat",
    c."BusinessId",
    c."BankAccountId",
    c."CustomerId",
    ''::text AS "OutcomeDocNum",
    ''::text AS "OutcomeDocNumVat",
    0.00 AS "OutAmount",
    0.00 AS "OutAmountVat",
    0 AS "RowNumber",
    NULL::date AS "IncomeDocDate",
    NULL::date AS "IncomeDocDateVat",
    NULL::date AS "OutcomeDocDate",
    NULL::date AS "OutcomeDocDateVat"
   FROM ((("SEPTEM"."SK_BankOperations" c
     JOIN "SEPTEM"."SK_CashOperationTypes" ct ON ((ct."Id" = c."CashOperationTypeId")))
     LEFT JOIN "SEPTEM"."SK_Customers" cu ON ((cu."Id" = c."CustomerId")))
     LEFT JOIN "SEPTEM"."SK_Purposes" p ON ((p."Id" = c."OperationPurposeId")))
  WHERE (((c."Status")::text = 'CONFIRMED'::text) AND ((ct."Code")::text <> ALL (ARRAY[('CustomerIncome'::character varying)::text, ('CustomerOutcome'::character varying)::text])));

CREATE VIEW "SEPTEM"."VW_SK_BankOperationOutcomeAdvance" AS
 SELECT c."Id",
    c."Code",
    c."DocDate",
    cu."Name" AS "CustomerName",
    cu."TIN",
    ct."Name" AS "OperationType",
    c."AdvanceAmount" AS "IncomeAmount",
    c."OutcomeAmount",
    c."Note",
    COALESCE(p."Name", c."Purpose") AS "Purpose",
    0.00 AS "Amount",
    ''::text AS "PaymentType",
    ''::text AS "DocNum",
    ''::text AS "DocNumVat",
    0.00 AS "AmountVat",
    c."BusinessId",
    c."BankAccountId",
    c."CustomerId",
    ''::text AS "OutcomeDocNum",
    ''::text AS "OutcomeDocNumVat",
    0.00 AS "OutAmount",
    0.00 AS "OutAmountVat",
    0 AS "RowNumber",
    NULL::date AS "IncomeDocDate",
    NULL::date AS "IncomeDocDateVat",
    NULL::date AS "OutcomeDocDate",
    NULL::date AS "OutcomeDocDateVat"
   FROM ((("SEPTEM"."SK_BankOperations" c
     JOIN "SEPTEM"."SK_CashOperationTypes" ct ON ((ct."Id" = c."CashOperationTypeId")))
     LEFT JOIN "SEPTEM"."SK_Customers" cu ON ((cu."Id" = c."CustomerId")))
     LEFT JOIN "SEPTEM"."SK_Purposes" p ON ((p."Id" = c."OperationPurposeId")))
  WHERE (((c."Status")::text = 'CONFIRMED'::text) AND ((ct."Code")::text = 'CustomerOutcome'::text) AND (c."AdvanceAmount" > (0)::numeric));

CREATE VIEW "SEPTEM"."VW_SK_BankOperationOutcomeItemMain" AS
 SELECT c."Id",
    c."Code",
    c."DocDate",
    cu."Name" AS "CustomerName",
    cu."TIN",
    ct."Name" AS "OperationType",
    COALESCE(outcome."Amount", 0.00) AS "IncomeAmount",
    0.00 AS "OutcomeAmount",
    c."Note",
    COALESCE(p."Name", c."Purpose") AS "Purpose",
    0.00 AS "Amount",
    outcome."PaymentType",
    ''::text AS "DocNum",
    ''::text AS "DocNumVat",
    0 AS "AmountVat",
    c."BusinessId",
    c."BankAccountId",
    c."CustomerId",
    (((o."DocNum")::text || ' '::text) || (o."DocSerial")::text) AS "OutcomeDocNum",
    ''::text AS "OutcomeDocNumVat",
    outcome."Amount" AS "OutAmount",
    0.00 AS "OutAmountVat",
    0 AS "RowNumber",
    NULL::date AS "IncomeDocDate",
    NULL::date AS "IncomeDocDateVat",
    (o."DocDate")::date AS "OutcomeDocDate",
    NULL::date AS "OutcomeDocDateVat"
   FROM ((((("SEPTEM"."SK_BankOperations" c
     JOIN "SEPTEM"."SK_CashOperationTypes" ct ON ((ct."Id" = c."CashOperationTypeId")))
     LEFT JOIN "SEPTEM"."SK_Customers" cu ON ((cu."Id" = c."CustomerId")))
     LEFT JOIN "SEPTEM"."SK_Purposes" p ON ((p."Id" = c."OperationPurposeId")))
     JOIN ( SELECT "SK_BankOperationOutcomeItems"."Id",
            "SK_BankOperationOutcomeItems"."CollectionId",
            "SK_BankOperationOutcomeItems"."Version",
            "SK_BankOperationOutcomeItems"."OutcomeId",
            "SK_BankOperationOutcomeItems"."Amount",
            "SK_BankOperationOutcomeItems"."PaymentType"
           FROM "SEPTEM"."SK_BankOperationOutcomeItems"
          WHERE (("SK_BankOperationOutcomeItems"."PaymentType")::text = 'MainAmount'::text)) outcome ON ((outcome."CollectionId" = c."OutcomeItemsCollectionId")))
     LEFT JOIN "SEPTEM"."SK_Outcomes" o ON ((o."Id" = outcome."OutcomeId")))
  WHERE ((c."Status")::text = 'CONFIRMED'::text);

CREATE VIEW "SEPTEM"."VW_SK_BankOperationOutcomeItemVat" AS
 SELECT c."Id",
    c."Code",
    c."DocDate",
    cu."Name" AS "CustomerName",
    cu."TIN",
    ct."Name" AS "OperationType",
    COALESCE(outcomevat."Amount", 0.00) AS "IncomeAmount",
    0.00 AS "OutcomeAmount",
    c."Note",
    COALESCE(p."Name", c."Purpose") AS "Purpose",
    0.00 AS "Amount",
    outcomevat."PaymentType",
    ''::text AS "DocNum",
    ''::text AS "DocNumVat",
    0 AS "AmountVat",
    c."BusinessId",
    c."BankAccountId",
    c."CustomerId",
    ''::text AS "OutcomeDocNum",
    (((oi."DocNum")::text || ' '::text) || (oi."DocSerial")::text) AS "OutcomeDocNumVat",
    0.00 AS "OutAmount",
    outcomevat."Amount" AS "OutAmountVat",
    0 AS "RowNumber",
    NULL::date AS "IncomeDocDate",
    NULL::date AS "IncomeDocDateVat",
    NULL::date AS "OutcomeDocDate",
    (oi."DocDate")::date AS "OutcomeDocDateVat"
   FROM ((((("SEPTEM"."SK_BankOperations" c
     JOIN "SEPTEM"."SK_CashOperationTypes" ct ON ((ct."Id" = c."CashOperationTypeId")))
     LEFT JOIN "SEPTEM"."SK_Customers" cu ON ((cu."Id" = c."CustomerId")))
     LEFT JOIN "SEPTEM"."SK_Purposes" p ON ((p."Id" = c."OperationPurposeId")))
     JOIN ( SELECT "SK_BankOperationOutcomeItems"."Id",
            "SK_BankOperationOutcomeItems"."CollectionId",
            "SK_BankOperationOutcomeItems"."Version",
            "SK_BankOperationOutcomeItems"."OutcomeId",
            "SK_BankOperationOutcomeItems"."Amount",
            "SK_BankOperationOutcomeItems"."PaymentType"
           FROM "SEPTEM"."SK_BankOperationOutcomeItems"
          WHERE (("SK_BankOperationOutcomeItems"."PaymentType")::text = 'VatAmount'::text)) outcomevat ON ((outcomevat."CollectionId" = c."OutcomeItemsCollectionId")))
     LEFT JOIN "SEPTEM"."SK_Outcomes" oi ON ((oi."Id" = outcomevat."OutcomeId")))
  WHERE ((c."Status")::text = 'CONFIRMED'::text);

CREATE VIEW "SEPTEM"."VW_SK_BankOperationDetailReport" AS
 SELECT "Id",
    "Code",
    "DocDate",
    "CustomerName",
    "TIN",
    "OperationType",
    "IncomeAmount",
    "OutcomeAmount",
    "Note",
    "Purpose",
    "Amount",
    "PaymentType",
    "DocNum",
    "DocNumVat",
    "AmountVat",
    "BusinessId",
    "BankAccountId",
    "CustomerId",
    "OutcomeDocNum",
    "OutcomeDocNumVat",
    "OutAmount",
    "OutAmountVat",
    "RowNumber",
    0.00 AS "CashBalance",
    "IncomeDocDate",
    "IncomeDocDateVat",
    "OutcomeDocDate",
    "OutcomeDocDateVat"
   FROM ( SELECT "VW_SK_BankOperationOutcomeItemVat"."Id",
            "VW_SK_BankOperationOutcomeItemVat"."Code",
            "VW_SK_BankOperationOutcomeItemVat"."DocDate",
            "VW_SK_BankOperationOutcomeItemVat"."CustomerName",
            "VW_SK_BankOperationOutcomeItemVat"."TIN",
            "VW_SK_BankOperationOutcomeItemVat"."OperationType",
            "VW_SK_BankOperationOutcomeItemVat"."IncomeAmount",
            "VW_SK_BankOperationOutcomeItemVat"."OutcomeAmount",
            "VW_SK_BankOperationOutcomeItemVat"."Note",
            "VW_SK_BankOperationOutcomeItemVat"."Purpose",
            "VW_SK_BankOperationOutcomeItemVat"."Amount",
            "VW_SK_BankOperationOutcomeItemVat"."PaymentType",
            "VW_SK_BankOperationOutcomeItemVat"."DocNum",
            "VW_SK_BankOperationOutcomeItemVat"."DocNumVat",
            "VW_SK_BankOperationOutcomeItemVat"."AmountVat",
            "VW_SK_BankOperationOutcomeItemVat"."BusinessId",
            "VW_SK_BankOperationOutcomeItemVat"."BankAccountId",
            "VW_SK_BankOperationOutcomeItemVat"."CustomerId",
            "VW_SK_BankOperationOutcomeItemVat"."OutcomeDocNum",
            "VW_SK_BankOperationOutcomeItemVat"."OutcomeDocNumVat",
            "VW_SK_BankOperationOutcomeItemVat"."OutAmount",
            "VW_SK_BankOperationOutcomeItemVat"."OutAmountVat",
            "VW_SK_BankOperationOutcomeItemVat"."RowNumber",
            "VW_SK_BankOperationOutcomeItemVat"."IncomeDocDate",
            "VW_SK_BankOperationOutcomeItemVat"."IncomeDocDateVat",
            "VW_SK_BankOperationOutcomeItemVat"."OutcomeDocDate",
            "VW_SK_BankOperationOutcomeItemVat"."OutcomeDocDateVat"
           FROM "SEPTEM"."VW_SK_BankOperationOutcomeItemVat"
        UNION ALL
         SELECT "VW_SK_BankOperationOutcomeItemMain"."Id",
            "VW_SK_BankOperationOutcomeItemMain"."Code",
            "VW_SK_BankOperationOutcomeItemMain"."DocDate",
            "VW_SK_BankOperationOutcomeItemMain"."CustomerName",
            "VW_SK_BankOperationOutcomeItemMain"."TIN",
            "VW_SK_BankOperationOutcomeItemMain"."OperationType",
            "VW_SK_BankOperationOutcomeItemMain"."IncomeAmount",
            "VW_SK_BankOperationOutcomeItemMain"."OutcomeAmount",
            "VW_SK_BankOperationOutcomeItemMain"."Note",
            "VW_SK_BankOperationOutcomeItemMain"."Purpose",
            "VW_SK_BankOperationOutcomeItemMain"."Amount",
            "VW_SK_BankOperationOutcomeItemMain"."PaymentType",
            "VW_SK_BankOperationOutcomeItemMain"."DocNum",
            "VW_SK_BankOperationOutcomeItemMain"."DocNumVat",
            "VW_SK_BankOperationOutcomeItemMain"."AmountVat",
            "VW_SK_BankOperationOutcomeItemMain"."BusinessId",
            "VW_SK_BankOperationOutcomeItemMain"."BankAccountId",
            "VW_SK_BankOperationOutcomeItemMain"."CustomerId",
            "VW_SK_BankOperationOutcomeItemMain"."OutcomeDocNum",
            "VW_SK_BankOperationOutcomeItemMain"."OutcomeDocNumVat",
            "VW_SK_BankOperationOutcomeItemMain"."OutAmount",
            "VW_SK_BankOperationOutcomeItemMain"."OutAmountVat",
            "VW_SK_BankOperationOutcomeItemMain"."RowNumber",
            "VW_SK_BankOperationOutcomeItemMain"."IncomeDocDate",
            "VW_SK_BankOperationOutcomeItemMain"."IncomeDocDateVat",
            "VW_SK_BankOperationOutcomeItemMain"."OutcomeDocDate",
            "VW_SK_BankOperationOutcomeItemMain"."OutcomeDocDateVat"
           FROM "SEPTEM"."VW_SK_BankOperationOutcomeItemMain"
        UNION ALL
         SELECT "VW_SK_BankOperationIncomeItemVat"."Id",
            "VW_SK_BankOperationIncomeItemVat"."Code",
            "VW_SK_BankOperationIncomeItemVat"."DocDate",
            "VW_SK_BankOperationIncomeItemVat"."CustomerName",
            "VW_SK_BankOperationIncomeItemVat"."TIN",
            "VW_SK_BankOperationIncomeItemVat"."OperationType",
            "VW_SK_BankOperationIncomeItemVat"."IncomeAmount",
            "VW_SK_BankOperationIncomeItemVat"."OutcomeAmount",
            "VW_SK_BankOperationIncomeItemVat"."Note",
            "VW_SK_BankOperationIncomeItemVat"."Purpose",
            "VW_SK_BankOperationIncomeItemVat"."Amount",
            "VW_SK_BankOperationIncomeItemVat"."PaymentType",
            "VW_SK_BankOperationIncomeItemVat"."DocNum",
            "VW_SK_BankOperationIncomeItemVat"."DocNumVat",
            "VW_SK_BankOperationIncomeItemVat"."AmountVat",
            "VW_SK_BankOperationIncomeItemVat"."BusinessId",
            "VW_SK_BankOperationIncomeItemVat"."BankAccountId",
            "VW_SK_BankOperationIncomeItemVat"."CustomerId",
            "VW_SK_BankOperationIncomeItemVat"."OutcomeDocNum",
            "VW_SK_BankOperationIncomeItemVat"."OutcomeDocNumVat",
            "VW_SK_BankOperationIncomeItemVat"."OutAmount",
            "VW_SK_BankOperationIncomeItemVat"."OutAmountVat",
            "VW_SK_BankOperationIncomeItemVat"."RowNumber",
            "VW_SK_BankOperationIncomeItemVat"."IncomeDocDate",
            "VW_SK_BankOperationIncomeItemVat"."IncomeDocDateVat",
            "VW_SK_BankOperationIncomeItemVat"."OutcomeDocDate",
            "VW_SK_BankOperationIncomeItemVat"."OutcomeDocDateVat"
           FROM "SEPTEM"."VW_SK_BankOperationIncomeItemVat"
        UNION ALL
         SELECT "VW_SK_BankOperationIncomeItemMain"."Id",
            "VW_SK_BankOperationIncomeItemMain"."Code",
            "VW_SK_BankOperationIncomeItemMain"."DocDate",
            "VW_SK_BankOperationIncomeItemMain"."CustomerName",
            "VW_SK_BankOperationIncomeItemMain"."TIN",
            "VW_SK_BankOperationIncomeItemMain"."OperationType",
            "VW_SK_BankOperationIncomeItemMain"."IncomeAmount",
            "VW_SK_BankOperationIncomeItemMain"."OutcomeAmount",
            "VW_SK_BankOperationIncomeItemMain"."Note",
            "VW_SK_BankOperationIncomeItemMain"."Purpose",
            "VW_SK_BankOperationIncomeItemMain"."Amount",
            "VW_SK_BankOperationIncomeItemMain"."PaymentType",
            "VW_SK_BankOperationIncomeItemMain"."DocNum",
            "VW_SK_BankOperationIncomeItemMain"."DocNumVat",
            "VW_SK_BankOperationIncomeItemMain"."AmountVat",
            "VW_SK_BankOperationIncomeItemMain"."BusinessId",
            "VW_SK_BankOperationIncomeItemMain"."BankAccountId",
            "VW_SK_BankOperationIncomeItemMain"."CustomerId",
            "VW_SK_BankOperationIncomeItemMain"."OutcomeDocNum",
            "VW_SK_BankOperationIncomeItemMain"."OutcomeDocNumVat",
            "VW_SK_BankOperationIncomeItemMain"."OutAmount",
            "VW_SK_BankOperationIncomeItemMain"."OutAmountVat",
            "VW_SK_BankOperationIncomeItemMain"."RowNumber",
            "VW_SK_BankOperationIncomeItemMain"."IncomeDocDate",
            "VW_SK_BankOperationIncomeItemMain"."IncomeDocDateVat",
            "VW_SK_BankOperationIncomeItemMain"."OutcomeDocDate",
            "VW_SK_BankOperationIncomeItemMain"."OutcomeDocDateVat"
           FROM "SEPTEM"."VW_SK_BankOperationIncomeItemMain"
        UNION ALL
         SELECT "VW_SK_BankOperationOther"."Id",
            "VW_SK_BankOperationOther"."Code",
            "VW_SK_BankOperationOther"."DocDate",
            "VW_SK_BankOperationOther"."CustomerName",
            "VW_SK_BankOperationOther"."TIN",
            "VW_SK_BankOperationOther"."OperationType",
            "VW_SK_BankOperationOther"."IncomeAmount",
            "VW_SK_BankOperationOther"."OutcomeAmount",
            "VW_SK_BankOperationOther"."Note",
            "VW_SK_BankOperationOther"."Purpose",
            "VW_SK_BankOperationOther"."Amount",
            "VW_SK_BankOperationOther"."PaymentType",
            "VW_SK_BankOperationOther"."DocNum",
            "VW_SK_BankOperationOther"."DocNumVat",
            "VW_SK_BankOperationOther"."AmountVat",
            "VW_SK_BankOperationOther"."BusinessId",
            "VW_SK_BankOperationOther"."BankAccountId",
            "VW_SK_BankOperationOther"."CustomerId",
            "VW_SK_BankOperationOther"."OutcomeDocNum",
            "VW_SK_BankOperationOther"."OutcomeDocNumVat",
            "VW_SK_BankOperationOther"."OutAmount",
            "VW_SK_BankOperationOther"."OutAmountVat",
            "VW_SK_BankOperationOther"."RowNumber",
            "VW_SK_BankOperationOther"."IncomeDocDate",
            "VW_SK_BankOperationOther"."IncomeDocDateVat",
            "VW_SK_BankOperationOther"."OutcomeDocDate",
            "VW_SK_BankOperationOther"."OutcomeDocDateVat"
           FROM "SEPTEM"."VW_SK_BankOperationOther"
        UNION ALL
         SELECT "VW_SK_BankOperationOutcomeAdvance"."Id",
            "VW_SK_BankOperationOutcomeAdvance"."Code",
            "VW_SK_BankOperationOutcomeAdvance"."DocDate",
            "VW_SK_BankOperationOutcomeAdvance"."CustomerName",
            "VW_SK_BankOperationOutcomeAdvance"."TIN",
            "VW_SK_BankOperationOutcomeAdvance"."OperationType",
            "VW_SK_BankOperationOutcomeAdvance"."IncomeAmount",
            "VW_SK_BankOperationOutcomeAdvance"."OutcomeAmount",
            "VW_SK_BankOperationOutcomeAdvance"."Note",
            "VW_SK_BankOperationOutcomeAdvance"."Purpose",
            "VW_SK_BankOperationOutcomeAdvance"."Amount",
            "VW_SK_BankOperationOutcomeAdvance"."PaymentType",
            "VW_SK_BankOperationOutcomeAdvance"."DocNum",
            "VW_SK_BankOperationOutcomeAdvance"."DocNumVat",
            "VW_SK_BankOperationOutcomeAdvance"."AmountVat",
            "VW_SK_BankOperationOutcomeAdvance"."BusinessId",
            "VW_SK_BankOperationOutcomeAdvance"."BankAccountId",
            "VW_SK_BankOperationOutcomeAdvance"."CustomerId",
            "VW_SK_BankOperationOutcomeAdvance"."OutcomeDocNum",
            "VW_SK_BankOperationOutcomeAdvance"."OutcomeDocNumVat",
            "VW_SK_BankOperationOutcomeAdvance"."OutAmount",
            "VW_SK_BankOperationOutcomeAdvance"."OutAmountVat",
            "VW_SK_BankOperationOutcomeAdvance"."RowNumber",
            "VW_SK_BankOperationOutcomeAdvance"."IncomeDocDate",
            "VW_SK_BankOperationOutcomeAdvance"."IncomeDocDateVat",
            "VW_SK_BankOperationOutcomeAdvance"."OutcomeDocDate",
            "VW_SK_BankOperationOutcomeAdvance"."OutcomeDocDateVat"
           FROM "SEPTEM"."VW_SK_BankOperationOutcomeAdvance"
        UNION ALL
         SELECT "VW_SK_BankOperationIncomeAdvance"."Id",
            "VW_SK_BankOperationIncomeAdvance"."Code",
            "VW_SK_BankOperationIncomeAdvance"."DocDate",
            "VW_SK_BankOperationIncomeAdvance"."CustomerName",
            "VW_SK_BankOperationIncomeAdvance"."TIN",
            "VW_SK_BankOperationIncomeAdvance"."OperationType",
            "VW_SK_BankOperationIncomeAdvance"."IncomeAmount",
            "VW_SK_BankOperationIncomeAdvance"."OutcomeAmount",
            "VW_SK_BankOperationIncomeAdvance"."Note",
            "VW_SK_BankOperationIncomeAdvance"."Purpose",
            "VW_SK_BankOperationIncomeAdvance"."Amount",
            "VW_SK_BankOperationIncomeAdvance"."PaymentType",
            "VW_SK_BankOperationIncomeAdvance"."DocNum",
            "VW_SK_BankOperationIncomeAdvance"."DocNumVat",
            "VW_SK_BankOperationIncomeAdvance"."AmountVat",
            "VW_SK_BankOperationIncomeAdvance"."BusinessId",
            "VW_SK_BankOperationIncomeAdvance"."BankAccountId",
            "VW_SK_BankOperationIncomeAdvance"."CustomerId",
            "VW_SK_BankOperationIncomeAdvance"."OutcomeDocNum",
            "VW_SK_BankOperationIncomeAdvance"."OutcomeDocNumVat",
            "VW_SK_BankOperationIncomeAdvance"."OutAmount",
            "VW_SK_BankOperationIncomeAdvance"."OutAmountVat",
            "VW_SK_BankOperationIncomeAdvance"."RowNumber",
            "VW_SK_BankOperationIncomeAdvance"."IncomeDocDate",
            "VW_SK_BankOperationIncomeAdvance"."IncomeDocDateVat",
            "VW_SK_BankOperationIncomeAdvance"."OutcomeDocDate",
            "VW_SK_BankOperationIncomeAdvance"."OutcomeDocDateVat"
           FROM "SEPTEM"."VW_SK_BankOperationIncomeAdvance") tt;

CREATE VIEW "SEPTEM"."VW_SK_BankOperationIncomeItems" AS
 SELECT ii."Id",
    co."Code",
    co."DocDate",
    co."BankAccountId",
    ii."Amount" AS "OutcomeAmount",
    co."Purpose",
    ii."PaymentType",
    ba."BankBranchName",
    ba."IBAN",
    ba."CurrencyName",
    ba."AccountType",
    ii."IncomeId"
   FROM (("SEPTEM"."SK_BankOperations" co
     JOIN "SEPTEM"."SK_BankOperationIncomeItems" ii ON ((ii."CollectionId" = co."IncomeItemsCollectionId")))
     JOIN "SEPTEM"."VW_SK_BankAccounts" ba ON ((ba."Id" = co."BankAccountId")));

CREATE VIEW "SEPTEM"."VW_SK_BankOperationOutcomeItems" AS
 SELECT ii."Id",
    co."Code",
    co."DocDate",
    co."BankAccountId",
    ii."Amount" AS "IncomeAmount",
    co."Purpose",
    ii."PaymentType",
    ba."BankBranchName",
    ba."IBAN",
    ba."CurrencyName",
    ba."AccountType",
    ii."OutcomeId"
   FROM (("SEPTEM"."SK_BankOperations" co
     JOIN "SEPTEM"."SK_BankOperationOutcomeItems" ii ON ((ii."CollectionId" = co."OutcomeItemsCollectionId")))
     JOIN "SEPTEM"."VW_SK_BankAccounts" ba ON ((ba."Id" = co."BankAccountId")));

CREATE VIEW "SEPTEM"."VW_SK_BankOperations" AS
 SELECT tt."Id",
    tt."Status",
    tt."Code",
    tt."CreatedDate",
    tt."DocDate",
    tt."Note",
    tt."BusinessId",
    tt."BankAccountId",
    tt."CashOperationTypeId",
    tt."CustomerId",
    tt."IncomeAmount",
    tt."OutcomeAmount",
    tt."Purpose",
    tt."OperationPurposeId",
    tt."AdvanceAmount",
    COALESCE(st."BalanceAmount", 0.00) AS "BalanceAmount",
    vsba."FullName" AS "BankAccount",
    sc."Name" AS "CustomerName",
    cot."Name" AS "CashOperationTypeName",
    1 AS "RowNumber"
   FROM (((("SEPTEM"."SK_BankOperations" tt
     LEFT JOIN "SEPTEM"."VW_SK_BankAccounts" vsba ON ((vsba."Id" = tt."BankAccountId")))
     LEFT JOIN "SEPTEM"."SK_Customers" sc ON ((sc."Id" = tt."CustomerId")))
     LEFT JOIN "SEPTEM"."SK_CashOperationTypes" cot ON ((cot."Id" = tt."CashOperationTypeId")))
     LEFT JOIN "SEPTEM"."SK_Transactions" st ON ((st."BankOperationId" = tt."Id")))
  WHERE ((tt."Status")::text <> 'CANCELED'::text)
  ORDER BY tt."DocDate", tt."CreatedDate";

CREATE VIEW "SEPTEM"."VW_SK_IncomeDetailReport" AS
 SELECT i."Id",
    c."TIN",
    c."Name" AS "CustomerName",
    i."Status" AS "StatusName",
    i."DocDate",
    i."DocSerial",
    i."DocNum",
    i."Description",
    i."TotalAmount" AS "TotalPrice",
    i."TotalAmount" AS "VatPrice",
    i."TotalVatAmount" AS "TotalVatPrice",
    main."Amount" AS "PaymentAmount",
    main."DocDate" AS "PaymentDocDate",
    vat."Amount" AS "PaymentVat",
    vat."DocDate" AS "PaymentVatDate",
    i."PaymentAmount" AS "Debt",
    i."PaymentVatAmount" AS "DebtVat",
    i."BusinessId"
   FROM ((((("SEPTEM"."SK_Incomes" i
     LEFT JOIN ( SELECT "SK_IncomeItems"."CollectionId",
            sum("SK_IncomeItems"."TotalPrice") AS "TotalPrice",
            sum("SK_IncomeItems"."VatPrice") AS "VatPrice",
            sum("SK_IncomeItems"."TotalVatPrice") AS "TotalVatPrice"
           FROM "SEPTEM"."SK_IncomeItems"
          GROUP BY "SK_IncomeItems"."CollectionId") ii ON ((i."ItemsCollectionId" = ii."CollectionId")))
     LEFT JOIN ( SELECT "SK_IncomeSupportItems"."CollectionId",
            sum("SK_IncomeSupportItems"."TotalPrice") AS "TotalPrice",
            sum("SK_IncomeSupportItems"."VatPrice") AS "VatPrice",
            sum("SK_IncomeSupportItems"."TotalVatPrice") AS "TotalVatPrice"
           FROM "SEPTEM"."SK_IncomeSupportItems"
          GROUP BY "SK_IncomeSupportItems"."CollectionId") support ON ((i."SupportItemsCollectionId" = support."CollectionId")))
     JOIN "SEPTEM"."SK_Customers" c ON ((c."Id" = i."CustomerId")))
     LEFT JOIN ( SELECT oii."IncomeId",
            sum(COALESCE(oii."Amount", (0)::numeric)) AS "Amount",
            max(oi."DocDate") AS "DocDate"
           FROM ("SEPTEM"."SK_BankOperations" oi
             JOIN "SEPTEM"."SK_BankOperationIncomeItems" oii ON ((oi."IncomeItemsCollectionId" = oii."CollectionId")))
          WHERE ((oii."PaymentType")::text = 'MainAmount'::text)
          GROUP BY oii."IncomeId") main ON ((main."IncomeId" = i."Id")))
     LEFT JOIN ( SELECT oii."IncomeId",
            sum(COALESCE(oii."Amount", (0)::numeric)) AS "Amount",
            max(oi."DocDate") AS "DocDate"
           FROM ("SEPTEM"."SK_BankOperations" oi
             JOIN "SEPTEM"."SK_BankOperationIncomeItems" oii ON ((oi."IncomeItemsCollectionId" = oii."CollectionId")))
          WHERE ((oii."PaymentType")::text = 'VatAmount'::text)
          GROUP BY oii."IncomeId") vat ON ((vat."IncomeId" = i."Id")));

CREATE VIEW "SEPTEM"."VW_SK_IncomeReportProducts" AS
 SELECT xx."Id",
    xx."CustomerId",
    xx."DocDate",
    xx."DocType",
    xx."DocNum",
    xx."DocSerial",
    xx."IncomeId",
    xx."ProductName",
    xx."UnitName",
    xx."ProductCode",
    xx."Quantity",
    xx."IssuePrice",
    xx."VatPrice",
    xx."FinalPrice",
    xx."TotalPrice",
    xx."TotalVatPrice",
    cc."Name" AS "CustomerName",
    cc."TIN",
    'Qaimə təsdiqlənib'::bpchar AS "State",
    xx."BusinessId"
   FROM (( SELECT ii."Id",
            i."CustomerId",
            i."DocDate",
            'cari'::text AS "DocType",
            i."DocNum",
            i."DocSerial",
            i."Id" AS "IncomeId",
            ii."ProductFullName" AS "ProductName",
            u."Name" AS "UnitName",
            pg."Code" AS "ProductCode",
            ii."Quantity",
            ii."IssuePrice",
            0 AS "VatPrice",
            ii."FinalPrice",
            ii."TotalPrice",
            ii."TotalVatPrice",
            i."BusinessId"
           FROM (((("SEPTEM"."SK_IncomeItems" ii
             JOIN "SEPTEM"."SK_Incomes" i ON ((i."ItemsCollectionId" = ii."CollectionId")))
             JOIN "SEPTEM"."SK_Products" p ON ((p."Id" = ii."ProductId")))
             JOIN "SEPTEM"."SK_ProductGroups" pg ON ((pg."Id" = p."ProductGroupId")))
             JOIN "SEPTEM"."SK_Units" u ON ((u."Id" = ii."UnitId")))
        UNION ALL
         SELECT ii."Id",
            i."CustomerId",
            i."DocDate",
            'cari'::text AS "DocType",
            i."DocNum",
            i."DocSerial",
            i."Id" AS "IncomeId",
            ii."SupportName" AS "ProductName",
            u."Name" AS "UnitName",
            pg."Code" AS "ProductCode",
            ii."Quantity",
            ii."IssuePrice",
            0 AS "VatPrice",
            (ii."TotalVatPrice" + ii."FinalPrice") AS "FinalPrice",
            ii."TotalPrice",
            ii."TotalVatPrice",
            i."BusinessId"
           FROM (((("SEPTEM"."SK_IncomeSupportItems" ii
             JOIN "SEPTEM"."SK_Incomes" i ON ((i."SupportItemsCollectionId" = ii."CollectionId")))
             JOIN "SEPTEM"."SK_Supports" p ON ((p."Id" = ii."SupportId")))
             JOIN "SEPTEM"."SK_ProductGroups" pg ON ((pg."Id" = p."ProductGroupId")))
             JOIN "SEPTEM"."SK_Units" u ON ((u."Id" = p."UnitId")))) xx
     JOIN "SEPTEM"."SK_Customers" cc ON ((xx."CustomerId" = cc."Id")));

CREATE VIEW "SEPTEM"."VW_SK_Incomes" AS
 SELECT "SK_Incomes"."Id",
    "SK_Incomes"."CreatedDate",
    "SK_Incomes"."Description",
    "SK_Incomes"."BusinessId",
    "SK_Incomes"."AdditionalDescription",
    "SK_Incomes"."CustomerId",
    "SK_Customers"."Name" AS "Customer",
    "SK_Incomes"."TotalAmount" AS "Amount",
    "SK_Incomes"."DocNum",
    "SK_Incomes"."DocSerial",
    "SK_Incomes"."DocDate",
    "SK_Incomes"."TotalVatAmount" AS "VatAmount",
    "SK_Incomes"."PaymentAmount",
    "SK_Incomes"."PaymentVatAmount"
   FROM ("SEPTEM"."SK_Incomes"
     JOIN "SEPTEM"."SK_Customers" ON (("SK_Incomes"."CustomerId" = "SK_Customers"."Id")));

CREATE VIEW "SEPTEM"."VW_SK_OutcomeDetailReport" AS
 SELECT i."Id",
    c."TIN",
    c."Name" AS "CustomerName",
    i."Status" AS "StatusName",
    i."DocDate",
    i."DocSerial",
    i."DocNum",
    i."Description",
    i."TotalAmount" AS "TotalPrice",
    i."TotalAmount" AS "VatPrice",
    i."TotalVatAmount" AS "TotalVatPrice",
    main."Amount" AS "PaymentAmount",
    main."DocDate" AS "PaymentDocDate",
    vat."Amount" AS "PaymentVat",
    vat."DocDate" AS "PaymentVatDate",
    i."PaymentAmount" AS "Debt",
    i."PaymentVatAmount" AS "DebtVat",
    i."BusinessId"
   FROM ((((("SEPTEM"."SK_Outcomes" i
     LEFT JOIN ( SELECT "SK_OutcomeItems"."CollectionId",
            sum("SK_OutcomeItems"."TotalPrice") AS "TotalPrice",
            sum("SK_OutcomeItems"."VatPrice") AS "VatPrice",
            sum("SK_OutcomeItems"."TotalVatPrice") AS "TotalVatPrice"
           FROM "SEPTEM"."SK_OutcomeItems"
          GROUP BY "SK_OutcomeItems"."CollectionId") ii ON ((i."ItemsCollectionId" = ii."CollectionId")))
     LEFT JOIN ( SELECT "SK_OutcomeSuppotItems"."CollectionId",
            sum("SK_OutcomeSuppotItems"."TotalPrice") AS "TotalPrice",
            sum("SK_OutcomeSuppotItems"."VatPrice") AS "VatPrice",
            sum("SK_OutcomeSuppotItems"."TotalVatPrice") AS "TotalVatPrice"
           FROM "SEPTEM"."SK_OutcomeSuppotItems"
          GROUP BY "SK_OutcomeSuppotItems"."CollectionId") support ON ((i."SupportItemsCollectionId" = ii."CollectionId")))
     JOIN "SEPTEM"."SK_Customers" c ON ((c."Id" = i."CustomerId")))
     LEFT JOIN ( SELECT oii."OutcomeId",
            sum(COALESCE(oii."Amount", (0)::numeric)) AS "Amount",
            max(oi."DocDate") AS "DocDate"
           FROM ("SEPTEM"."SK_BankOperations" oi
             JOIN "SEPTEM"."SK_BankOperationOutcomeItems" oii ON ((oi."OutcomeItemsCollectionId" = oii."CollectionId")))
          WHERE ((oii."PaymentType")::text = 'MainAmount'::text)
          GROUP BY oii."OutcomeId") main ON ((main."OutcomeId" = i."Id")))
     LEFT JOIN ( SELECT oii."OutcomeId",
            sum(COALESCE(oii."Amount", (0)::numeric)) AS "Amount",
            max(oi."DocDate") AS "DocDate"
           FROM ("SEPTEM"."SK_BankOperations" oi
             JOIN "SEPTEM"."SK_BankOperationOutcomeItems" oii ON ((oi."OutcomeItemsCollectionId" = oii."CollectionId")))
          WHERE ((oii."PaymentType")::text = 'VatAmount'::text)
          GROUP BY oii."OutcomeId") vat ON ((vat."OutcomeId" = i."Id")));

CREATE VIEW "SEPTEM"."VW_SK_OutcomeReportProducts" AS
 SELECT xx."Id",
    xx."CustomerId",
    xx."DocDate",
    xx."DocType",
    xx."DocNum",
    xx."DocSerial",
    xx."IncomeId",
    xx."ProductName",
    xx."UnitName",
    xx."ProductCode",
    xx."Quantity",
    xx."IssuePrice",
    xx."VatPrice",
    xx."FinalPrice",
    xx."TotalPrice",
    xx."TotalVatPrice",
    cc."Name" AS "CustomerName",
    cc."TIN",
    'Qaimə təsdiqlənib'::bpchar AS "State",
    xx."BusinessId"
   FROM (( SELECT ii."Id",
            i."CustomerId",
            i."DocDate",
            'cari'::text AS "DocType",
            i."DocNum",
            i."DocSerial",
            i."Id" AS "IncomeId",
            p."Name" AS "ProductName",
            u."Name" AS "UnitName",
            pg."Code" AS "ProductCode",
            ii."Quantity",
            ii."IssuePrice",
            0 AS "VatPrice",
            ii."FinalPrice",
            ii."TotalPrice",
            ii."TotalVatPrice",
            i."BusinessId"
           FROM (((("SEPTEM"."SK_OutcomeItems" ii
             JOIN "SEPTEM"."SK_Outcomes" i ON ((i."ItemsCollectionId" = ii."CollectionId")))
             JOIN "SEPTEM"."SK_Products" p ON ((p."Id" = ii."ProductId")))
             JOIN "SEPTEM"."SK_ProductGroups" pg ON ((pg."Id" = p."ProductGroupId")))
             JOIN "SEPTEM"."SK_Units" u ON ((u."Id" = ii."UnitId")))
        UNION ALL
         SELECT ii."Id",
            i."CustomerId",
            i."DocDate",
            'cari'::text AS "DocType",
            i."DocNum",
            i."DocSerial",
            i."Id" AS "IncomeId",
            p."Name" AS "ProductName",
            u."Name" AS "UnitName",
            pg."Code" AS "ProductCode",
            ii."Quantity",
            ii."IssuePrice",
            0 AS "VatPrice",
            ii."FinalPrice",
            ii."TotalPrice",
            ii."TotalVatPrice",
            i."BusinessId"
           FROM (((("SEPTEM"."SK_OutcomeSuppotItems" ii
             JOIN "SEPTEM"."SK_Outcomes" i ON ((i."SupportItemsCollectionId" = ii."CollectionId")))
             JOIN "SEPTEM"."SK_Supports" p ON ((p."Id" = ii."SupportId")))
             JOIN "SEPTEM"."SK_ProductGroups" pg ON ((pg."Id" = p."ProductGroupId")))
             JOIN "SEPTEM"."SK_Units" u ON ((u."Id" = p."UnitId")))) xx
     JOIN "SEPTEM"."SK_Customers" cc ON ((xx."CustomerId" = cc."Id")));

CREATE VIEW "SEPTEM"."VW_SK_Outcomes" AS
 SELECT "SK_Outcomes"."Id",
    "SK_Outcomes"."CreatedDate",
    "SK_Outcomes"."Description",
    "SK_Outcomes"."BusinessId",
    "SK_Outcomes"."AdditionalDescription",
    "SK_Outcomes"."CustomerId",
    "SK_Customers"."Name" AS "Customer",
    "SK_Outcomes"."TotalAmount" AS "Amount",
    "SK_Outcomes"."DocNum",
    "SK_Outcomes"."DocSerial",
    "SK_Outcomes"."DocDate",
    "SK_Outcomes"."TotalVatAmount" AS "VatAmount",
    "SK_Outcomes"."PaymentAmount",
    "SK_Outcomes"."PaymentVatAmount"
   FROM ("SEPTEM"."SK_Outcomes"
     JOIN "SEPTEM"."SK_Customers" ON (("SK_Outcomes"."CustomerId" = "SK_Customers"."Id")));

CREATE VIEW "SEPTEM"."VW_SK_ProductUnits" AS
 SELECT pu."Id",
    pu."UnitId",
    pu."Coefficient",
    pu."IsDefault",
    u."Name" AS "UnitName",
    p."Id" AS "ProductId"
   FROM (("SEPTEM"."SK_ProductUnits" pu
     JOIN "SEPTEM"."SK_Products" p ON ((p."ProductUnitCollectionId" = pu."CollectionId")))
     JOIN "SEPTEM"."SK_Units" u ON ((u."Id" = pu."UnitId")));

CREATE VIEW "SEPTEM"."VW_SK_Products" AS
 SELECT "SK_Products"."Id",
    "SK_Products"."BusinessId",
    "SK_ProductGroups"."Name" AS "ProductGroup",
    "SK_Products"."Name",
    "SK_Products"."Barcode",
    "SK_Products"."Description",
    "SK_Products"."ExciseRate",
    "SK_Products"."VatGroup",
    "SK_Units"."Name" AS "Unit",
    "SK_ProductGroups"."Code" AS "ProductCode"
   FROM (("SEPTEM"."SK_Products"
     JOIN "SEPTEM"."SK_ProductGroups" ON (("SK_Products"."ProductGroupId" = "SK_ProductGroups"."Id")))
     JOIN "SEPTEM"."SK_Units" ON (("SK_Products"."UnitId" = "SK_Units"."Id")));

CREATE VIEW "SEPTEM"."VW_SK_Supports" AS
 SELECT "SK_Supports"."Id",
    "SK_Supports"."Name",
    "SK_Supports"."Note",
    "SK_Supports"."ProductGroupId",
    "SK_Supports"."UnitId",
    "SK_ProductGroups"."Name" AS "ProductGroup",
    "SK_Units"."Name" AS "Unit",
    "SK_ProductGroups"."Code" AS "ProductCode",
    "SK_Supports"."BusinessId"
   FROM (("SEPTEM"."SK_Supports"
     JOIN "SEPTEM"."SK_ProductGroups" ON (("SK_Supports"."ProductGroupId" = "SK_ProductGroups"."Id")))
     JOIN "SEPTEM"."SK_Units" ON (("SK_Supports"."UnitId" = "SK_Units"."Id")));

CREATE VIEW "SEPTEM"."VW_UserAllActive" AS
 SELECT "User"."Id",
    "User"."UserName",
    "User"."Status",
    "User"."Password",
    "User"."PasswordExpiryDate",
    "User"."IsInternal",
    "UserProvider"."Id" AS "ProviderId",
    "UserProvider"."Name" AS "ProviderName",
    "UserProvider"."Code" AS "ProviderCode",
    "UserProvider"."CanChangePassword" AS "ProviderCanChangePassword",
    "UserEmployee"."Id" AS "EmployeeId",
    "User"."ImageId",
    "User"."FirstName" AS "UserFirstName",
    "UserEmployee"."FirstName" AS "EmployeeFirstName",
    "User"."LastName" AS "UserLastName",
    "UserEmployee"."LastName" AS "EmployeeLastName",
    "User"."PatronymicName" AS "UserPatronymicName",
    "UserEmployee"."PatronymicName" AS "EmployeePatronymicName",
    "User"."Email",
    "User"."PhoneNumber"
   FROM (("SEPTEM"."User" "User"
     LEFT JOIN "SEPTEM"."Provider" "UserProvider" ON (("User"."ProviderId" = "UserProvider"."Id")))
     LEFT JOIN "SEPTEM"."WF_Employee" "UserEmployee" ON (("User"."EmployeeId" = "UserEmployee"."Id")));

CREATE VIEW "SEPTEM"."VW_WF_ExecutorAllActive" AS
 SELECT "Executor"."Id",
    "Executor"."Name",
    "ExecutorFlow"."Id" AS "FlowId",
    "ExecutorFlow"."Name" AS "FlowName"
   FROM ("SEPTEM"."WF_Executor" "Executor"
     JOIN "SEPTEM"."WF_Flow" "ExecutorFlow" ON (("Executor"."FlowId" = "ExecutorFlow"."Id")));

CREATE VIEW "SEPTEM"."VW_WF_ExecutorOperationAllActive" AS
 SELECT "ExecutorOperation"."Id",
    "ExecutorOperationFlowStatus"."Id" AS "StatusId",
    "ExecutorOperationFlowStatus"."Name" AS "StatusName",
    "ExecutorOperation"."CollectionId"
   FROM ("SEPTEM"."WF_ExecutorOperation" "ExecutorOperation"
     JOIN "SEPTEM"."WF_FlowStatus" "ExecutorOperationFlowStatus" ON (("ExecutorOperation"."FlowStatusId" = "ExecutorOperationFlowStatus"."Id")));

CREATE VIEW "SEPTEM"."VW_WF_FlowAllActive" AS
 SELECT "Id",
    "Code",
    "Name",
    "InitialStatusId"
   FROM "SEPTEM"."WF_Flow" "Flow";

CREATE VIEW "SEPTEM"."VW_WF_FlowStatusAllActive" AS
 SELECT "FlowStatus"."Id",
    "FlowStatus"."Code",
    "FlowStatus"."Name",
    "FlowStatusFlow"."Id" AS "FlowId",
    "FlowStatusFlow"."Name" AS "FlowName",
    "FlowStatus"."IsInitial"
   FROM ("SEPTEM"."WF_FlowStatus" "FlowStatus"
     JOIN "SEPTEM"."WF_Flow" "FlowStatusFlow" ON (("FlowStatus"."FlowId" = "FlowStatusFlow"."Id")));

CREATE VIEW "SEPTEM"."VW_WF_FlowTransitionAllActive" AS
 SELECT "FlowTransition"."Id",
    "FlowTransition"."Code",
    "FlowTransition"."Name",
    "FlowTransitionFromStatus"."Id" AS "FromStatusId",
    "FlowTransitionFromStatus"."Code" AS "FromStatusCode",
    "FlowTransitionFromStatus"."Name" AS "FromStatusName",
    "FlowTransitionToStatus"."Id" AS "ToStatusId",
    "FlowTransitionToStatus"."Code" AS "ToStatusCode",
    "FlowTransitionToStatus"."Name" AS "ToStatusName",
    "FlowTransition"."CollectionId"
   FROM (("SEPTEM"."WF_FlowTransition" "FlowTransition"
     JOIN "SEPTEM"."WF_FlowStatus" "FlowTransitionFromStatus" ON (("FlowTransition"."FromStatusId" = "FlowTransitionFromStatus"."Id")))
     JOIN "SEPTEM"."WF_FlowStatus" "FlowTransitionToStatus" ON (("FlowTransition"."ToStatusId" = "FlowTransitionToStatus"."Id")));

CREATE VIEW "SEPTEM"."VW_WF_OrganizationAllActive" AS
 SELECT "Organization"."Id",
    "OrganizationType"."Id" AS "TypeId",
    "OrganizationType"."Name" AS "TypeName",
    "OrganizationType"."Code" AS "TypeCode",
    "Organization"."Name",
    "Organization"."Code"
   FROM ("SEPTEM"."WF_Organization" "Organization"
     JOIN "SEPTEM"."WF_OrganizationType" "OrganizationType" ON (("Organization"."TypeId" = "OrganizationType"."Id")));

CREATE VIEW "SEPTEM"."VW_WF_OrganizationRoleAllActive" AS
 SELECT "OrganizationRole"."Id",
    "OrganizationRole"."Code",
    "OrganizationRole"."Name",
    "OrganizationRoleType"."Id" AS "TypeId",
    "OrganizationRoleType"."Name" AS "TypeName",
    "OrganizationRoleStructure"."Id" AS "StructureId",
    "OrganizationRoleStructureOrganizationType"."Id" AS "StructureOrganizationTypeId",
    "OrganizationRoleStructureOrganizationType"."Name" AS "StructureOrganizationTypeName",
    "OrganizationRoleStructureOrganization"."Id" AS "StructureOrganizationId",
    "OrganizationRoleStructureOrganization"."Name" AS "StructureOrganizationName"
   FROM (((("SEPTEM"."WF_OrganizationRole" "OrganizationRole"
     JOIN "SEPTEM"."WF_OrganizationRoleType" "OrganizationRoleType" ON (("OrganizationRole"."TypeId" = "OrganizationRoleType"."Id")))
     JOIN "SEPTEM"."WF_OrganizationStructure" "OrganizationRoleStructure" ON (("OrganizationRole"."StructureId" = "OrganizationRoleStructure"."Id")))
     JOIN "SEPTEM"."WF_Organization" "OrganizationRoleStructureOrganization" ON (("OrganizationRoleStructure"."OrganizationId" = "OrganizationRoleStructureOrganization"."Id")))
     JOIN "SEPTEM"."WF_OrganizationType" "OrganizationRoleStructureOrganizationType" ON (("OrganizationRoleStructureOrganization"."TypeId" = "OrganizationRoleStructureOrganizationType"."Id")));

CREATE VIEW "SEPTEM"."VW_WF_OrganizationStructureAllActive" AS
 SELECT "OrganizationStructure"."Id",
    "OrganizationStructureParent"."Id" AS "ParentId",
    "OrganizationStructureOrganizationType"."Id" AS "OrganizationTypeId",
    "OrganizationStructureOrganizationType"."Name" AS "OrganizationTypeName",
    "OrganizationStructureOrganization"."Id" AS "OrganizationId",
    "OrganizationStructureOrganization"."Name" AS "OrganizationName"
   FROM ((("SEPTEM"."WF_OrganizationStructure" "OrganizationStructure"
     JOIN "SEPTEM"."WF_Organization" "OrganizationStructureOrganization" ON (("OrganizationStructure"."OrganizationId" = "OrganizationStructureOrganization"."Id")))
     JOIN "SEPTEM"."WF_OrganizationType" "OrganizationStructureOrganizationType" ON (("OrganizationStructureOrganization"."TypeId" = "OrganizationStructureOrganizationType"."Id")))
     LEFT JOIN "SEPTEM"."WF_OrganizationStructure" "OrganizationStructureParent" ON (("OrganizationStructure"."ParentId" = "OrganizationStructureParent"."Id")));

CREATE VIEW "SEPTEM"."VW_WF_ProductFlowAllActive" AS
 SELECT "ProductFlow"."Id",
    "ProductFlowFlow"."Id" AS "FlowId",
    "ProductFlowFlow"."Name" AS "FlowName",
    "ProductFlow"."StartOnCreate",
    "ProductFlowProductType"."Id" AS "ProductTypeId",
    "ProductFlowProductType"."Name" AS "ProductTypeName",
    "ProductFlowCondition"."Id" AS "ConditionId",
    "ProductFlowCondition"."Name" AS "ConditionName"
   FROM ((("SEPTEM"."WF_ProductFlow" "ProductFlow"
     JOIN "SEPTEM"."WF_Flow" "ProductFlowFlow" ON (("ProductFlow"."FlowId" = "ProductFlowFlow"."Id")))
     JOIN "SEPTEM"."WF_ProductType" "ProductFlowProductType" ON (("ProductFlow"."ProductTypeId" = "ProductFlowProductType"."Id")))
     LEFT JOIN "SEPTEM"."WF_Condition" "ProductFlowCondition" ON (("ProductFlow"."ConditionId" = "ProductFlowCondition"."Id")));

CREATE VIEW "SEPTEM"."VW_WF_ProductFlowTransitionAllActive" AS
 SELECT "ProductFlowTransition"."Id",
    "ProductFlowTransitionProductFlow"."Id" AS "ProductFlowId",
    "ProductFlowTransitionTransition"."Id" AS "TransitionId",
    "ProductFlowTransitionTransition"."Code" AS "TransitionCode",
    "ProductFlowTransitionTransition"."Name" AS "TransitionName",
    "ProductFlowTransition"."Conditions",
    "ProductFlowTransitionProcuctStatus"."Id" AS "ProductStatusId",
    "ProductFlowTransition"."ExpiredDateFormat"
   FROM ((("SEPTEM"."WF_ProductFlowTransition" "ProductFlowTransition"
     JOIN "SEPTEM"."WF_ProductFlow" "ProductFlowTransitionProductFlow" ON (("ProductFlowTransition"."ProductFlowId" = "ProductFlowTransitionProductFlow"."Id")))
     JOIN "SEPTEM"."WF_FlowTransition" "ProductFlowTransitionTransition" ON (("ProductFlowTransition"."TransitionId" = "ProductFlowTransitionTransition"."Id")))
     LEFT JOIN "SEPTEM"."WF_ProductStatus" "ProductFlowTransitionProcuctStatus" ON (("ProductFlowTransition"."ProcuctStatusId" = "ProductFlowTransitionProcuctStatus"."Id")));

CREATE VIEW "SEPTEM"."VW_WF_ProductFlowTransitionSubFlowAllActive" AS
 SELECT "ProductFlowTransitionSubFlow"."Id",
    "ProductFlowTransitionSubFlowProductFlowTransition"."Id" AS "ProductFlowTransitionId",
    "ProductFlowTransitionSubFlowProductFlowTransition"."Id" AS "FlowId",
    "ProductFlowTransitionSubFlowFlow"."Name" AS "FlowName",
    "ProductFlowTransitionSubFlowCondition"."Id" AS "ConditionId",
    "ProductFlowTransitionSubFlowCondition"."Name" AS "ConditionName"
   FROM ((("SEPTEM"."WF_ProductFlowTransitionSubFlow" "ProductFlowTransitionSubFlow"
     JOIN "SEPTEM"."WF_ProductFlowTransition" "ProductFlowTransitionSubFlowProductFlowTransition" ON (("ProductFlowTransitionSubFlow"."ProductFlowTransitionId" = "ProductFlowTransitionSubFlowProductFlowTransition"."Id")))
     JOIN "SEPTEM"."WF_Flow" "ProductFlowTransitionSubFlowFlow" ON (("ProductFlowTransitionSubFlow"."FlowId" = "ProductFlowTransitionSubFlowFlow"."Id")))
     LEFT JOIN "SEPTEM"."WF_Condition" "ProductFlowTransitionSubFlowCondition" ON (("ProductFlowTransitionSubFlow"."ConditionId" = "ProductFlowTransitionSubFlowCondition"."Id")));

CREATE VIEW "SEPTEM"."VW_WF_WorkCommentAllActive" AS
 SELECT "WorkComment"."Id",
    "WorkCommentWork"."Id" AS "WorkId",
    "WorkComment"."Note",
    "WorkCommentUser"."Id" AS "UserId",
    "WorkCommentUser"."UserName",
    "WorkComment"."Date"
   FROM (("SEPTEM"."WF_WorkComment" "WorkComment"
     JOIN "SEPTEM"."WF_Work" "WorkCommentWork" ON (("WorkComment"."WorkId" = "WorkCommentWork"."Id")))
     JOIN "SEPTEM"."User" "WorkCommentUser" ON (("WorkComment"."UserId" = "WorkCommentUser"."Id")));

CREATE VIEW "SEPTEM"."VW_WF_WorkHistoryAllActive" AS
 SELECT "WorkHistory"."Id",
    "WorkHistoryWork"."Id" AS "WorkId",
    "WorkHistoryTransition"."Id" AS "TransitionId",
    "WorkHistoryTransition"."Code" AS "TransitionCode",
    "WorkHistoryTransition"."Name" AS "TransitionName",
    "WorkHistoryFromStatus"."Id" AS "FromStatusId",
    "WorkHistoryFromStatus"."Name" AS "FromStatusName",
    "WorkHistoryToStatus"."Id" AS "ToStatusId",
    "WorkHistoryToStatus"."Name" AS "ToStatusName",
    "WorkHistory"."Comment",
    "WorkHistory"."UserId",
    "WorkHistory"."Date"
   FROM (((("SEPTEM"."WF_WorkHistory" "WorkHistory"
     JOIN "SEPTEM"."WF_Work" "WorkHistoryWork" ON (("WorkHistory"."WorkId" = "WorkHistoryWork"."Id")))
     JOIN "SEPTEM"."WF_FlowStatus" "WorkHistoryToStatus" ON (("WorkHistory"."ToStatusId" = "WorkHistoryToStatus"."Id")))
     LEFT JOIN "SEPTEM"."WF_FlowTransition" "WorkHistoryTransition" ON (("WorkHistory"."TransitionId" = "WorkHistoryTransition"."Id")))
     LEFT JOIN "SEPTEM"."WF_FlowStatus" "WorkHistoryFromStatus" ON (("WorkHistory"."FromStatusId" = "WorkHistoryFromStatus"."Id")));

CREATE OR REPLACE VIEW "SEPTEM"."VW_RC_VacancyReport" AS
 SELECT v."Id",
    v."CreatedDate",
    v."VacancyName",
    v."OrganizationStructureId",
    org."StructureName",
    org."CurationStructureName",
    NULL::text AS "StaffUnit",
    (COALESCE(v."CreationBasis", childvac."CreationBasis"))::text AS "CreationBasis",
    COALESCE(emp."FullName", emp2."FullName") AS "WhosePlace",
    v."BusinessId",
    v."ExecuteDate" AS "OpenDate",
    COALESCE(v."StopDate", v."EndDate") AS "CloseDate",
    NULL::date AS "ReOpenDate",
    concat(u."UserFirstName", ' ', u."UserLastName") AS "Recruiter",
    v."VacancyType",
    v."VacancyStatus",
    COALESCE(bi."BudgetType", be."BudgetType", v."VacancyBudget") AS "BudgetType",
    count(av."Id") AS "ApplicationCount",
    count(av2."Id") AS "CandidateApplicationCount",
    count(jo."Id") AS "JobOfferCount",
    (count(interview."Id"))::integer AS "ShortlistApplicationCount",
    (count(interview2."Id"))::integer AS "ShortlistAcceptedApplicationCount",
    count(av3."Id") AS "RejectedApplicationCount",
    0 AS "SuccessApplicationCount",
    0 AS "ActiveDayCount",
    v."RecruiterUserId",
    0 AS "ShortlistCount"
   FROM ((((((((((((("SEPTEM"."RC_Vacancy" v
     JOIN "SEPTEM"."VW_HR_OrganizationStructure" org ON ((org."Id" = v."OrganizationStructureId")))
     LEFT JOIN "SEPTEM"."RC_ApplyVacancy" av ON ((av."VacancyId" = v."Id")))
     LEFT JOIN "SEPTEM"."RC_ApplyVacancy" av2 ON (((av2."VacancyId" = v."Id") AND ((av2."Status")::text <> 'Müraciət'::text))))
     LEFT JOIN "SEPTEM"."RC_ApplyVacancy" av3 ON (((av3."VacancyId" = v."Id") AND (((av2."ActionStatus")::text = 'Rejected'::text) OR ((av2."ActionStatus")::text = 'RejectedByAdmin'::text)))))
     JOIN "SEPTEM"."VW_UserAllActive" u ON ((u."Id" = v."RecruiterUserId")))
     LEFT JOIN "SEPTEM"."RC_BudgetItems" bi ON ((v."Id" = bi."VacancyId")))
     LEFT JOIN "SEPTEM"."RC_BudgetExtra" be ON ((v."Id" = be."VacancyId")))
     LEFT JOIN "SEPTEM"."RC_JobOffers" jo ON ((jo."ApplyVacancyId" = av."Id")))
     LEFT JOIN "SEPTEM"."VW_Employees" emp ON ((emp."Id" = v."WhosePlaceId")))
     LEFT JOIN "SEPTEM"."RC_Vacancy" childvac ON ((childvac."ParentId" = v."Id")))
     LEFT JOIN "SEPTEM"."VW_Employees" emp2 ON ((emp2."Id" = childvac."WhosePlaceId")))
     LEFT JOIN "SEPTEM"."RC_ApplyVacancyInterview" interview ON (((interview."ApplyVacancyId" = av."Id") AND ((interview."Status")::text = 'Send'::text))))
     LEFT JOIN "SEPTEM"."RC_ApplyVacancyInterview" interview2 ON (((interview2."ApplyVacancyId" = av."Id") AND ((interview2."Status")::text = 'Accepted'::text))))
  GROUP BY v."Id", v."CreatedDate", v."VacancyName", v."OrganizationStructureId", org."StructureName", org."CurationStructureName", childvac."CreationBasis", emp."FullName", emp2."FullName", v."BusinessId", v."OpenDate", v."CloseDate", (concat(u."UserFirstName", ' ', u."UserLastName")), v."VacancyType", v."VacancyStatus", COALESCE(bi."BudgetType", be."BudgetType", v."VacancyBudget");

